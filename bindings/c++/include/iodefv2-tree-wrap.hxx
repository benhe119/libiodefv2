















/*****
*
* Copyright (C) 2008-2016 CS-SI. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@prelude-ids.com>
*
* This file is part of the Libiodefv2 library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*
*****/

/*
 * This file was automatically generated by our generator, version 1
 *
 * Do not make changes to this file unless you know what you are doing.
 * modify the template interface file instead.
 * IODEFV2 version : RFC5070-bis-26
 * Template file: generate-tree-wrap.hxx.mako
 *
 */


#ifndef _LIBIODEFV2_IODEFV2_TREE_WRAP_HXX
#define _LIBIODEFV2_IODEFV2_TREE_WRAP_HXX

#include <list>
#include <string>

#include "libiodefv2.h"
#include "iodefv2-time.hxx"

using namespace std;


class IODEFV2iodefv2_data {
};

        
    

class IODEFV2telephone {
    protected:
        iodefv2_telephone_t *_priv;
        iodefv2_telephone_t *_priv;

    public:

    
        IODEFV2telephone();
        IODEFV2telephone(iodefv2_telephone_t *ptr);
        IODEFV2telephone *copy(IODEFV2telephone *dst);
        IODEFV2telephone *clone();
        int compare(IODEFV2telephone *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_type();

        iodefv2_telephone_type_t *get_type();
        void set_type(iodefv2_telephone_type_t type);
        iodefv2_telephone_type_t *new_type();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_telephone_number();
        void set_telephone_number(std::string *telephone_number);
        std::string *new_telephone_number();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2certificate {
    protected:
        iodefv2_certificate_t *_priv;
        iodefv2_certificate_t *_priv;

    public:

    
        IODEFV2certificate();
        IODEFV2certificate(iodefv2_certificate_t *ptr);
        IODEFV2certificate *copy(IODEFV2certificate *dst);
        IODEFV2certificate *clone();
        int compare(IODEFV2certificate *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        IODEFV2iodefv2_data *get_x509_data();
        void set_x509_data(IODEFV2iodefv2_data *x509_data);
        IODEFV2iodefv2_data *new_x509_data();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2key {
    protected:
        iodefv2_key_t *_priv;
        iodefv2_key_t *_priv;

    public:

    
        IODEFV2key();
        IODEFV2key(iodefv2_key_t *ptr);
        IODEFV2key *copy(IODEFV2key *dst);
        IODEFV2key *clone();
        int compare(IODEFV2key *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_registryaction();

        iodefv2_key_registryaction_t *get_registryaction();
        void set_registryaction(iodefv2_key_registryaction_t registryaction);
        iodefv2_key_registryaction_t *new_registryaction();





        std::string *get_ext_registryaction();
        void set_ext_registryaction(std::string *ext_registryaction);
        std::string *new_ext_registryaction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::string *get_key_name();
        void set_key_name(std::string *key_name);
        std::string *new_key_name();





        std::string *get_key_value();
        void set_key_value(std::string *key_value);
        std::string *new_key_value();



};

        
    

class IODEFV2observable_reference {
    protected:
        iodefv2_observable_reference_t *_priv;
        iodefv2_observable_reference_t *_priv;

    public:

    
        IODEFV2observable_reference();
        IODEFV2observable_reference(iodefv2_observable_reference_t *ptr);
        IODEFV2observable_reference *copy(IODEFV2observable_reference *dst);
        IODEFV2observable_reference *clone();
        int compare(IODEFV2observable_reference *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_uid_ref();
        void set_uid_ref(std::string *uid_ref);
        std::string *new_uid_ref();



};

        
    

class IODEFV2registry_handle {
    protected:
        iodefv2_registry_handle_t *_priv;
        iodefv2_registry_handle_t *_priv;

    public:

    
        IODEFV2registry_handle();
        IODEFV2registry_handle(iodefv2_registry_handle_t *ptr);
        IODEFV2registry_handle *copy(IODEFV2registry_handle *dst);
        IODEFV2registry_handle *clone();
        int compare(IODEFV2registry_handle *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_registry_handle_registry_t get_registry();
        void set_registry(iodefv2_registry_handle_registry_t registry);
        iodefv2_registry_handle_registry_t *new_registry();





        std::string *get_ext_registry();
        void set_ext_registry(std::string *ext_registry);
        std::string *new_ext_registry();



};

        
    

class IODEFV2time_impact {
    protected:
        iodefv2_time_impact_t *_priv;
        iodefv2_time_impact_t *_priv;

    public:

    
        IODEFV2time_impact();
        IODEFV2time_impact(iodefv2_time_impact_t *ptr);
        IODEFV2time_impact *copy(IODEFV2time_impact *dst);
        IODEFV2time_impact *clone();
        int compare(IODEFV2time_impact *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_ext_metric();
        void set_ext_metric(std::string *ext_metric);
        std::string *new_ext_metric();





        iodefv2_time_impact_duration_t get_duration();
        void set_duration(iodefv2_time_impact_duration_t duration);
        iodefv2_time_impact_duration_t *new_duration();





        iodefv2_time_impact_metric_t get_metric();
        void set_metric(iodefv2_time_impact_metric_t metric);
        iodefv2_time_impact_metric_t *new_metric();




        void unset_severity();

        iodefv2_time_impact_severity_t *get_severity();
        void set_severity(iodefv2_time_impact_severity_t severity);
        iodefv2_time_impact_severity_t *new_severity();





        std::string *get_ext_duration();
        void set_ext_duration(std::string *ext_duration);
        std::string *new_ext_duration();



};

        
    

class IODEFV2record_pattern {
    protected:
        iodefv2_record_pattern_t *_priv;
        iodefv2_record_pattern_t *_priv;

    public:

    
        IODEFV2record_pattern();
        IODEFV2record_pattern(iodefv2_record_pattern_t *ptr);
        IODEFV2record_pattern *copy(IODEFV2record_pattern *dst);
        IODEFV2record_pattern *clone();
        int compare(IODEFV2record_pattern *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_instance();

        uint32_t *get_instance();
        void set_instance(uint32_t instance);
        uint32_t *new_instance();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();




        void unset_offset();

        uint32_t *get_offset();
        void set_offset(uint32_t offset);
        uint32_t *new_offset();




        void unset_offsetunit();

        iodefv2_record_pattern_offsetunit_t *get_offsetunit();
        void set_offsetunit(iodefv2_record_pattern_offsetunit_t offsetunit);
        iodefv2_record_pattern_offsetunit_t *new_offsetunit();





        std::string *get_ext_offsetunit();
        void set_ext_offsetunit(std::string *ext_offsetunit);
        std::string *new_ext_offsetunit();





        iodefv2_record_pattern_type_t get_type();
        void set_type(iodefv2_record_pattern_type_t type);
        iodefv2_record_pattern_type_t *new_type();



};

        
    

class IODEFV2reference {
    protected:
        iodefv2_reference_t *_priv;
        iodefv2_reference_t *_priv;

    public:

    
        IODEFV2reference();
        IODEFV2reference(iodefv2_reference_t *ptr);
        IODEFV2reference *copy(IODEFV2reference *dst);
        IODEFV2reference *clone();
        int compare(IODEFV2reference *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::string *get_reference_name();
        void set_reference_name(std::string *reference_name);
        std::string *new_reference_name();



};

        
    

class IODEFV2postal_address {
    protected:
        iodefv2_postal_address_t *_priv;
        iodefv2_postal_address_t *_priv;

    public:

    
        IODEFV2postal_address();
        IODEFV2postal_address(iodefv2_postal_address_t *ptr);
        IODEFV2postal_address *copy(IODEFV2postal_address *dst);
        IODEFV2postal_address *clone();
        int compare(IODEFV2postal_address *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_type();

        iodefv2_postal_address_type_t *get_type();
        void set_type(iodefv2_postal_address_type_t type);
        iodefv2_postal_address_type_t *new_type();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_p_address();
        void set_p_address(std::string *p_address);
        std::string *new_p_address();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2node_role {
    protected:
        iodefv2_node_role_t *_priv;
        iodefv2_node_role_t *_priv;

    public:

    
        IODEFV2node_role();
        IODEFV2node_role(iodefv2_node_role_t *ptr);
        IODEFV2node_role *copy(IODEFV2node_role *dst);
        IODEFV2node_role *clone();
        int compare(IODEFV2node_role *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_node_role_category_t get_category();
        void set_category(iodefv2_node_role_category_t category);
        iodefv2_node_role_category_t *new_category();





        std::string *get_ext_category();
        void set_ext_category(std::string *ext_category);
        std::string *new_ext_category();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2incident_id {
    protected:
        iodefv2_incident_id_t *_priv;
        iodefv2_incident_id_t *_priv;

    public:

    
        IODEFV2incident_id();
        IODEFV2incident_id(iodefv2_incident_id_t *ptr);
        IODEFV2incident_id *copy(IODEFV2incident_id *dst);
        IODEFV2incident_id *clone();
        int compare(IODEFV2incident_id *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_instance();
        void set_instance(std::string *instance);
        std::string *new_instance();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();




        void unset_restriction();

        iodefv2_incident_id_restriction_t *get_restriction();
        void set_restriction(iodefv2_incident_id_restriction_t restriction);
        iodefv2_incident_id_restriction_t *new_restriction();



};

        
    

class IODEFV2alternative_indicator_id {
    protected:
        iodefv2_alternative_indicator_id_t *_priv;
        iodefv2_alternative_indicator_id_t *_priv;

    public:

    
        IODEFV2alternative_indicator_id();
        IODEFV2alternative_indicator_id(iodefv2_alternative_indicator_id_t *ptr);
        IODEFV2alternative_indicator_id *copy(IODEFV2alternative_indicator_id *dst);
        IODEFV2alternative_indicator_id *clone();
        int compare(IODEFV2alternative_indicator_id *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_alternative_indicator_id_restriction_t *get_restriction();
        void set_restriction(iodefv2_alternative_indicator_id_restriction_t restriction);
        iodefv2_alternative_indicator_id_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_indicator_reference();
        void set_indicator_reference(std::string *indicator_reference);
        std::string *new_indicator_reference();



};

        
    

class IODEFV2confidence {
    protected:
        iodefv2_confidence_t *_priv;
        iodefv2_confidence_t *_priv;

    public:

    
        IODEFV2confidence();
        IODEFV2confidence(iodefv2_confidence_t *ptr);
        IODEFV2confidence *copy(IODEFV2confidence *dst);
        IODEFV2confidence *clone();
        int compare(IODEFV2confidence *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_confidence_rating_t get_rating();
        void set_rating(iodefv2_confidence_rating_t rating);
        iodefv2_confidence_rating_t *new_rating();





        std::string *get_ext_rating();
        void set_ext_rating(std::string *ext_rating);
        std::string *new_ext_rating();



};

        
    

class IODEFV2system_impact {
    protected:
        iodefv2_system_impact_t *_priv;
        iodefv2_system_impact_t *_priv;

    public:

    
        IODEFV2system_impact();
        IODEFV2system_impact(iodefv2_system_impact_t *ptr);
        IODEFV2system_impact *copy(IODEFV2system_impact *dst);
        IODEFV2system_impact *clone();
        int compare(IODEFV2system_impact *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_completion();

        iodefv2_system_impact_completion_t *get_completion();
        void set_completion(iodefv2_system_impact_completion_t completion);
        iodefv2_system_impact_completion_t *new_completion();





        iodefv2_system_impact_type_t get_type();
        void set_type(iodefv2_system_impact_type_t type);
        iodefv2_system_impact_type_t *new_type();




        void unset_severity();

        iodefv2_system_impact_severity_t *get_severity();
        void set_severity(iodefv2_system_impact_severity_t severity);
        iodefv2_system_impact_severity_t *new_severity();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2software_reference {
    protected:
        iodefv2_software_reference_t *_priv;
        iodefv2_software_reference_t *_priv;

    public:

    
        IODEFV2software_reference();
        IODEFV2software_reference(iodefv2_software_reference_t *ptr);
        IODEFV2software_reference *copy(IODEFV2software_reference *dst);
        IODEFV2software_reference *clone();
        int compare(IODEFV2software_reference *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_dtype();

        iodefv2_software_reference_dtype_t *get_dtype();
        void set_dtype(iodefv2_software_reference_dtype_t dtype);
        iodefv2_software_reference_dtype_t *new_dtype();





        std::string *get_ext_spec_name();
        void set_ext_spec_name(std::string *ext_spec_name);
        std::string *new_ext_spec_name();





        std::string *get_ext_dtype();
        void set_ext_dtype(std::string *ext_dtype);
        std::string *new_ext_dtype();



};

        
    

class IODEFV2business_impact {
    protected:
        iodefv2_business_impact_t *_priv;
        iodefv2_business_impact_t *_priv;

    public:

    
        IODEFV2business_impact();
        IODEFV2business_impact(iodefv2_business_impact_t *ptr);
        IODEFV2business_impact *copy(IODEFV2business_impact *dst);
        IODEFV2business_impact *clone();
        int compare(IODEFV2business_impact *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_ext_severity();
        void set_ext_severity(std::string *ext_severity);
        std::string *new_ext_severity();





        iodefv2_business_impact_type_t get_type();
        void set_type(iodefv2_business_impact_type_t type);
        iodefv2_business_impact_type_t *new_type();




        void unset_severity();

        iodefv2_business_impact_severity_t *get_severity();
        void set_severity(iodefv2_business_impact_severity_t severity);
        iodefv2_business_impact_severity_t *new_severity();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2indicator_reference {
    protected:
        iodefv2_indicator_reference_t *_priv;
        iodefv2_indicator_reference_t *_priv;

    public:

    
        IODEFV2indicator_reference();
        IODEFV2indicator_reference(iodefv2_indicator_reference_t *ptr);
        IODEFV2indicator_reference *copy(IODEFV2indicator_reference *dst);
        IODEFV2indicator_reference *clone();
        int compare(IODEFV2indicator_reference *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_uid_ref();
        void set_uid_ref(std::string *uid_ref);
        std::string *new_uid_ref();





        std::string *get_version();
        void set_version(std::string *version);
        std::string *new_version();





        std::string *get_euid_ref();
        void set_euid_ref(std::string *euid_ref);
        std::string *new_euid_ref();



};

        
    

class IODEFV2email {
    protected:
        iodefv2_email_t *_priv;
        iodefv2_email_t *_priv;

    public:

    
        IODEFV2email();
        IODEFV2email(iodefv2_email_t *ptr);
        IODEFV2email *copy(IODEFV2email *dst);
        IODEFV2email *clone();
        int compare(IODEFV2email *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_type();

        iodefv2_email_type_t *get_type();
        void set_type(iodefv2_email_type_t type);
        iodefv2_email_type_t *new_type();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_email_to();
        void set_email_to(std::string *email_to);
        std::string *new_email_to();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2intended_impact {
    protected:
        iodefv2_intended_impact_t *_priv;
        iodefv2_intended_impact_t *_priv;

    public:

    
        IODEFV2intended_impact();
        IODEFV2intended_impact(iodefv2_intended_impact_t *ptr);
        IODEFV2intended_impact *copy(IODEFV2intended_impact *dst);
        IODEFV2intended_impact *clone();
        int compare(IODEFV2intended_impact *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_ext_severity();
        void set_ext_severity(std::string *ext_severity);
        std::string *new_ext_severity();





        iodefv2_intended_impact_type_t get_type();
        void set_type(iodefv2_intended_impact_type_t type);
        iodefv2_intended_impact_type_t *new_type();




        void unset_severity();

        iodefv2_intended_impact_severity_t *get_severity();
        void set_severity(iodefv2_intended_impact_severity_t severity);
        iodefv2_intended_impact_severity_t *new_severity();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2additional_data {
    protected:
        iodefv2_additional_data_t *_priv;
        iodefv2_additional_data_t *_priv;

    public:

    
        IODEFV2additional_data();
        IODEFV2additional_data(iodefv2_additional_data_t *ptr);
        IODEFV2additional_data *copy(IODEFV2additional_data *dst);
        IODEFV2additional_data *clone();
        int compare(IODEFV2additional_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_additional_data_restriction_t *get_restriction();
        void set_restriction(iodefv2_additional_data_restriction_t restriction);
        iodefv2_additional_data_restriction_t *new_restriction();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        iodefv2_additional_data_type_t get_type();
        void set_type(iodefv2_additional_data_type_t type);
        iodefv2_additional_data_type_t *new_type();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_formatid();
        void set_formatid(std::string *formatid);
        std::string *new_formatid();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        std::string *get_ext_dtype();
        void set_ext_dtype(std::string *ext_dtype);
        std::string *new_ext_dtype();





        IODEFV2iodefv2_data *get_data();
        void set_data(IODEFV2iodefv2_data *data);
        IODEFV2iodefv2_data *new_data();



};

        
    

class IODEFV2counter {
    protected:
        iodefv2_counter_t *_priv;
        iodefv2_counter_t *_priv;

    public:

    
        IODEFV2counter();
        IODEFV2counter(iodefv2_counter_t *ptr);
        IODEFV2counter *copy(IODEFV2counter *dst);
        IODEFV2counter *clone();
        int compare(IODEFV2counter *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        iodefv2_counter_unit_t get_unit();
        void set_unit(iodefv2_counter_unit_t unit);
        iodefv2_counter_unit_t *new_unit();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();




        void unset_duration();

        iodefv2_counter_duration_t *get_duration();
        void set_duration(iodefv2_counter_duration_t duration);
        iodefv2_counter_duration_t *new_duration();





        std::string *get_ext_unit();
        void set_ext_unit(std::string *ext_unit);
        std::string *new_ext_unit();





        iodefv2_counter_type_t get_type();
        void set_type(iodefv2_counter_type_t type);
        iodefv2_counter_type_t *new_type();





        std::string *get_ext_duration();
        void set_ext_duration(std::string *ext_duration);
        std::string *new_ext_duration();



};

        
    

class IODEFV2monetary_impact {
    protected:
        iodefv2_monetary_impact_t *_priv;
        iodefv2_monetary_impact_t *_priv;

    public:

    
        IODEFV2monetary_impact();
        IODEFV2monetary_impact(iodefv2_monetary_impact_t *ptr);
        IODEFV2monetary_impact *copy(IODEFV2monetary_impact *dst);
        IODEFV2monetary_impact *clone();
        int compare(IODEFV2monetary_impact *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_currency();
        void set_currency(std::string *currency);
        std::string *new_currency();




        void unset_severity();

        iodefv2_monetary_impact_severity_t *get_severity();
        void set_severity(iodefv2_monetary_impact_severity_t severity);
        iodefv2_monetary_impact_severity_t *new_severity();



};

        
    

class IODEFV2service_name {
    protected:
        iodefv2_service_name_t *_priv;
        iodefv2_service_name_t *_priv;

    public:

    
        IODEFV2service_name();
        IODEFV2service_name(iodefv2_service_name_t *ptr);
        IODEFV2service_name *copy(IODEFV2service_name *dst);
        IODEFV2service_name *clone();
        int compare(IODEFV2service_name *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::string *get_iana_service();
        void set_iana_service(std::string *iana_service);
        std::string *new_iana_service();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2indicator_id {
    protected:
        iodefv2_indicator_id_t *_priv;
        iodefv2_indicator_id_t *_priv;

    public:

    
        IODEFV2indicator_id();
        IODEFV2indicator_id(iodefv2_indicator_id_t *ptr);
        IODEFV2indicator_id *copy(IODEFV2indicator_id *dst);
        IODEFV2indicator_id *clone();
        int compare(IODEFV2indicator_id *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_version();
        void set_version(std::string *version);
        std::string *new_version();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();



};

        
    

class IODEFV2signature_data {
    protected:
        iodefv2_signature_data_t *_priv;
        iodefv2_signature_data_t *_priv;

    public:

    
        IODEFV2signature_data();
        IODEFV2signature_data(iodefv2_signature_data_t *ptr);
        IODEFV2signature_data *copy(IODEFV2signature_data *dst);
        IODEFV2signature_data *clone();
        int compare(IODEFV2signature_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_signature();
        void set_signature(std::string *signature);
        std::string *new_signature();



};

        
    

class IODEFV2address {
    protected:
        iodefv2_address_t *_priv;
        iodefv2_address_t *_priv;

    public:

    
        IODEFV2address();
        IODEFV2address(iodefv2_address_t *ptr);
        IODEFV2address *copy(IODEFV2address *dst);
        IODEFV2address *clone();
        int compare(IODEFV2address *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_address_category_t get_category();
        void set_category(iodefv2_address_category_t category);
        iodefv2_address_category_t *new_category();





        std::string *get_vlan_name();
        void set_vlan_name(std::string *vlan_name);
        std::string *new_vlan_name();





        std::string *get_ext_category();
        void set_ext_category(std::string *ext_category);
        std::string *new_ext_category();





        std::string *get_vlan_num();
        void set_vlan_num(std::string *vlan_num);
        std::string *new_vlan_num();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();



};

        
    

class IODEFV2application_header {
private:

        std::list<IODEFV2additional_data *> additional_data;
    protected:
        iodefv2_application_header_t *_priv;
        iodefv2_application_header_t *_priv;

    public:

    
        IODEFV2application_header();
        IODEFV2application_header(iodefv2_application_header_t *ptr);
        IODEFV2application_header *copy(IODEFV2application_header *dst);
        IODEFV2application_header *clone();
        int compare(IODEFV2application_header *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);


};

        
    

class IODEFV2certificate_data {
private:

        std::list<IODEFV2certificate *> certificate;
    protected:
        iodefv2_certificate_data_t *_priv;
        iodefv2_certificate_data_t *_priv;

    public:

    
        IODEFV2certificate_data();
        IODEFV2certificate_data(iodefv2_certificate_data_t *ptr);
        IODEFV2certificate_data *copy(IODEFV2certificate_data *dst);
        IODEFV2certificate_data *clone();
        int compare(IODEFV2certificate_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_certificate_data_restriction_t *get_restriction();
        void set_restriction(iodefv2_certificate_data_restriction_t restriction);
        iodefv2_certificate_data_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2certificate *> *get_certificate_list();
        void set_certificate(IODEFV2certificate *object, int pos);
        IODEFV2certificate *new_certificate(int pos);


};

        
    

class IODEFV2threat_actor {
private:

        std::list<IODEFV2additional_data *> additional_data;
    protected:
        iodefv2_threat_actor_t *_priv;
        iodefv2_threat_actor_t *_priv;

    public:

    
        IODEFV2threat_actor();
        IODEFV2threat_actor(iodefv2_threat_actor_t *ptr);
        IODEFV2threat_actor *copy(IODEFV2threat_actor *dst);
        IODEFV2threat_actor *clone();
        int compare(IODEFV2threat_actor *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_threat_actor_restriction_t *get_restriction();
        void set_restriction(iodefv2_threat_actor_restriction_t restriction);
        iodefv2_threat_actor_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::string *get_threat_actor_id();
        void set_threat_actor_id(std::string *threat_actor_id);
        std::string *new_threat_actor_id();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);


};

        
    

class IODEFV2method {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2reference *> reference;
    protected:
        iodefv2_method_t *_priv;
        iodefv2_method_t *_priv;

    public:

    
        IODEFV2method();
        IODEFV2method(iodefv2_method_t *ptr);
        IODEFV2method *copy(IODEFV2method *dst);
        IODEFV2method *clone();
        int compare(IODEFV2method *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_method_restriction_t *get_restriction();
        void set_restriction(iodefv2_method_restriction_t restriction);
        iodefv2_method_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IODEFV2reference *> *get_reference_list();
        void set_reference(IODEFV2reference *object, int pos);
        IODEFV2reference *new_reference(int pos);


};

        
    

class IODEFV2alternative_id {
private:

        std::list<IODEFV2incident_id *> incident_id;
    protected:
        iodefv2_alternative_id_t *_priv;
        iodefv2_alternative_id_t *_priv;

    public:

    
        IODEFV2alternative_id();
        IODEFV2alternative_id(iodefv2_alternative_id_t *ptr);
        IODEFV2alternative_id *copy(IODEFV2alternative_id *dst);
        IODEFV2alternative_id *clone();
        int compare(IODEFV2alternative_id *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_alternative_id_restriction_t *get_restriction();
        void set_restriction(iodefv2_alternative_id_restriction_t restriction);
        iodefv2_alternative_id_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::list<IODEFV2incident_id *> *get_incident_id_list();
        void set_incident_id(IODEFV2incident_id *object, int pos);
        IODEFV2incident_id *new_incident_id(int pos);


};

        
    

class IODEFV2software {
private:

        IODEFV2software_reference * software_reference;
    protected:
        iodefv2_software_t *_priv;
        iodefv2_software_t *_priv;

    public:

    
        IODEFV2software();
        IODEFV2software(iodefv2_software_t *ptr);
        IODEFV2software *copy(IODEFV2software *dst);
        IODEFV2software *clone();
        int compare(IODEFV2software *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        iodefv2_software_reference_t *get_software_reference();
        void set_software_reference(iodefv2_software_reference_t *software_reference);
        iodefv2_software_reference_t *new_software_reference();



};

        
    

class IODEFV2nameservers {
private:

        std::list<IODEFV2address *> address;
    protected:
        iodefv2_nameservers_t *_priv;
        iodefv2_nameservers_t *_priv;

    public:

    
        IODEFV2nameservers();
        IODEFV2nameservers(iodefv2_nameservers_t *ptr);
        IODEFV2nameservers *copy(IODEFV2nameservers *dst);
        IODEFV2nameservers *clone();
        int compare(IODEFV2nameservers *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2address *> *get_address_list();
        void set_address(IODEFV2address *object, int pos);
        IODEFV2address *new_address(int pos);




        std::string *get_server();
        void set_server(std::string *server);
        std::string *new_server();



};

        
    

class IODEFV2windows_registry_keys_modified {
private:

        std::list<IODEFV2key *> key;
    protected:
        iodefv2_windows_registry_keys_modified_t *_priv;
        iodefv2_windows_registry_keys_modified_t *_priv;

    public:

    
        IODEFV2windows_registry_keys_modified();
        IODEFV2windows_registry_keys_modified(iodefv2_windows_registry_keys_modified_t *ptr);
        IODEFV2windows_registry_keys_modified *copy(IODEFV2windows_registry_keys_modified *dst);
        IODEFV2windows_registry_keys_modified *clone();
        int compare(IODEFV2windows_registry_keys_modified *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2key *> *get_key_list();
        void set_key(IODEFV2key *object, int pos);
        IODEFV2key *new_key(int pos);


};

        
    

class IODEFV2campaign {
private:

        std::list<IODEFV2additional_data *> additional_data;
    protected:
        iodefv2_campaign_t *_priv;
        iodefv2_campaign_t *_priv;

    public:

    
        IODEFV2campaign();
        IODEFV2campaign(iodefv2_campaign_t *ptr);
        IODEFV2campaign *copy(IODEFV2campaign *dst);
        IODEFV2campaign *clone();
        int compare(IODEFV2campaign *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_campaign_restriction_t *get_restriction();
        void set_restriction(iodefv2_campaign_restriction_t restriction);
        iodefv2_campaign_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::string *get_campaign_id();
        void set_campaign_id(std::string *campaign_id);
        std::string *new_campaign_id();



};

        
    

class IODEFV2assessment {
private:

        std::list<IODEFV2intended_impact *> intended_impact;

        IODEFV2confidence * confidence;

        std::list<IODEFV2time_impact *> time_impact;

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2monetary_impact *> monetary_impact;

        std::list<IODEFV2counter *> counter;

        std::list<IODEFV2system_impact *> system_impact;

        std::list<IODEFV2business_impact *> business_impact;
    protected:
        iodefv2_assessment_t *_priv;
        iodefv2_assessment_t *_priv;

    public:

    
        IODEFV2assessment();
        IODEFV2assessment(iodefv2_assessment_t *ptr);
        IODEFV2assessment *copy(IODEFV2assessment *dst);
        IODEFV2assessment *clone();
        int compare(IODEFV2assessment *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_assessment_restriction_t *get_restriction();
        void set_restriction(iodefv2_assessment_restriction_t restriction);
        iodefv2_assessment_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();




        void unset_occurrence();

        iodefv2_assessment_occurrence_t *get_occurrence();
        void set_occurrence(iodefv2_assessment_occurrence_t occurrence);
        iodefv2_assessment_occurrence_t *new_occurrence();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2intended_impact *> *get_intended_impact_list();
        void set_intended_impact(IODEFV2intended_impact *object, int pos);
        IODEFV2intended_impact *new_intended_impact(int pos);




        iodefv2_confidence_t *get_confidence();
        void set_confidence(iodefv2_confidence_t *confidence);
        iodefv2_confidence_t *new_confidence();





        std::list<IODEFV2time_impact *> *get_time_impact_list();
        void set_time_impact(IODEFV2time_impact *object, int pos);
        IODEFV2time_impact *new_time_impact(int pos);




        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::list<IODEFV2monetary_impact *> *get_monetary_impact_list();
        void set_monetary_impact(IODEFV2monetary_impact *object, int pos);
        IODEFV2monetary_impact *new_monetary_impact(int pos);




        std::list<IODEFV2counter *> *get_counter_list();
        void set_counter(IODEFV2counter *object, int pos);
        IODEFV2counter *new_counter(int pos);




        std::list<IODEFV2system_impact *> *get_system_impact_list();
        void set_system_impact(IODEFV2system_impact *object, int pos);
        IODEFV2system_impact *new_system_impact(int pos);




        std::list<IODEFV2business_impact *> *get_business_impact_list();
        void set_business_impact(IODEFV2business_impact *object, int pos);
        IODEFV2business_impact *new_business_impact(int pos);




        std::string *get_incident_category();
        void set_incident_category(std::string *incident_category);
        std::string *new_incident_category();





        std::string *get_mitigating_factor();
        void set_mitigating_factor(std::string *mitigating_factor);
        std::string *new_mitigating_factor();





        std::string *get_cause();
        void set_cause(std::string *cause);
        std::string *new_cause();



};

        
    

class IODEFV2attack_phase {
private:

        std::list<IODEFV2additional_data *> additional_data;
    protected:
        iodefv2_attack_phase_t *_priv;
        iodefv2_attack_phase_t *_priv;

    public:

    
        IODEFV2attack_phase();
        IODEFV2attack_phase(iodefv2_attack_phase_t *ptr);
        IODEFV2attack_phase *copy(IODEFV2attack_phase *dst);
        IODEFV2attack_phase *clone();
        int compare(IODEFV2attack_phase *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::string *get_attack_phase_id();
        void set_attack_phase_id(std::string *attack_phase_id);
        std::string *new_attack_phase_id();



};

        
    

class IODEFV2contact {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2telephone *> telephone;

        std::list<IODEFV2email *> email;

        std::list<IODEFV2postal_address *> postal_address;

        std::list<IODEFV2registry_handle *> registry_handle;
    protected:
        iodefv2_contact_t *_priv;
        iodefv2_contact_t *_priv;

    public:

    
        IODEFV2contact();
        IODEFV2contact(iodefv2_contact_t *ptr);
        IODEFV2contact *copy(IODEFV2contact *dst);
        IODEFV2contact *clone();
        int compare(IODEFV2contact *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_contact_restriction_t *get_restriction();
        void set_restriction(iodefv2_contact_restriction_t restriction);
        iodefv2_contact_restriction_t *new_restriction();





        iodefv2_contact_role_t get_role();
        void set_role(iodefv2_contact_role_t role);
        iodefv2_contact_role_t *new_role();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_ext_role();
        void set_ext_role(std::string *ext_role);
        std::string *new_ext_role();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        iodefv2_contact_type_t get_type();
        void set_type(iodefv2_contact_type_t type);
        iodefv2_contact_type_t *new_type();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_contact_title();
        void set_contact_title(std::string *contact_title);
        std::string *new_contact_title();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IODEFV2telephone *> *get_telephone_list();
        void set_telephone(IODEFV2telephone *object, int pos);
        IODEFV2telephone *new_telephone(int pos);




        std::list<IODEFV2email *> *get_email_list();
        void set_email(IODEFV2email *object, int pos);
        IODEFV2email *new_email(int pos);




        std::string *get_contact_name();
        void set_contact_name(std::string *contact_name);
        std::string *new_contact_name();





        std::string *get_timezone();
        void set_timezone(std::string *timezone);
        std::string *new_timezone();





        std::list<IODEFV2postal_address *> *get_postal_address_list();
        void set_postal_address(IODEFV2postal_address *object, int pos);
        IODEFV2postal_address *new_postal_address(int pos);




        std::list<IODEFV2registry_handle *> *get_registry_handle_list();
        void set_registry_handle(IODEFV2registry_handle *object, int pos);
        IODEFV2registry_handle *new_registry_handle(int pos);


};

        
    

class IODEFV2related_activity {
private:

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2confidence * confidence;

        std::list<IODEFV2campaign *> campaign;

        std::list<IODEFV2threat_actor *> threat_actor;

        std::list<IODEFV2indicator_id *> indicator_id;

        std::list<IODEFV2incident_id *> incident_id;
    protected:
        iodefv2_related_activity_t *_priv;
        iodefv2_related_activity_t *_priv;

    public:

    
        IODEFV2related_activity();
        IODEFV2related_activity(iodefv2_related_activity_t *ptr);
        IODEFV2related_activity *copy(IODEFV2related_activity *dst);
        IODEFV2related_activity *clone();
        int compare(IODEFV2related_activity *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_related_activity_restriction_t *get_restriction();
        void set_restriction(iodefv2_related_activity_restriction_t restriction);
        iodefv2_related_activity_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_confidence_t *get_confidence();
        void set_confidence(iodefv2_confidence_t *confidence);
        iodefv2_confidence_t *new_confidence();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IODEFV2campaign *> *get_campaign_list();
        void set_campaign(IODEFV2campaign *object, int pos);
        IODEFV2campaign *new_campaign(int pos);




        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::list<IODEFV2threat_actor *> *get_threat_actor_list();
        void set_threat_actor(IODEFV2threat_actor *object, int pos);
        IODEFV2threat_actor *new_threat_actor(int pos);




        std::list<IODEFV2indicator_id *> *get_indicator_id_list();
        void set_indicator_id(IODEFV2indicator_id *object, int pos);
        IODEFV2indicator_id *new_indicator_id(int pos);




        std::list<IODEFV2incident_id *> *get_incident_id_list();
        void set_incident_id(IODEFV2incident_id *object, int pos);
        IODEFV2incident_id *new_incident_id(int pos);


};

        
    

class IODEFV2domain_contacts {
private:

        std::list<IODEFV2contact *> contact;
    protected:
        iodefv2_domain_contacts_t *_priv;
        iodefv2_domain_contacts_t *_priv;

    public:

    
        IODEFV2domain_contacts();
        IODEFV2domain_contacts(iodefv2_domain_contacts_t *ptr);
        IODEFV2domain_contacts *copy(IODEFV2domain_contacts *dst);
        IODEFV2domain_contacts *clone();
        int compare(IODEFV2domain_contacts *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2contact *> *get_contact_list();
        void set_contact(IODEFV2contact *object, int pos);
        IODEFV2contact *new_contact(int pos);




        std::string *get_same_domain_contact();
        void set_same_domain_contact(std::string *same_domain_contact);
        std::string *new_same_domain_contact();



};

        
    

class IODEFV2history_item {
private:

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2contact * contact;

        IODEFV2incident_id * incident_id;
    protected:
        iodefv2_history_item_t *_priv;
        iodefv2_history_item_t *_priv;

    public:

    
        IODEFV2history_item();
        IODEFV2history_item(iodefv2_history_item_t *ptr);
        IODEFV2history_item *copy(IODEFV2history_item *dst);
        IODEFV2history_item *clone();
        int compare(IODEFV2history_item *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_history_item_action_t get_action();
        void set_action(iodefv2_history_item_action_t action);
        iodefv2_history_item_action_t *new_action();




        void unset_restriction();

        iodefv2_history_item_restriction_t *get_restriction();
        void set_restriction(iodefv2_history_item_restriction_t restriction);
        iodefv2_history_item_restriction_t *new_restriction();





        std::string *get_ext_action();
        void set_ext_action(std::string *ext_action);
        std::string *new_ext_action();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_contact_t *get_contact();
        void set_contact(iodefv2_contact_t *contact);
        iodefv2_contact_t *new_contact();





        std::string *get_defined_coa();
        void set_defined_coa(std::string *defined_coa);
        std::string *new_defined_coa();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        iodefv2_incident_id_t *get_incident_id();
        void set_incident_id(iodefv2_incident_id_t *incident_id);
        iodefv2_incident_id_t *new_incident_id();





        IODEFV2iodefv2_time *get_date_time();
        void set_date_time(IODEFV2iodefv2_time *date_time);
        IODEFV2iodefv2_time *new_date_time();



};

        
    

class IODEFV2fuzzy_hash {
private:

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2software * software;
    protected:
        iodefv2_fuzzy_hash_t *_priv;
        iodefv2_fuzzy_hash_t *_priv;

    public:

    
        IODEFV2fuzzy_hash();
        IODEFV2fuzzy_hash(iodefv2_fuzzy_hash_t *ptr);
        IODEFV2fuzzy_hash *copy(IODEFV2fuzzy_hash *dst);
        IODEFV2fuzzy_hash *clone();
        int compare(IODEFV2fuzzy_hash *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_software_t *get_software();
        void set_software(iodefv2_software_t *software);
        iodefv2_software_t *new_software();



};

        
    

class IODEFV2hash {
private:

        IODEFV2software * software;
    protected:
        iodefv2_hash_t *_priv;
        iodefv2_hash_t *_priv;

    public:

    
        IODEFV2hash();
        IODEFV2hash(iodefv2_hash_t *ptr);
        IODEFV2hash *copy(IODEFV2hash *dst);
        IODEFV2hash *clone();
        int compare(IODEFV2hash *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_digest_value();
        void set_digest_value(std::string *digest_value);
        std::string *new_digest_value();





        std::string *get_digest_method();
        void set_digest_method(std::string *digest_method);
        std::string *new_digest_method();





        std::string *get_canonicalization_method();
        void set_canonicalization_method(std::string *canonicalization_method);
        std::string *new_canonicalization_method();





        iodefv2_software_t *get_software();
        void set_software(iodefv2_software_t *software);
        iodefv2_software_t *new_software();



};

        
    

class IODEFV2detection_pattern {
private:

        IODEFV2software * software;
    protected:
        iodefv2_detection_pattern_t *_priv;
        iodefv2_detection_pattern_t *_priv;

    public:

    
        IODEFV2detection_pattern();
        IODEFV2detection_pattern(iodefv2_detection_pattern_t *ptr);
        IODEFV2detection_pattern *copy(IODEFV2detection_pattern *dst);
        IODEFV2detection_pattern *clone();
        int compare(IODEFV2detection_pattern *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_detection_pattern_restriction_t *get_restriction();
        void set_restriction(iodefv2_detection_pattern_restriction_t restriction);
        iodefv2_detection_pattern_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::string *get_detection_configuration();
        void set_detection_configuration(std::string *detection_configuration);
        std::string *new_detection_configuration();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        iodefv2_software_t *get_software();
        void set_software(iodefv2_software_t *software);
        iodefv2_software_t *new_software();



};

        
    

class IODEFV2expectation {
private:

        IODEFV2contact * contact;
    protected:
        iodefv2_expectation_t *_priv;
        iodefv2_expectation_t *_priv;

    public:

    
        IODEFV2expectation();
        IODEFV2expectation(iodefv2_expectation_t *ptr);
        IODEFV2expectation *copy(IODEFV2expectation *dst);
        IODEFV2expectation *clone();
        int compare(IODEFV2expectation *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_expectation_restriction_t *get_restriction();
        void set_restriction(iodefv2_expectation_restriction_t restriction);
        iodefv2_expectation_restriction_t *new_restriction();





        std::string *get_ext_action();
        void set_ext_action(std::string *ext_action);
        std::string *new_ext_action();





        std::string *get_ext_severity();
        void set_ext_severity(std::string *ext_severity);
        std::string *new_ext_severity();




        void unset_severity();

        iodefv2_expectation_severity_t *get_severity();
        void set_severity(iodefv2_expectation_severity_t severity);
        iodefv2_expectation_severity_t *new_severity();




        void unset_action();

        iodefv2_expectation_action_t *get_action();
        void set_action(iodefv2_expectation_action_t action);
        iodefv2_expectation_action_t *new_action();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        IODEFV2iodefv2_time *get_end_time();
        void set_end_time(IODEFV2iodefv2_time *end_time);
        IODEFV2iodefv2_time *new_end_time();





        std::string *get_defined_coa();
        void set_defined_coa(std::string *defined_coa);
        std::string *new_defined_coa();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        IODEFV2iodefv2_time *get_start_time();
        void set_start_time(IODEFV2iodefv2_time *start_time);
        IODEFV2iodefv2_time *new_start_time();





        iodefv2_contact_t *get_contact();
        void set_contact(iodefv2_contact_t *contact);
        iodefv2_contact_t *new_contact();



};

        
    

class IODEFV2domain_data {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2nameservers *> nameservers;

        IODEFV2domain_contacts * domain_contacts;
    protected:
        iodefv2_domain_data_t *_priv;
        iodefv2_domain_data_t *_priv;

    public:

    
        IODEFV2domain_data();
        IODEFV2domain_data(iodefv2_domain_data_t *ptr);
        IODEFV2domain_data *copy(IODEFV2domain_data *dst);
        IODEFV2domain_data *clone();
        int compare(IODEFV2domain_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_ext_domain_status();
        void set_ext_domain_status(std::string *ext_domain_status);
        std::string *new_ext_domain_status();





        iodefv2_domain_data_domain_status_t get_domain_status();
        void set_domain_status(iodefv2_domain_data_domain_status_t domain_status);
        iodefv2_domain_data_domain_status_t *new_domain_status();





        std::string *get_ext_system_status();
        void set_ext_system_status(std::string *ext_system_status);
        std::string *new_ext_system_status();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        iodefv2_domain_data_system_status_t get_system_status();
        void set_system_status(iodefv2_domain_data_system_status_t system_status);
        iodefv2_domain_data_system_status_t *new_system_status();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::list<IODEFV2nameservers *> *get_nameservers_list();
        void set_nameservers(IODEFV2nameservers *object, int pos);
        IODEFV2nameservers *new_nameservers(int pos);




        IODEFV2iodefv2_time *get_registration_date();
        void set_registration_date(IODEFV2iodefv2_time *registration_date);
        IODEFV2iodefv2_time *new_registration_date();





        iodefv2_domain_contacts_t *get_domain_contacts();
        void set_domain_contacts(iodefv2_domain_contacts_t *domain_contacts);
        iodefv2_domain_contacts_t *new_domain_contacts();





        IODEFV2iodefv2_time *get_date_domain_was_checked();
        void set_date_domain_was_checked(IODEFV2iodefv2_time *date_domain_was_checked);
        IODEFV2iodefv2_time *new_date_domain_was_checked();





        IODEFV2iodefv2_time *get_expiration_date();
        void set_expiration_date(IODEFV2iodefv2_time *expiration_date);
        IODEFV2iodefv2_time *new_expiration_date();



};

        
    

class IODEFV2hash_data {
private:

        IODEFV2hash * hash;

        IODEFV2fuzzy_hash * fuzzy_hash;
    protected:
        iodefv2_hash_data_t *_priv;
        iodefv2_hash_data_t *_priv;

    public:

    
        IODEFV2hash_data();
        IODEFV2hash_data(iodefv2_hash_data_t *ptr);
        IODEFV2hash_data *copy(IODEFV2hash_data *dst);
        IODEFV2hash_data *clone();
        int compare(IODEFV2hash_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_scope();

        iodefv2_hash_data_scope_t *get_scope();
        void set_scope(iodefv2_hash_data_scope_t scope);
        iodefv2_hash_data_scope_t *new_scope();





        std::string *get_ext_scope();
        void set_ext_scope(std::string *ext_scope);
        std::string *new_ext_scope();





        std::string *get_hash_target_id();
        void set_hash_target_id(std::string *hash_target_id);
        std::string *new_hash_target_id();





        iodefv2_hash_t *get_hash();
        void set_hash(iodefv2_hash_t *hash);
        iodefv2_hash_t *new_hash();





        iodefv2_fuzzy_hash_t *get_fuzzy_hash();
        void set_fuzzy_hash(iodefv2_fuzzy_hash_t *fuzzy_hash);
        iodefv2_fuzzy_hash_t *new_fuzzy_hash();



};

        
    

class IODEFV2bulk_observable_format {
private:

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2hash * hash;
    protected:
        iodefv2_bulk_observable_format_t *_priv;
        iodefv2_bulk_observable_format_t *_priv;

    public:

    
        IODEFV2bulk_observable_format();
        IODEFV2bulk_observable_format(iodefv2_bulk_observable_format_t *ptr);
        IODEFV2bulk_observable_format *copy(IODEFV2bulk_observable_format *dst);
        IODEFV2bulk_observable_format *clone();
        int compare(IODEFV2bulk_observable_format *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_hash_t *get_hash();
        void set_hash(iodefv2_hash_t *hash);
        iodefv2_hash_t *new_hash();



};

        
    

class IODEFV2history {
private:

        std::list<IODEFV2history_item *> history_item;
    protected:
        iodefv2_history_t *_priv;
        iodefv2_history_t *_priv;

    public:

    
        IODEFV2history();
        IODEFV2history(iodefv2_history_t *ptr);
        IODEFV2history *copy(IODEFV2history *dst);
        IODEFV2history *clone();
        int compare(IODEFV2history *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_history_restriction_t *get_restriction();
        void set_restriction(iodefv2_history_restriction_t restriction);
        iodefv2_history_restriction_t *new_restriction();





        std::list<IODEFV2history_item *> *get_history_item_list();
        void set_history_item(IODEFV2history_item *object, int pos);
        IODEFV2history_item *new_history_item(int pos);


};

        
    

class IODEFV2discovery {
private:

        std::list<IODEFV2detection_pattern *> detection_pattern;

        std::list<IODEFV2contact *> contact;
    protected:
        iodefv2_discovery_t *_priv;
        iodefv2_discovery_t *_priv;

    public:

    
        IODEFV2discovery();
        IODEFV2discovery(iodefv2_discovery_t *ptr);
        IODEFV2discovery *copy(IODEFV2discovery *dst);
        IODEFV2discovery *clone();
        int compare(IODEFV2discovery *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_source();

        iodefv2_discovery_source_t *get_source();
        void set_source(iodefv2_discovery_source_t source);
        iodefv2_discovery_source_t *new_source();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_ext_source();
        void set_ext_source(std::string *ext_source);
        std::string *new_ext_source();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();




        void unset_restriction();

        iodefv2_discovery_restriction_t *get_restriction();
        void set_restriction(iodefv2_discovery_restriction_t restriction);
        iodefv2_discovery_restriction_t *new_restriction();





        std::list<IODEFV2detection_pattern *> *get_detection_pattern_list();
        void set_detection_pattern(IODEFV2detection_pattern *object, int pos);
        IODEFV2detection_pattern *new_detection_pattern(int pos);




        std::list<IODEFV2contact *> *get_contact_list();
        void set_contact(IODEFV2contact *object, int pos);
        IODEFV2contact *new_contact(int pos);




        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();



};

        
    

class IODEFV2bulk_observable {
private:

        IODEFV2bulk_observable_format * bulk_observable_format;

        std::list<IODEFV2additional_data *> additional_data;
    protected:
        iodefv2_bulk_observable_t *_priv;
        iodefv2_bulk_observable_t *_priv;

    public:

    
        IODEFV2bulk_observable();
        IODEFV2bulk_observable(iodefv2_bulk_observable_t *ptr);
        IODEFV2bulk_observable *copy(IODEFV2bulk_observable *dst);
        IODEFV2bulk_observable *clone();
        int compare(IODEFV2bulk_observable *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_type();

        iodefv2_bulk_observable_type_t *get_type();
        void set_type(iodefv2_bulk_observable_type_t type);
        iodefv2_bulk_observable_type_t *new_type();





        std::string *get_ext_type();
        void set_ext_type(std::string *ext_type);
        std::string *new_ext_type();





        std::string *get_bulk_observable_list();
        void set_bulk_observable_list(std::string *bulk_observable_list);
        std::string *new_bulk_observable_list();





        iodefv2_bulk_observable_format_t *get_bulk_observable_format();
        void set_bulk_observable_format(iodefv2_bulk_observable_format_t *bulk_observable_format);
        iodefv2_bulk_observable_format_t *new_bulk_observable_format();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);


};

        
    

class IODEFV2email_data {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2signature_data *> signature_data;

        std::list<IODEFV2hash_data *> hash_data;

        IODEFV2application_header * application_header;
    protected:
        iodefv2_email_data_t *_priv;
        iodefv2_email_data_t *_priv;

    public:

    
        IODEFV2email_data();
        IODEFV2email_data(iodefv2_email_data_t *ptr);
        IODEFV2email_data *copy(IODEFV2email_data *dst);
        IODEFV2email_data *clone();
        int compare(IODEFV2email_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_email_headers();
        void set_email_headers(std::string *email_headers);
        std::string *new_email_headers();





        std::list<IODEFV2signature_data *> *get_signature_data_list();
        void set_signature_data(IODEFV2signature_data *object, int pos);
        IODEFV2signature_data *new_signature_data(int pos);




        std::string *get_email_subject();
        void set_email_subject(std::string *email_subject);
        std::string *new_email_subject();





        std::string *get_email_x_mailer();
        void set_email_x_mailer(std::string *email_x_mailer);
        std::string *new_email_x_mailer();





        std::list<IODEFV2hash_data *> *get_hash_data_list();
        void set_hash_data(IODEFV2hash_data *object, int pos);
        IODEFV2hash_data *new_hash_data(int pos);




        std::string *get_email_from();
        void set_email_from(std::string *email_from);
        std::string *new_email_from();





        iodefv2_application_header_t *get_application_header();
        void set_application_header(iodefv2_application_header_t *application_header);
        iodefv2_application_header_t *new_application_header();





        std::string *get_email_body();
        void set_email_body(std::string *email_body);
        std::string *new_email_body();





        std::string *get_email_message();
        void set_email_message(std::string *email_message);
        std::string *new_email_message();





        std::string *get_email_to();
        void set_email_to(std::string *email_to);
        std::string *new_email_to();



};

        
    

class IODEFV2file {
private:

        IODEFV2hash_data * hash_data;

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2signature_data * signature_data;

        IODEFV2software * software;
    protected:
        iodefv2_file_t *_priv;
        iodefv2_file_t *_priv;

    public:

    
        IODEFV2file();
        IODEFV2file(iodefv2_file_t *ptr);
        IODEFV2file *copy(IODEFV2file *dst);
        IODEFV2file *clone();
        int compare(IODEFV2file *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        iodefv2_hash_data_t *get_hash_data();
        void set_hash_data(iodefv2_hash_data_t *hash_data);
        iodefv2_hash_data_t *new_hash_data();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_signature_data_t *get_signature_data();
        void set_signature_data(iodefv2_signature_data_t *signature_data);
        iodefv2_signature_data_t *new_signature_data();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        iodefv2_software_t *get_software();
        void set_software(iodefv2_software_t *software);
        iodefv2_software_t *new_software();





        std::string *get_file_name();
        void set_file_name(std::string *file_name);
        std::string *new_file_name();



};

        
    

class IODEFV2node {
private:

        std::list<IODEFV2counter *> counter;

        std::list<IODEFV2domain_data *> domain_data;

        std::list<IODEFV2address *> address;
    protected:
        iodefv2_node_t *_priv;
        iodefv2_node_t *_priv;

    public:

    
        IODEFV2node();
        IODEFV2node(iodefv2_node_t *ptr);
        IODEFV2node *copy(IODEFV2node *dst);
        IODEFV2node *clone();
        int compare(IODEFV2node *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::string *get_postal_address();
        void set_postal_address(std::string *postal_address);
        std::string *new_postal_address();





        std::list<IODEFV2counter *> *get_counter_list();
        void set_counter(IODEFV2counter *object, int pos);
        IODEFV2counter *new_counter(int pos);




        std::string *get_location();
        void set_location(std::string *location);
        std::string *new_location();





        std::list<IODEFV2domain_data *> *get_domain_data_list();
        void set_domain_data(IODEFV2domain_data *object, int pos);
        IODEFV2domain_data *new_domain_data(int pos);




        std::list<IODEFV2address *> *get_address_list();
        void set_address(IODEFV2address *object, int pos);
        IODEFV2address *new_address(int pos);


};

        
    

class IODEFV2service {
private:

        IODEFV2service_name * service_name;

        IODEFV2application_header * application_header;

        IODEFV2email_data * email_data;

        std::list<IODEFV2software *> software;
    protected:
        iodefv2_service_t *_priv;
        iodefv2_service_t *_priv;

    public:

    
        IODEFV2service();
        IODEFV2service(iodefv2_service_t *ptr);
        IODEFV2service *copy(IODEFV2service *dst);
        IODEFV2service *clone();
        int compare(IODEFV2service *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        uint32_t get_ip_protocol();
        void set_ip_protocol(uint32_t ip_protocol);
        uint32_t *new_ip_protocol();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();




        void unset_proto_code();

        uint32_t *get_proto_code();
        void set_proto_code(uint32_t proto_code);
        uint32_t *new_proto_code();





        std::string *get_portlist();
        void set_portlist(std::string *portlist);
        std::string *new_portlist();




        void unset_proto_field();

        uint32_t *get_proto_field();
        void set_proto_field(uint32_t proto_field);
        uint32_t *new_proto_field();





        iodefv2_service_name_t *get_service_name();
        void set_service_name(iodefv2_service_name_t *service_name);
        iodefv2_service_name_t *new_service_name();





        iodefv2_application_header_t *get_application_header();
        void set_application_header(iodefv2_application_header_t *application_header);
        iodefv2_application_header_t *new_application_header();





        iodefv2_email_data_t *get_email_data();
        void set_email_data(iodefv2_email_data_t *email_data);
        iodefv2_email_data_t *new_email_data();




        void unset_proto_type();

        uint32_t *get_proto_type();
        void set_proto_type(uint32_t proto_type);
        uint32_t *new_proto_type();




        void unset_port();

        uint32_t *get_port();
        void set_port(uint32_t port);
        uint32_t *new_port();





        std::list<IODEFV2software *> *get_software_list();
        void set_software(IODEFV2software *object, int pos);
        IODEFV2software *new_software(int pos);


};

        
    

class IODEFV2file_data {
private:

        std::list<IODEFV2file *> file;
    protected:
        iodefv2_file_data_t *_priv;
        iodefv2_file_data_t *_priv;

    public:

    
        IODEFV2file_data();
        IODEFV2file_data(iodefv2_file_data_t *ptr);
        IODEFV2file_data *copy(IODEFV2file_data *dst);
        IODEFV2file_data *clone();
        int compare(IODEFV2file_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_file_data_restriction_t *get_restriction();
        void set_restriction(iodefv2_file_data_restriction_t restriction);
        iodefv2_file_data_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2file *> *get_file_list();
        void set_file(IODEFV2file *object, int pos);
        IODEFV2file *new_file(int pos);


};

        
    

class IODEFV2system {
private:

        IODEFV2node * node;

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2service *> service;

        std::list<IODEFV2counter *> counter;

        std::list<IODEFV2node_role *> node_role;

        IODEFV2software * software;
    protected:
        iodefv2_system_t *_priv;
        iodefv2_system_t *_priv;

    public:

    
        IODEFV2system();
        IODEFV2system(iodefv2_system_t *ptr);
        IODEFV2system *copy(IODEFV2system *dst);
        IODEFV2system *clone();
        int compare(IODEFV2system *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_system_category_t get_category();
        void set_category(iodefv2_system_category_t category);
        iodefv2_system_category_t *new_category();




        void unset_restriction();

        iodefv2_system_restriction_t *get_restriction();
        void set_restriction(iodefv2_system_restriction_t restriction);
        iodefv2_system_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_ext_ownership();
        void set_ext_ownership(std::string *ext_ownership);
        std::string *new_ext_ownership();





        std::string *get_ext_category();
        void set_ext_category(std::string *ext_category);
        std::string *new_ext_category();




        void unset_spoofed();

        iodefv2_system_spoofed_t *get_spoofed();
        void set_spoofed(iodefv2_system_spoofed_t spoofed);
        iodefv2_system_spoofed_t *new_spoofed();




        void unset_virtual();

        iodefv2_system_virtual_t *get_virtual();
        void set_virtual(iodefv2_system_virtual_t virtual_sys);
        iodefv2_system_virtual_t *new_virtual();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();




        void unset_ownership();

        iodefv2_system_ownership_t *get_ownership();
        void set_ownership(iodefv2_system_ownership_t ownership);
        iodefv2_system_ownership_t *new_ownership();





        std::string *get_interface();
        void set_interface(std::string *interface);
        std::string *new_interface();





        iodefv2_node_t *get_node();
        void set_node(iodefv2_node_t *node);
        iodefv2_node_t *new_node();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IODEFV2service *> *get_service_list();
        void set_service(IODEFV2service *object, int pos);
        IODEFV2service *new_service(int pos);




        std::string *get_asset_id();
        void set_asset_id(std::string *asset_id);
        std::string *new_asset_id();





        std::list<IODEFV2counter *> *get_counter_list();
        void set_counter(IODEFV2counter *object, int pos);
        IODEFV2counter *new_counter(int pos);




        std::list<IODEFV2node_role *> *get_node_role_list();
        void set_node_role(IODEFV2node_role *object, int pos);
        IODEFV2node_role *new_node_role(int pos);




        iodefv2_software_t *get_software();
        void set_software(iodefv2_software_t *software);
        iodefv2_software_t *new_software();



};

        
    

class IODEFV2record_data {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2certificate_data *> certificate_data;

        std::list<IODEFV2record_pattern *> record_pattern;

        std::list<IODEFV2windows_registry_keys_modified *> windows_registry_keys_modified;

        std::list<IODEFV2file_data *> file_data;

        IODEFV2software * software;
    protected:
        iodefv2_record_data_t *_priv;
        iodefv2_record_data_t *_priv;

    public:

    
        IODEFV2record_data();
        IODEFV2record_data(iodefv2_record_data_t *ptr);
        IODEFV2record_data *copy(IODEFV2record_data *dst);
        IODEFV2record_data *clone();
        int compare(IODEFV2record_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_record_data_restriction_t *get_restriction();
        void set_restriction(iodefv2_record_data_restriction_t restriction);
        iodefv2_record_data_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::list<IODEFV2certificate_data *> *get_certificate_data_list();
        void set_certificate_data(IODEFV2certificate_data *object, int pos);
        IODEFV2certificate_data *new_certificate_data(int pos);




        std::list<IODEFV2record_pattern *> *get_record_pattern_list();
        void set_record_pattern(IODEFV2record_pattern *object, int pos);
        IODEFV2record_pattern *new_record_pattern(int pos);




        IODEFV2iodefv2_time *get_date_time();
        void set_date_time(IODEFV2iodefv2_time *date_time);
        IODEFV2iodefv2_time *new_date_time();





        std::list<IODEFV2windows_registry_keys_modified *> *get_windows_registry_keys_modified_list();
        void set_windows_registry_keys_modified(IODEFV2windows_registry_keys_modified *object, int pos);
        IODEFV2windows_registry_keys_modified *new_windows_registry_keys_modified(int pos);




        std::list<IODEFV2file_data *> *get_file_data_list();
        void set_file_data(IODEFV2file_data *object, int pos);
        IODEFV2file_data *new_file_data(int pos);




        iodefv2_software_t *get_software();
        void set_software(iodefv2_software_t *software);
        iodefv2_software_t *new_software();



};

        
    

class IODEFV2record {
private:

        std::list<IODEFV2record_data *> record_data;
    protected:
        iodefv2_record_t *_priv;
        iodefv2_record_t *_priv;

    public:

    
        IODEFV2record();
        IODEFV2record(iodefv2_record_t *ptr);
        IODEFV2record *copy(IODEFV2record *dst);
        IODEFV2record *clone();
        int compare(IODEFV2record *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_record_restriction_t *get_restriction();
        void set_restriction(iodefv2_record_restriction_t restriction);
        iodefv2_record_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::list<IODEFV2record_data *> *get_record_data_list();
        void set_record_data(IODEFV2record_data *object, int pos);
        IODEFV2record_data *new_record_data(int pos);


};

        
    

class IODEFV2flow {
private:

        std::list<IODEFV2system *> system;
    protected:
        iodefv2_flow_t *_priv;
        iodefv2_flow_t *_priv;

    public:

    
        IODEFV2flow();
        IODEFV2flow(iodefv2_flow_t *ptr);
        IODEFV2flow *copy(IODEFV2flow *dst);
        IODEFV2flow *clone();
        int compare(IODEFV2flow *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2system *> *get_system_list();
        void set_system(IODEFV2system *object, int pos);
        IODEFV2system *new_system(int pos);


};

        
    

class IODEFV2event_data {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2flow *> flow;

        std::list<IODEFV2expectation *> expectation;

        IODEFV2record * record;

        std::list<IODEFV2contact *> contact;

        IODEFV2assessment * assessment;

        std::list<IODEFV2method *> method;

        std::list<IODEFV2discovery *> discovery;
    protected:
        iodefv2_event_data_t *_priv;
        iodefv2_event_data_t *_priv;

    public:

    
        IODEFV2event_data();
        IODEFV2event_data(iodefv2_event_data_t *ptr);
        IODEFV2event_data *copy(IODEFV2event_data *dst);
        IODEFV2event_data *clone();
        int compare(IODEFV2event_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_event_data_restriction_t *get_restriction();
        void set_restriction(iodefv2_event_data_restriction_t restriction);
        iodefv2_event_data_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        IODEFV2iodefv2_time *get_detect_time();
        void set_detect_time(IODEFV2iodefv2_time *detect_time);
        IODEFV2iodefv2_time *new_detect_time();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        IODEFV2iodefv2_time *get_report_time();
        void set_report_time(IODEFV2iodefv2_time *report_time);
        IODEFV2iodefv2_time *new_report_time();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IODEFV2flow *> *get_flow_list();
        void set_flow(IODEFV2flow *object, int pos);
        IODEFV2flow *new_flow(int pos);




        std::list<IODEFV2expectation *> *get_expectation_list();
        void set_expectation(IODEFV2expectation *object, int pos);
        IODEFV2expectation *new_expectation(int pos);




        iodefv2_record_t *get_record();
        void set_record(iodefv2_record_t *record);
        iodefv2_record_t *new_record();





        std::list<IODEFV2contact *> *get_contact_list();
        void set_contact(IODEFV2contact *object, int pos);
        IODEFV2contact *new_contact(int pos);




        IODEFV2iodefv2_time *get_start_time();
        void set_start_time(IODEFV2iodefv2_time *start_time);
        IODEFV2iodefv2_time *new_start_time();





        IODEFV2iodefv2_time *get_end_time();
        void set_end_time(IODEFV2iodefv2_time *end_time);
        IODEFV2iodefv2_time *new_end_time();





        iodefv2_assessment_t *get_assessment();
        void set_assessment(iodefv2_assessment_t *assessment);
        iodefv2_assessment_t *new_assessment();





        std::list<IODEFV2method *> *get_method_list();
        void set_method(IODEFV2method *object, int pos);
        IODEFV2method *new_method(int pos);




        IODEFV2iodefv2_time *get_recovery_time();
        void set_recovery_time(IODEFV2iodefv2_time *recovery_time);
        IODEFV2iodefv2_time *new_recovery_time();





        std::list<IODEFV2discovery *> *get_discovery_list();
        void set_discovery(IODEFV2discovery *object, int pos);
        IODEFV2discovery *new_discovery(int pos);


};

        
    

class IODEFV2observable {
private:

        IODEFV2detection_pattern * detection_pattern;

        IODEFV2service * service;

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2system * system;

        IODEFV2domain_data * domain_data;

        IODEFV2email_data * email_data;

        IODEFV2assessment * assessment;

        IODEFV2record_data * record_data;

        IODEFV2reference * reference;

        IODEFV2history_item * history_item;

        IODEFV2bulk_observable * bulk_observable;

        IODEFV2certificate_data * certificate_data;

        IODEFV2expectation * expectation;

        IODEFV2windows_registry_keys_modified * windows_registry_keys_modified;

        IODEFV2address * address;

        IODEFV2event_data * event_data;

        IODEFV2file_data * file_data;

        IODEFV2registry_handle * registry_handle;
    protected:
        iodefv2_observable_t *_priv;
        iodefv2_observable_t *_priv;

    public:

    
        IODEFV2observable();
        IODEFV2observable(iodefv2_observable_t *ptr);
        IODEFV2observable *copy(IODEFV2observable *dst);
        IODEFV2observable *clone();
        int compare(IODEFV2observable *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_observable_restriction_t *get_restriction();
        void set_restriction(iodefv2_observable_restriction_t restriction);
        iodefv2_observable_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        iodefv2_detection_pattern_t *get_detection_pattern();
        void set_detection_pattern(iodefv2_detection_pattern_t *detection_pattern);
        iodefv2_detection_pattern_t *new_detection_pattern();





        iodefv2_service_t *get_service();
        void set_service(iodefv2_service_t *service);
        iodefv2_service_t *new_service();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_system_t *get_system();
        void set_system(iodefv2_system_t *system);
        iodefv2_system_t *new_system();





        iodefv2_domain_data_t *get_domain_data();
        void set_domain_data(iodefv2_domain_data_t *domain_data);
        iodefv2_domain_data_t *new_domain_data();





        iodefv2_email_data_t *get_email_data();
        void set_email_data(iodefv2_email_data_t *email_data);
        iodefv2_email_data_t *new_email_data();





        iodefv2_assessment_t *get_assessment();
        void set_assessment(iodefv2_assessment_t *assessment);
        iodefv2_assessment_t *new_assessment();





        iodefv2_record_data_t *get_record_data();
        void set_record_data(iodefv2_record_data_t *record_data);
        iodefv2_record_data_t *new_record_data();





        iodefv2_reference_t *get_reference();
        void set_reference(iodefv2_reference_t *reference);
        iodefv2_reference_t *new_reference();





        iodefv2_history_item_t *get_history_item();
        void set_history_item(iodefv2_history_item_t *history_item);
        iodefv2_history_item_t *new_history_item();





        iodefv2_bulk_observable_t *get_bulk_observable();
        void set_bulk_observable(iodefv2_bulk_observable_t *bulk_observable);
        iodefv2_bulk_observable_t *new_bulk_observable();





        iodefv2_certificate_data_t *get_certificate_data();
        void set_certificate_data(iodefv2_certificate_data_t *certificate_data);
        iodefv2_certificate_data_t *new_certificate_data();





        iodefv2_expectation_t *get_expectation();
        void set_expectation(iodefv2_expectation_t *expectation);
        iodefv2_expectation_t *new_expectation();





        iodefv2_windows_registry_keys_modified_t *get_windows_registry_keys_modified();
        void set_windows_registry_keys_modified(iodefv2_windows_registry_keys_modified_t *windows_registry_keys_modified);
        iodefv2_windows_registry_keys_modified_t *new_windows_registry_keys_modified();





        iodefv2_address_t *get_address();
        void set_address(iodefv2_address_t *address);
        iodefv2_address_t *new_address();





        iodefv2_event_data_t *get_event_data();
        void set_event_data(iodefv2_event_data_t *event_data);
        iodefv2_event_data_t *new_event_data();





        iodefv2_file_data_t *get_file_data();
        void set_file_data(iodefv2_file_data_t *file_data);
        iodefv2_file_data_t *new_file_data();





        iodefv2_registry_handle_t *get_registry_handle();
        void set_registry_handle(iodefv2_registry_handle_t *registry_handle);
        iodefv2_registry_handle_t *new_registry_handle();



};

        
    

class IODEFV2indicator_expression {
private:

        std::list<IODEFV2indicator_reference *> indicator_reference;

        std::list<IODEFV2observable *> observable;

        IODEFV2confidence * confidence;

        std::list<IODEFV2indicator_expression *> indicator_expression;

        std::list<IODEFV2additional_data *> additional_data;
    protected:
        iodefv2_indicator_expression_t *_priv;
        iodefv2_indicator_expression_t *_priv;

    public:

    
        IODEFV2indicator_expression();
        IODEFV2indicator_expression(iodefv2_indicator_expression_t *ptr);
        IODEFV2indicator_expression *copy(IODEFV2indicator_expression *dst);
        IODEFV2indicator_expression *clone();
        int compare(IODEFV2indicator_expression *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_operator();

        iodefv2_indicator_expression_operator_t *get_operator();
        void set_operator(iodefv2_indicator_expression_operator_t operator_indic);
        iodefv2_indicator_expression_operator_t *new_operator();





        std::string *get_ext_operator();
        void set_ext_operator(std::string *ext_operator);
        std::string *new_ext_operator();





        std::list<IODEFV2indicator_reference *> *get_indicator_reference_list();
        void set_indicator_reference(IODEFV2indicator_reference *object, int pos);
        IODEFV2indicator_reference *new_indicator_reference(int pos);




        std::list<IODEFV2observable *> *get_observable_list();
        void set_observable(IODEFV2observable *object, int pos);
        IODEFV2observable *new_observable(int pos);




        iodefv2_confidence_t *get_confidence();
        void set_confidence(iodefv2_confidence_t *confidence);
        iodefv2_confidence_t *new_confidence();





        std::list<IODEFV2indicator_expression *> *get_indicator_expression_list();
        void set_indicator_expression(IODEFV2indicator_expression *object, int pos);
        IODEFV2indicator_expression *new_indicator_expression(int pos);




        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);


};

        
    

class IODEFV2indicator {
private:

        std::list<IODEFV2alternative_indicator_id *> alternative_indicator_id;

        IODEFV2confidence * confidence;

        std::list<IODEFV2reference *> reference;

        IODEFV2observable * observable;

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2indicator_expression * indicator_expression;

        std::list<IODEFV2contact *> contact;

        std::list<IODEFV2node_role *> node_role;

        IODEFV2indicator_id * indicator_id;

        IODEFV2indicator_reference * indicator_reference;

        IODEFV2observable_reference * observable_reference;

        std::list<IODEFV2attack_phase *> attack_phase;
    protected:
        iodefv2_indicator_t *_priv;
        iodefv2_indicator_t *_priv;

    public:

    
        IODEFV2indicator();
        IODEFV2indicator(iodefv2_indicator_t *ptr);
        IODEFV2indicator *copy(IODEFV2indicator *dst);
        IODEFV2indicator *clone();
        int compare(IODEFV2indicator *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    


        void unset_restriction();

        iodefv2_indicator_restriction_t *get_restriction();
        void set_restriction(iodefv2_indicator_restriction_t restriction);
        iodefv2_indicator_restriction_t *new_restriction();





        std::string *get_ext_restriction();
        void set_ext_restriction(std::string *ext_restriction);
        std::string *new_ext_restriction();





        std::list<IODEFV2alternative_indicator_id *> *get_alternative_indicator_id_list();
        void set_alternative_indicator_id(IODEFV2alternative_indicator_id *object, int pos);
        IODEFV2alternative_indicator_id *new_alternative_indicator_id(int pos);




        iodefv2_confidence_t *get_confidence();
        void set_confidence(iodefv2_confidence_t *confidence);
        iodefv2_confidence_t *new_confidence();





        std::list<IODEFV2reference *> *get_reference_list();
        void set_reference(IODEFV2reference *object, int pos);
        IODEFV2reference *new_reference(int pos);




        iodefv2_observable_t *get_observable();
        void set_observable(iodefv2_observable_t *observable);
        iodefv2_observable_t *new_observable();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_indicator_expression_t *get_indicator_expression();
        void set_indicator_expression(iodefv2_indicator_expression_t *indicator_expression);
        iodefv2_indicator_expression_t *new_indicator_expression();





        std::list<IODEFV2contact *> *get_contact_list();
        void set_contact(IODEFV2contact *object, int pos);
        IODEFV2contact *new_contact(int pos);




        std::list<IODEFV2node_role *> *get_node_role_list();
        void set_node_role(IODEFV2node_role *object, int pos);
        IODEFV2node_role *new_node_role(int pos);




        IODEFV2iodefv2_time *get_start_time();
        void set_start_time(IODEFV2iodefv2_time *start_time);
        IODEFV2iodefv2_time *new_start_time();





        iodefv2_indicator_id_t *get_indicator_id();
        void set_indicator_id(iodefv2_indicator_id_t *indicator_id);
        iodefv2_indicator_id_t *new_indicator_id();





        iodefv2_indicator_reference_t *get_indicator_reference();
        void set_indicator_reference(iodefv2_indicator_reference_t *indicator_reference);
        iodefv2_indicator_reference_t *new_indicator_reference();





        iodefv2_observable_reference_t *get_observable_reference();
        void set_observable_reference(iodefv2_observable_reference_t *observable_reference);
        iodefv2_observable_reference_t *new_observable_reference();





        std::list<IODEFV2attack_phase *> *get_attack_phase_list();
        void set_attack_phase(IODEFV2attack_phase *object, int pos);
        IODEFV2attack_phase *new_attack_phase(int pos);




        IODEFV2iodefv2_time *get_end_time();
        void set_end_time(IODEFV2iodefv2_time *end_time);
        IODEFV2iodefv2_time *new_end_time();



};

        
    

class IODEFV2indicator_data {
private:

        std::list<IODEFV2indicator *> indicator;
    protected:
        iodefv2_indicator_data_t *_priv;
        iodefv2_indicator_data_t *_priv;

    public:

    
        IODEFV2indicator_data();
        IODEFV2indicator_data(iodefv2_indicator_data_t *ptr);
        IODEFV2indicator_data *copy(IODEFV2indicator_data *dst);
        IODEFV2indicator_data *clone();
        int compare(IODEFV2indicator_data *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        std::list<IODEFV2indicator *> *get_indicator_list();
        void set_indicator(IODEFV2indicator *object, int pos);
        IODEFV2indicator *new_indicator(int pos);


};

        
    

class IODEFV2incident {
private:

        std::list<IODEFV2additional_data *> additional_data;

        IODEFV2history * history;

        IODEFV2alternative_id * alternative_id;

        std::list<IODEFV2contact *> contact;

        IODEFV2related_activity * related_activity;

        std::list<IODEFV2assessment *> assessment;

        std::list<IODEFV2method *> method;

        std::list<IODEFV2discovery *> discovery;

        IODEFV2indicator_data * indicator_data;

        std::list<IODEFV2event_data *> event_data;

        IODEFV2incident_id * incident_id;
    protected:
        iodefv2_incident_t *_priv;
        iodefv2_incident_t *_priv;

    public:

    
        IODEFV2incident();
        IODEFV2incident(iodefv2_incident_t *ptr);
        IODEFV2incident *copy(IODEFV2incident *dst);
        IODEFV2incident *clone();
        int compare(IODEFV2incident *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_incident_status_t get_status();
        void set_status(iodefv2_incident_status_t status);
        iodefv2_incident_status_t *new_status();




        void unset_lang();

        iodefv2_incident_lang_t *get_lang();
        void set_lang(iodefv2_incident_lang_t lang);
        iodefv2_incident_lang_t *new_lang();





        std::string *get_ext_purpose();
        void set_ext_purpose(std::string *ext_purpose);
        std::string *new_ext_purpose();





        iodefv2_incident_purpose_t get_purpose();
        void set_purpose(iodefv2_incident_purpose_t purpose);
        iodefv2_incident_purpose_t *new_purpose();





        std::string *get_ext_status();
        void set_ext_status(std::string *ext_status);
        std::string *new_ext_status();




        void unset_restriction();

        iodefv2_incident_restriction_t *get_restriction();
        void set_restriction(iodefv2_incident_restriction_t restriction);
        iodefv2_incident_restriction_t *new_restriction();





        std::string *get_observable_id();
        void set_observable_id(std::string *observable_id);
        std::string *new_observable_id();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        iodefv2_history_t *get_history();
        void set_history(iodefv2_history_t *history);
        iodefv2_history_t *new_history();





        IODEFV2iodefv2_time *get_start_time();
        void set_start_time(IODEFV2iodefv2_time *start_time);
        IODEFV2iodefv2_time *new_start_time();





        iodefv2_alternative_id_t *get_alternative_id();
        void set_alternative_id(iodefv2_alternative_id_t *alternative_id);
        iodefv2_alternative_id_t *new_alternative_id();





        std::list<IODEFV2contact *> *get_contact_list();
        void set_contact(IODEFV2contact *object, int pos);
        IODEFV2contact *new_contact(int pos);




        iodefv2_related_activity_t *get_related_activity();
        void set_related_activity(iodefv2_related_activity_t *related_activity);
        iodefv2_related_activity_t *new_related_activity();





        IODEFV2iodefv2_time *get_end_time();
        void set_end_time(IODEFV2iodefv2_time *end_time);
        IODEFV2iodefv2_time *new_end_time();





        IODEFV2iodefv2_time *get_generation_time();
        void set_generation_time(IODEFV2iodefv2_time *generation_time);
        IODEFV2iodefv2_time *new_generation_time();





        std::list<IODEFV2assessment *> *get_assessment_list();
        void set_assessment(IODEFV2assessment *object, int pos);
        IODEFV2assessment *new_assessment(int pos);




        std::list<IODEFV2method *> *get_method_list();
        void set_method(IODEFV2method *object, int pos);
        IODEFV2method *new_method(int pos);




        IODEFV2iodefv2_time *get_recovery_time();
        void set_recovery_time(IODEFV2iodefv2_time *recovery_time);
        IODEFV2iodefv2_time *new_recovery_time();





        std::list<IODEFV2discovery *> *get_discovery_list();
        void set_discovery(IODEFV2discovery *object, int pos);
        IODEFV2discovery *new_discovery(int pos);




        IODEFV2iodefv2_time *get_detect_time();
        void set_detect_time(IODEFV2iodefv2_time *detect_time);
        IODEFV2iodefv2_time *new_detect_time();





        IODEFV2iodefv2_time *get_report_time();
        void set_report_time(IODEFV2iodefv2_time *report_time);
        IODEFV2iodefv2_time *new_report_time();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        iodefv2_indicator_data_t *get_indicator_data();
        void set_indicator_data(iodefv2_indicator_data_t *indicator_data);
        iodefv2_indicator_data_t *new_indicator_data();





        std::list<IODEFV2event_data *> *get_event_data_list();
        void set_event_data(IODEFV2event_data *object, int pos);
        IODEFV2event_data *new_event_data(int pos);




        iodefv2_incident_id_t *get_incident_id();
        void set_incident_id(iodefv2_incident_id_t *incident_id);
        iodefv2_incident_id_t *new_incident_id();



};

        
    

class IODEFV2document {
private:

        std::list<IODEFV2additional_data *> additional_data;

        std::list<IODEFV2incident *> incident;
    protected:
        iodefv2_document_t *_priv;
        iodefv2_document_t *_priv;

    public:

    
        IODEFV2document();
        IODEFV2document(iodefv2_document_t *ptr);
        IODEFV2document *copy(IODEFV2document *dst);
        IODEFV2document *clone();
        int compare(IODEFV2document *obj1);

    
        ~{IODEFV2$struct.short_type_name}();\n");

    



        iodefv2_document_lang_t get_lang();
        void set_lang(iodefv2_document_lang_t lang);
        iodefv2_document_lang_t *new_lang();





        std::string *get_formatid();
        void set_formatid(std::string *formatid);
        std::string *new_formatid();





        std::string *get_version();
        void set_version(std::string *version);
        std::string *new_version();





        std::string *get_private_enum_name();
        void set_private_enum_name(std::string *private_enum_name);
        std::string *new_private_enum_name();





        std::string *get_private_enum_id();
        void set_private_enum_id(std::string *private_enum_id);
        std::string *new_private_enum_id();





        std::list<IODEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IODEFV2additional_data *object, int pos);
        IODEFV2additional_data *new_additional_data(int pos);




        std::list<IODEFV2incident *> *get_incident_list();
        void set_incident(IODEFV2incident *object, int pos);
        IODEFV2incident *new_incident(int pos);


};


#define IODEFV2_CLASS_ID_TELEPHONE_TYPE 2
#define IODEFV2_CLASS_ID_TELEPHONE 3
#define IODEFV2_CLASS_ID_CERTIFICATE 4
#define IODEFV2_CLASS_ID_KEY_REGISTRYACTION 5
#define IODEFV2_CLASS_ID_KEY 6
#define IODEFV2_CLASS_ID_OBSERVABLE_REFERENCE 7
#define IODEFV2_CLASS_ID_REGISTRY_HANDLE_REGISTRY 11
#define IODEFV2_CLASS_ID_REGISTRY_HANDLE 12
#define IODEFV2_CLASS_ID_TIME_IMPACT_DURATION 13
#define IODEFV2_CLASS_ID_TIME_IMPACT_METRIC 14
#define IODEFV2_CLASS_ID_TIME_IMPACT_SEVERITY 15
#define IODEFV2_CLASS_ID_TIME_IMPACT 16
#define IODEFV2_CLASS_ID_RECORD_PATTERN_OFFSETUNIT 17
#define IODEFV2_CLASS_ID_RECORD_PATTERN_TYPE 18
#define IODEFV2_CLASS_ID_RECORD_PATTERN 19
#define IODEFV2_CLASS_ID_REFERENCE 20
#define IODEFV2_CLASS_ID_POSTAL_ADDRESS_TYPE 21
#define IODEFV2_CLASS_ID_POSTAL_ADDRESS 22
#define IODEFV2_CLASS_ID_NODE_ROLE_CATEGORY 23
#define IODEFV2_CLASS_ID_NODE_ROLE 24
#define IODEFV2_CLASS_ID_INCIDENT_ID_RESTRICTION 25
#define IODEFV2_CLASS_ID_INCIDENT_ID 26
#define IODEFV2_CLASS_ID_ALTERNATIVE_INDICATOR_ID_RESTRICTION 27
#define IODEFV2_CLASS_ID_ALTERNATIVE_INDICATOR_ID 28
#define IODEFV2_CLASS_ID_CONFIDENCE_RATING 29
#define IODEFV2_CLASS_ID_CONFIDENCE 30
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT_COMPLETION 31
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT_TYPE 32
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT_SEVERITY 33
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT 34
#define IODEFV2_CLASS_ID_SOFTWARE_REFERENCE_DTYPE 35
#define IODEFV2_CLASS_ID_SOFTWARE_REFERENCE 36
#define IODEFV2_CLASS_ID_BUSINESS_IMPACT_TYPE 37
#define IODEFV2_CLASS_ID_BUSINESS_IMPACT_SEVERITY 38
#define IODEFV2_CLASS_ID_BUSINESS_IMPACT 39
#define IODEFV2_CLASS_ID_INDICATOR_REFERENCE 40
#define IODEFV2_CLASS_ID_EMAIL_TYPE 41
#define IODEFV2_CLASS_ID_EMAIL 42
#define IODEFV2_CLASS_ID_INTENDED_IMPACT_TYPE 43
#define IODEFV2_CLASS_ID_INTENDED_IMPACT_SEVERITY 44
#define IODEFV2_CLASS_ID_INTENDED_IMPACT 45
#define IODEFV2_CLASS_ID_ADDITIONAL_DATA_RESTRICTION 46
#define IODEFV2_CLASS_ID_ADDITIONAL_DATA_TYPE 47
#define IODEFV2_CLASS_ID_ADDITIONAL_DATA 48
#define IODEFV2_CLASS_ID_COUNTER_UNIT 49
#define IODEFV2_CLASS_ID_COUNTER_DURATION 50
#define IODEFV2_CLASS_ID_COUNTER_TYPE 51
#define IODEFV2_CLASS_ID_COUNTER 52
#define IODEFV2_CLASS_ID_MONETARY_IMPACT_SEVERITY 53
#define IODEFV2_CLASS_ID_MONETARY_IMPACT 54
#define IODEFV2_CLASS_ID_SERVICE_NAME 55
#define IODEFV2_CLASS_ID_INDICATOR_ID 56
#define IODEFV2_CLASS_ID_SIGNATURE_DATA 57
#define IODEFV2_CLASS_ID_ADDRESS_CATEGORY 58
#define IODEFV2_CLASS_ID_ADDRESS 59
#define IODEFV2_CLASS_ID_APPLICATION_HEADER 60
#define IODEFV2_CLASS_ID_CERTIFICATE_DATA_RESTRICTION 61
#define IODEFV2_CLASS_ID_CERTIFICATE_DATA 62
#define IODEFV2_CLASS_ID_THREAT_ACTOR_RESTRICTION 63
#define IODEFV2_CLASS_ID_THREAT_ACTOR 64
#define IODEFV2_CLASS_ID_METHOD_RESTRICTION 65
#define IODEFV2_CLASS_ID_METHOD 66
#define IODEFV2_CLASS_ID_ALTERNATIVE_ID_RESTRICTION 67
#define IODEFV2_CLASS_ID_ALTERNATIVE_ID 68
#define IODEFV2_CLASS_ID_SOFTWARE 69
#define IODEFV2_CLASS_ID_NAMESERVERS 70
#define IODEFV2_CLASS_ID_WINDOWS_REGISTRY_KEYS_MODIFIED 71
#define IODEFV2_CLASS_ID_CAMPAIGN_RESTRICTION 72
#define IODEFV2_CLASS_ID_CAMPAIGN 73
#define IODEFV2_CLASS_ID_ASSESSMENT_RESTRICTION 74
#define IODEFV2_CLASS_ID_ASSESSMENT_OCCURRENCE 75
#define IODEFV2_CLASS_ID_ASSESSMENT 76
#define IODEFV2_CLASS_ID_ATTACK_PHASE 77
#define IODEFV2_CLASS_ID_CONTACT_RESTRICTION 78
#define IODEFV2_CLASS_ID_CONTACT_ROLE 79
#define IODEFV2_CLASS_ID_CONTACT_TYPE 80
#define IODEFV2_CLASS_ID_CONTACT 81
#define IODEFV2_CLASS_ID_RELATED_ACTIVITY_RESTRICTION 82
#define IODEFV2_CLASS_ID_RELATED_ACTIVITY 83
#define IODEFV2_CLASS_ID_DOMAIN_CONTACTS 84
#define IODEFV2_CLASS_ID_HISTORY_ITEM_ACTION 85
#define IODEFV2_CLASS_ID_HISTORY_ITEM_RESTRICTION 86
#define IODEFV2_CLASS_ID_HISTORY_ITEM 87
#define IODEFV2_CLASS_ID_FUZZY_HASH 88
#define IODEFV2_CLASS_ID_HASH 89
#define IODEFV2_CLASS_ID_DETECTION_PATTERN_RESTRICTION 90
#define IODEFV2_CLASS_ID_DETECTION_PATTERN 91
#define IODEFV2_CLASS_ID_EXPECTATION_RESTRICTION 92
#define IODEFV2_CLASS_ID_EXPECTATION_SEVERITY 93
#define IODEFV2_CLASS_ID_EXPECTATION_ACTION 94
#define IODEFV2_CLASS_ID_EXPECTATION 95
#define IODEFV2_CLASS_ID_DOMAIN_DATA_DOMAIN_STATUS 96
#define IODEFV2_CLASS_ID_DOMAIN_DATA_SYSTEM_STATUS 97
#define IODEFV2_CLASS_ID_DOMAIN_DATA 98
#define IODEFV2_CLASS_ID_HASH_DATA_SCOPE 99
#define IODEFV2_CLASS_ID_HASH_DATA 100
#define IODEFV2_CLASS_ID_BULK_OBSERVABLE_FORMAT 101
#define IODEFV2_CLASS_ID_HISTORY_RESTRICTION 102
#define IODEFV2_CLASS_ID_HISTORY 103
#define IODEFV2_CLASS_ID_DISCOVERY_SOURCE 104
#define IODEFV2_CLASS_ID_DISCOVERY_RESTRICTION 105
#define IODEFV2_CLASS_ID_DISCOVERY 106
#define IODEFV2_CLASS_ID_BULK_OBSERVABLE_TYPE 107
#define IODEFV2_CLASS_ID_BULK_OBSERVABLE 108
#define IODEFV2_CLASS_ID_EMAIL_DATA 109
#define IODEFV2_CLASS_ID_FILE 110
#define IODEFV2_CLASS_ID_NODE 111
#define IODEFV2_CLASS_ID_SERVICE 112
#define IODEFV2_CLASS_ID_FILE_DATA_RESTRICTION 113
#define IODEFV2_CLASS_ID_FILE_DATA 114
#define IODEFV2_CLASS_ID_SYSTEM_CATEGORY 115
#define IODEFV2_CLASS_ID_SYSTEM_RESTRICTION 116
#define IODEFV2_CLASS_ID_SYSTEM_SPOOFED 117
#define IODEFV2_CLASS_ID_SYSTEM_VIRTUAL 118
#define IODEFV2_CLASS_ID_SYSTEM_OWNERSHIP 119
#define IODEFV2_CLASS_ID_SYSTEM 120
#define IODEFV2_CLASS_ID_RECORD_DATA_RESTRICTION 121
#define IODEFV2_CLASS_ID_RECORD_DATA 122
#define IODEFV2_CLASS_ID_RECORD_RESTRICTION 123
#define IODEFV2_CLASS_ID_RECORD 124
#define IODEFV2_CLASS_ID_FLOW 125
#define IODEFV2_CLASS_ID_EVENT_DATA_RESTRICTION 126
#define IODEFV2_CLASS_ID_EVENT_DATA 127
#define IODEFV2_CLASS_ID_OBSERVABLE_RESTRICTION 128
#define IODEFV2_CLASS_ID_OBSERVABLE 129
#define IODEFV2_CLASS_ID_INDICATOR_EXPRESSION_OPERATOR 130
#define IODEFV2_CLASS_ID_INDICATOR_EXPRESSION 131
#define IODEFV2_CLASS_ID_INDICATOR_RESTRICTION 132
#define IODEFV2_CLASS_ID_INDICATOR 133
#define IODEFV2_CLASS_ID_INDICATOR_DATA 134
#define IODEFV2_CLASS_ID_INCIDENT_STATUS 135
#define IODEFV2_CLASS_ID_INCIDENT_LANG 136
#define IODEFV2_CLASS_ID_INCIDENT_PURPOSE 137
#define IODEFV2_CLASS_ID_INCIDENT_RESTRICTION 138
#define IODEFV2_CLASS_ID_INCIDENT 139
#define IODEFV2_CLASS_ID_DOCUMENT_LANG 140
#define IODEFV2_CLASS_ID_DOCUMENT 141
#endif /*_LIBIODEFV2_IODEFV2_TREE_WRAP */


