



















/*****
*
* Copyright (C) 2001-2016 CS-SI. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@prelude-ids.com>
* Author: Nicolas Delon <nicolas.delon@prelude-ids.com>
*
* This file is part of the Libiodefv2 library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*
*****/

/*
 * This file was automatically generated by our generator, version 1
 *
 * Do not make changes to this file unless you know what you are doing.
 * modify the template interface file instead.
 * IODEFV2 version : RFC5070-bis-26
 * Template file: generate-tree-wrap.h.mako
 *
 */

#ifndef _LIBIODEFV2_IODEFV2_TREE_WRAP_H
#define _LIBIODEFV2_IODEFV2_TREE_WRAP_H

#include <limits.h>
#include "iodefv2-class.h"
#include "iodefv2-value.h"
#include "libiodefv2-inttypes.h"
#include "libiodefv2-string.h"

#ifdef __cplusplus
  extern "C" {
#endif

#ifdef WIN32
# undef interface
#endif

#define IODEFV2_LIST_APPEND  INT_MAX
#define IODEFV2_LIST_PREPEND (INT_MAX - 1)

        
typedef enum {
        IODEFV2_TELEPHONE_TYPE_ERROR = -1,
        IODEFV2_TELEPHONE_TYPE_WIRED = 1,
        IODEFV2_TELEPHONE_TYPE_MOBILE = 2,
        IODEFV2_TELEPHONE_TYPE_FAX = 3,
        IODEFV2_TELEPHONE_TYPE_HOTLINE = 4,
        IODEFV2_TELEPHONE_TYPE_EXT_VALUE = 5,
} iodefv2_telephone_type_t;
iodefv2_telephone_type_t iodefv2_telephone_type_to_numeric(const char *name);
const char *iodefv2_telephone_type_to_string(iodefv2_telephone_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_telephone_type_t, type);
 *         libiodefv2_string_t *ext_type;
 *        REQUIRED(libiodefv2_string_t, *telephone_number);
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_telephone_t, 3);
 */

typedef struct iodefv2_telephone iodefv2_telephone_t;


int iodefv2_telephone_new(iodefv2_telephone_t **ret);
int iodefv2_telephone_copy(const iodefv2_telephone_t *src, iodefv2_telephone_t *dst);
int iodefv2_telephone_clone(iodefv2_telephone_t *src, iodefv2_telephone_t **dst);
int iodefv2_telephone_compare(const iodefv2_telephone_t *obj1, const iodefv2_telephone_t *obj2);


iodefv2_telephone_t *iodefv2_telephone_ref(iodefv2_telephone_t *telephone);

#ifndef SWIG

int _iodefv2_telephone_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_telephone_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_telephone_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_telephone_destroy(iodefv2_telephone_t *ptr);




void iodefv2_telephone_unset_type(iodefv2_telephone_t *ptr);
iodefv2_telephone_type_t *iodefv2_telephone_get_type(iodefv2_telephone_t *ptr);

void iodefv2_telephone_set_type(iodefv2_telephone_t *ptr, iodefv2_telephone_type_t type);
int iodefv2_telephone_new_type(iodefv2_telephone_t *ptr, iodefv2_telephone_type_t **ret);



libiodefv2_string_t *iodefv2_telephone_get_ext_type(iodefv2_telephone_t *ptr);

void iodefv2_telephone_set_ext_type(iodefv2_telephone_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_telephone_new_ext_type(iodefv2_telephone_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_telephone_get_telephone_number(iodefv2_telephone_t *ptr);

void iodefv2_telephone_set_telephone_number(iodefv2_telephone_t *ptr, libiodefv2_string_t *telephone_number);
int iodefv2_telephone_new_telephone_number(iodefv2_telephone_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_telephone_get_description(iodefv2_telephone_t *ptr);

void iodefv2_telephone_set_description(iodefv2_telephone_t *ptr, libiodefv2_string_t *description);
int iodefv2_telephone_new_description(iodefv2_telephone_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *observable_id;
 *        REQUIRED(iodefv2_data_t, *x509_data);
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_certificate_t, 4);
 */

typedef struct iodefv2_certificate iodefv2_certificate_t;


int iodefv2_certificate_new(iodefv2_certificate_t **ret);
int iodefv2_certificate_copy(const iodefv2_certificate_t *src, iodefv2_certificate_t *dst);
int iodefv2_certificate_clone(iodefv2_certificate_t *src, iodefv2_certificate_t **dst);
int iodefv2_certificate_compare(const iodefv2_certificate_t *obj1, const iodefv2_certificate_t *obj2);


iodefv2_certificate_t *iodefv2_certificate_ref(iodefv2_certificate_t *certificate);

#ifndef SWIG

int _iodefv2_certificate_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_certificate_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_certificate_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_certificate_destroy(iodefv2_certificate_t *ptr);




libiodefv2_string_t *iodefv2_certificate_get_observable_id(iodefv2_certificate_t *ptr);

void iodefv2_certificate_set_observable_id(iodefv2_certificate_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_certificate_new_observable_id(iodefv2_certificate_t *ptr, libiodefv2_string_t **ret);



iodefv2_data_t *iodefv2_certificate_get_x509_data(iodefv2_certificate_t *ptr);

void iodefv2_certificate_set_x509_data(iodefv2_certificate_t *ptr, iodefv2_data_t *x509_data);
int iodefv2_certificate_new_x509_data(iodefv2_certificate_t *ptr, iodefv2_data_t **ret);



libiodefv2_string_t *iodefv2_certificate_get_description(iodefv2_certificate_t *ptr);

void iodefv2_certificate_set_description(iodefv2_certificate_t *ptr, libiodefv2_string_t *description);
int iodefv2_certificate_new_description(iodefv2_certificate_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_KEY_REGISTRYACTION_ERROR = -1,
        IODEFV2_KEY_REGISTRYACTION_ADD_KEY = 1,
        IODEFV2_KEY_REGISTRYACTION_ADD_VALUE = 2,
        IODEFV2_KEY_REGISTRYACTION_DELETE_VALUE = 3,
        IODEFV2_KEY_REGISTRYACTION_DELETE_KEY = 4,
        IODEFV2_KEY_REGISTRYACTION_MODIFY_KEY = 5,
        IODEFV2_KEY_REGISTRYACTION_MODIFY_VALUE = 6,
        IODEFV2_KEY_REGISTRYACTION_EXT_VALUE = 7,
} iodefv2_key_registryaction_t;
iodefv2_key_registryaction_t iodefv2_key_registryaction_to_numeric(const char *name);
const char *iodefv2_key_registryaction_to_string(iodefv2_key_registryaction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_key_registryaction_t, registryaction);
 *         libiodefv2_string_t *ext_registryaction;
 *         libiodefv2_string_t *observable_id;
 *        REQUIRED(libiodefv2_string_t, *key_name);
 *         libiodefv2_string_t *key_value;
 * } TYPE_ID(iodefv2_key_t, 6);
 */

typedef struct iodefv2_key iodefv2_key_t;


int iodefv2_key_new(iodefv2_key_t **ret);
int iodefv2_key_copy(const iodefv2_key_t *src, iodefv2_key_t *dst);
int iodefv2_key_clone(iodefv2_key_t *src, iodefv2_key_t **dst);
int iodefv2_key_compare(const iodefv2_key_t *obj1, const iodefv2_key_t *obj2);


iodefv2_key_t *iodefv2_key_ref(iodefv2_key_t *key);

#ifndef SWIG

int _iodefv2_key_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_key_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_key_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_key_destroy(iodefv2_key_t *ptr);




void iodefv2_key_unset_registryaction(iodefv2_key_t *ptr);
iodefv2_key_registryaction_t *iodefv2_key_get_registryaction(iodefv2_key_t *ptr);

void iodefv2_key_set_registryaction(iodefv2_key_t *ptr, iodefv2_key_registryaction_t registryaction);
int iodefv2_key_new_registryaction(iodefv2_key_t *ptr, iodefv2_key_registryaction_t **ret);



libiodefv2_string_t *iodefv2_key_get_ext_registryaction(iodefv2_key_t *ptr);

void iodefv2_key_set_ext_registryaction(iodefv2_key_t *ptr, libiodefv2_string_t *ext_registryaction);
int iodefv2_key_new_ext_registryaction(iodefv2_key_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_key_get_observable_id(iodefv2_key_t *ptr);

void iodefv2_key_set_observable_id(iodefv2_key_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_key_new_observable_id(iodefv2_key_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_key_get_key_name(iodefv2_key_t *ptr);

void iodefv2_key_set_key_name(iodefv2_key_t *ptr, libiodefv2_string_t *key_name);
int iodefv2_key_new_key_name(iodefv2_key_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_key_get_key_value(iodefv2_key_t *ptr);

void iodefv2_key_set_key_value(iodefv2_key_t *ptr, libiodefv2_string_t *key_value);
int iodefv2_key_new_key_value(iodefv2_key_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libiodefv2_string_t, *uid_ref);
 * } TYPE_ID(iodefv2_observable_reference_t, 7);
 */

typedef struct iodefv2_observable_reference iodefv2_observable_reference_t;


int iodefv2_observable_reference_new(iodefv2_observable_reference_t **ret);
int iodefv2_observable_reference_copy(const iodefv2_observable_reference_t *src, iodefv2_observable_reference_t *dst);
int iodefv2_observable_reference_clone(iodefv2_observable_reference_t *src, iodefv2_observable_reference_t **dst);
int iodefv2_observable_reference_compare(const iodefv2_observable_reference_t *obj1, const iodefv2_observable_reference_t *obj2);


iodefv2_observable_reference_t *iodefv2_observable_reference_ref(iodefv2_observable_reference_t *observable_reference);

#ifndef SWIG

int _iodefv2_observable_reference_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_observable_reference_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_observable_reference_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_observable_reference_destroy(iodefv2_observable_reference_t *ptr);




libiodefv2_string_t *iodefv2_observable_reference_get_uid_ref(iodefv2_observable_reference_t *ptr);

void iodefv2_observable_reference_set_uid_ref(iodefv2_observable_reference_t *ptr, libiodefv2_string_t *uid_ref);
int iodefv2_observable_reference_new_uid_ref(iodefv2_observable_reference_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_REGISTRY_HANDLE_REGISTRY_ERROR = -1,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_INTERNIC = 1,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_APNIC = 2,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_ARIN = 3,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_LACNIC = 4,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_RIPE = 5,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_AFRINIC = 6,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_LOCAL = 7,
        IODEFV2_REGISTRY_HANDLE_REGISTRY_EXT_VALUE = 8,
} iodefv2_registry_handle_registry_t;
iodefv2_registry_handle_registry_t iodefv2_registry_handle_registry_to_numeric(const char *name);
const char *iodefv2_registry_handle_registry_to_string(iodefv2_registry_handle_registry_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         iodefv2_registry_handle_registry_t registry;
 *         libiodefv2_string_t *ext_registry;
 * } TYPE_ID(iodefv2_registry_handle_t, 12);
 */

typedef struct iodefv2_registry_handle iodefv2_registry_handle_t;


int iodefv2_registry_handle_new(iodefv2_registry_handle_t **ret);
int iodefv2_registry_handle_copy(const iodefv2_registry_handle_t *src, iodefv2_registry_handle_t *dst);
int iodefv2_registry_handle_clone(iodefv2_registry_handle_t *src, iodefv2_registry_handle_t **dst);
int iodefv2_registry_handle_compare(const iodefv2_registry_handle_t *obj1, const iodefv2_registry_handle_t *obj2);


iodefv2_registry_handle_t *iodefv2_registry_handle_ref(iodefv2_registry_handle_t *registry_handle);

#ifndef SWIG

int _iodefv2_registry_handle_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_registry_handle_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_registry_handle_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_registry_handle_destroy(iodefv2_registry_handle_t *ptr);




iodefv2_registry_handle_registry_t iodefv2_registry_handle_get_registry(iodefv2_registry_handle_t *ptr);

void iodefv2_registry_handle_set_registry(iodefv2_registry_handle_t *ptr, iodefv2_registry_handle_registry_t registry);
int iodefv2_registry_handle_new_registry(iodefv2_registry_handle_t *ptr, iodefv2_registry_handle_registry_t **ret);



libiodefv2_string_t *iodefv2_registry_handle_get_ext_registry(iodefv2_registry_handle_t *ptr);

void iodefv2_registry_handle_set_ext_registry(iodefv2_registry_handle_t *ptr, libiodefv2_string_t *ext_registry);
int iodefv2_registry_handle_new_ext_registry(iodefv2_registry_handle_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_TIME_IMPACT_DURATION_ERROR = -1,
        IODEFV2_TIME_IMPACT_DURATION_SECOND = 1,
        IODEFV2_TIME_IMPACT_DURATION_MINUTE = 2,
        IODEFV2_TIME_IMPACT_DURATION_HOUR = 3,
        IODEFV2_TIME_IMPACT_DURATION_DAY = 4,
        IODEFV2_TIME_IMPACT_DURATION_MONTH = 5,
        IODEFV2_TIME_IMPACT_DURATION_QUARTER = 6,
        IODEFV2_TIME_IMPACT_DURATION_YEAR = 7,
        IODEFV2_TIME_IMPACT_DURATION_EXT_VALUE = 8,
} iodefv2_time_impact_duration_t;
iodefv2_time_impact_duration_t iodefv2_time_impact_duration_to_numeric(const char *name);
const char *iodefv2_time_impact_duration_to_string(iodefv2_time_impact_duration_t val);

        
typedef enum {
        IODEFV2_TIME_IMPACT_METRIC_ERROR = -1,
        IODEFV2_TIME_IMPACT_METRIC_LABOR = 1,
        IODEFV2_TIME_IMPACT_METRIC_ELAPSED = 2,
        IODEFV2_TIME_IMPACT_METRIC_DOWNTIME = 3,
        IODEFV2_TIME_IMPACT_METRIC_EXT_VALUE = 4,
} iodefv2_time_impact_metric_t;
iodefv2_time_impact_metric_t iodefv2_time_impact_metric_to_numeric(const char *name);
const char *iodefv2_time_impact_metric_to_string(iodefv2_time_impact_metric_t val);

        
typedef enum {
        IODEFV2_TIME_IMPACT_SEVERITY_ERROR = -1,
        IODEFV2_TIME_IMPACT_SEVERITY_LOW = 1,
        IODEFV2_TIME_IMPACT_SEVERITY_MEDIUM = 2,
        IODEFV2_TIME_IMPACT_SEVERITY_HIGH = 3,
} iodefv2_time_impact_severity_t;
iodefv2_time_impact_severity_t iodefv2_time_impact_severity_to_numeric(const char *name);
const char *iodefv2_time_impact_severity_to_string(iodefv2_time_impact_severity_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *ext_metric;
 *         iodefv2_time_impact_duration_t duration;
 *         iodefv2_time_impact_metric_t metric;
 *         OPTIONAL_INT(iodefv2_time_impact_severity_t, severity);
 *         libiodefv2_string_t *ext_duration;
 * } TYPE_ID(iodefv2_time_impact_t, 16);
 */

typedef struct iodefv2_time_impact iodefv2_time_impact_t;


int iodefv2_time_impact_new(iodefv2_time_impact_t **ret);
int iodefv2_time_impact_copy(const iodefv2_time_impact_t *src, iodefv2_time_impact_t *dst);
int iodefv2_time_impact_clone(iodefv2_time_impact_t *src, iodefv2_time_impact_t **dst);
int iodefv2_time_impact_compare(const iodefv2_time_impact_t *obj1, const iodefv2_time_impact_t *obj2);


iodefv2_time_impact_t *iodefv2_time_impact_ref(iodefv2_time_impact_t *time_impact);

#ifndef SWIG

int _iodefv2_time_impact_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_time_impact_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_time_impact_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_time_impact_destroy(iodefv2_time_impact_t *ptr);




libiodefv2_string_t *iodefv2_time_impact_get_ext_metric(iodefv2_time_impact_t *ptr);

void iodefv2_time_impact_set_ext_metric(iodefv2_time_impact_t *ptr, libiodefv2_string_t *ext_metric);
int iodefv2_time_impact_new_ext_metric(iodefv2_time_impact_t *ptr, libiodefv2_string_t **ret);



iodefv2_time_impact_duration_t iodefv2_time_impact_get_duration(iodefv2_time_impact_t *ptr);

void iodefv2_time_impact_set_duration(iodefv2_time_impact_t *ptr, iodefv2_time_impact_duration_t duration);
int iodefv2_time_impact_new_duration(iodefv2_time_impact_t *ptr, iodefv2_time_impact_duration_t **ret);



iodefv2_time_impact_metric_t iodefv2_time_impact_get_metric(iodefv2_time_impact_t *ptr);

void iodefv2_time_impact_set_metric(iodefv2_time_impact_t *ptr, iodefv2_time_impact_metric_t metric);
int iodefv2_time_impact_new_metric(iodefv2_time_impact_t *ptr, iodefv2_time_impact_metric_t **ret);



void iodefv2_time_impact_unset_severity(iodefv2_time_impact_t *ptr);
iodefv2_time_impact_severity_t *iodefv2_time_impact_get_severity(iodefv2_time_impact_t *ptr);

void iodefv2_time_impact_set_severity(iodefv2_time_impact_t *ptr, iodefv2_time_impact_severity_t severity);
int iodefv2_time_impact_new_severity(iodefv2_time_impact_t *ptr, iodefv2_time_impact_severity_t **ret);



libiodefv2_string_t *iodefv2_time_impact_get_ext_duration(iodefv2_time_impact_t *ptr);

void iodefv2_time_impact_set_ext_duration(iodefv2_time_impact_t *ptr, libiodefv2_string_t *ext_duration);
int iodefv2_time_impact_new_ext_duration(iodefv2_time_impact_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_RECORD_PATTERN_OFFSETUNIT_ERROR = -1,
        IODEFV2_RECORD_PATTERN_OFFSETUNIT_LINE = 1,
        IODEFV2_RECORD_PATTERN_OFFSETUNIT_BINARY = 2,
        IODEFV2_RECORD_PATTERN_OFFSETUNIT_EXT_VALUE = 3,
} iodefv2_record_pattern_offsetunit_t;
iodefv2_record_pattern_offsetunit_t iodefv2_record_pattern_offsetunit_to_numeric(const char *name);
const char *iodefv2_record_pattern_offsetunit_to_string(iodefv2_record_pattern_offsetunit_t val);

        
typedef enum {
        IODEFV2_RECORD_PATTERN_TYPE_ERROR = -1,
        IODEFV2_RECORD_PATTERN_TYPE_REGEX = 1,
        IODEFV2_RECORD_PATTERN_TYPE_BINARY = 2,
        IODEFV2_RECORD_PATTERN_TYPE_XPATH = 3,
        IODEFV2_RECORD_PATTERN_TYPE_EXT_VALUE = 4,
} iodefv2_record_pattern_type_t;
iodefv2_record_pattern_type_t iodefv2_record_pattern_type_to_numeric(const char *name);
const char *iodefv2_record_pattern_type_to_string(iodefv2_record_pattern_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(uint32_t, instance);
 *         libiodefv2_string_t *ext_type;
 *         OPTIONAL_INT(uint32_t, offset);
 *         OPTIONAL_INT(iodefv2_record_pattern_offsetunit_t, offsetunit);
 *         libiodefv2_string_t *ext_offsetunit;
 *         iodefv2_record_pattern_type_t type;
 * } TYPE_ID(iodefv2_record_pattern_t, 19);
 */

typedef struct iodefv2_record_pattern iodefv2_record_pattern_t;


int iodefv2_record_pattern_new(iodefv2_record_pattern_t **ret);
int iodefv2_record_pattern_copy(const iodefv2_record_pattern_t *src, iodefv2_record_pattern_t *dst);
int iodefv2_record_pattern_clone(iodefv2_record_pattern_t *src, iodefv2_record_pattern_t **dst);
int iodefv2_record_pattern_compare(const iodefv2_record_pattern_t *obj1, const iodefv2_record_pattern_t *obj2);


iodefv2_record_pattern_t *iodefv2_record_pattern_ref(iodefv2_record_pattern_t *record_pattern);

#ifndef SWIG

int _iodefv2_record_pattern_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_record_pattern_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_record_pattern_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_record_pattern_destroy(iodefv2_record_pattern_t *ptr);




void iodefv2_record_pattern_unset_instance(iodefv2_record_pattern_t *ptr);
uint32_t *iodefv2_record_pattern_get_instance(iodefv2_record_pattern_t *ptr);

void iodefv2_record_pattern_set_instance(iodefv2_record_pattern_t *ptr, uint32_t instance);
int iodefv2_record_pattern_new_instance(iodefv2_record_pattern_t *ptr, uint32_t **ret);



libiodefv2_string_t *iodefv2_record_pattern_get_ext_type(iodefv2_record_pattern_t *ptr);

void iodefv2_record_pattern_set_ext_type(iodefv2_record_pattern_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_record_pattern_new_ext_type(iodefv2_record_pattern_t *ptr, libiodefv2_string_t **ret);



void iodefv2_record_pattern_unset_offset(iodefv2_record_pattern_t *ptr);
uint32_t *iodefv2_record_pattern_get_offset(iodefv2_record_pattern_t *ptr);

void iodefv2_record_pattern_set_offset(iodefv2_record_pattern_t *ptr, uint32_t offset);
int iodefv2_record_pattern_new_offset(iodefv2_record_pattern_t *ptr, uint32_t **ret);



void iodefv2_record_pattern_unset_offsetunit(iodefv2_record_pattern_t *ptr);
iodefv2_record_pattern_offsetunit_t *iodefv2_record_pattern_get_offsetunit(iodefv2_record_pattern_t *ptr);

void iodefv2_record_pattern_set_offsetunit(iodefv2_record_pattern_t *ptr, iodefv2_record_pattern_offsetunit_t offsetunit);
int iodefv2_record_pattern_new_offsetunit(iodefv2_record_pattern_t *ptr, iodefv2_record_pattern_offsetunit_t **ret);



libiodefv2_string_t *iodefv2_record_pattern_get_ext_offsetunit(iodefv2_record_pattern_t *ptr);

void iodefv2_record_pattern_set_ext_offsetunit(iodefv2_record_pattern_t *ptr, libiodefv2_string_t *ext_offsetunit);
int iodefv2_record_pattern_new_ext_offsetunit(iodefv2_record_pattern_t *ptr, libiodefv2_string_t **ret);



iodefv2_record_pattern_type_t iodefv2_record_pattern_get_type(iodefv2_record_pattern_t *ptr);

void iodefv2_record_pattern_set_type(iodefv2_record_pattern_t *ptr, iodefv2_record_pattern_type_t type);
int iodefv2_record_pattern_new_type(iodefv2_record_pattern_t *ptr, iodefv2_record_pattern_type_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *observable_id;
 *         libiodefv2_string_t *url;
 *         libiodefv2_string_t *description;
 *         libiodefv2_string_t *reference_name;
 * } TYPE_ID(iodefv2_reference_t, 20);
 */

typedef struct iodefv2_reference iodefv2_reference_t;


int iodefv2_reference_new(iodefv2_reference_t **ret);
int iodefv2_reference_copy(const iodefv2_reference_t *src, iodefv2_reference_t *dst);
int iodefv2_reference_clone(iodefv2_reference_t *src, iodefv2_reference_t **dst);
int iodefv2_reference_compare(const iodefv2_reference_t *obj1, const iodefv2_reference_t *obj2);


iodefv2_reference_t *iodefv2_reference_ref(iodefv2_reference_t *reference);

#ifndef SWIG

int _iodefv2_reference_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_reference_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_reference_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_reference_destroy(iodefv2_reference_t *ptr);




libiodefv2_string_t *iodefv2_reference_get_observable_id(iodefv2_reference_t *ptr);

void iodefv2_reference_set_observable_id(iodefv2_reference_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_reference_new_observable_id(iodefv2_reference_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_reference_get_url(iodefv2_reference_t *ptr);

void iodefv2_reference_set_url(iodefv2_reference_t *ptr, libiodefv2_string_t *url);
int iodefv2_reference_new_url(iodefv2_reference_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_reference_get_description(iodefv2_reference_t *ptr);

void iodefv2_reference_set_description(iodefv2_reference_t *ptr, libiodefv2_string_t *description);
int iodefv2_reference_new_description(iodefv2_reference_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_reference_get_reference_name(iodefv2_reference_t *ptr);

void iodefv2_reference_set_reference_name(iodefv2_reference_t *ptr, libiodefv2_string_t *reference_name);
int iodefv2_reference_new_reference_name(iodefv2_reference_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_POSTAL_ADDRESS_TYPE_ERROR = -1,
        IODEFV2_POSTAL_ADDRESS_TYPE_STREET = 1,
        IODEFV2_POSTAL_ADDRESS_TYPE_MAILING = 2,
        IODEFV2_POSTAL_ADDRESS_TYPE_EXT_VALUE = 3,
} iodefv2_postal_address_type_t;
iodefv2_postal_address_type_t iodefv2_postal_address_type_to_numeric(const char *name);
const char *iodefv2_postal_address_type_to_string(iodefv2_postal_address_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_postal_address_type_t, type);
 *         libiodefv2_string_t *ext_type;
 *        REQUIRED(libiodefv2_string_t, *p_address);
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_postal_address_t, 22);
 */

typedef struct iodefv2_postal_address iodefv2_postal_address_t;


int iodefv2_postal_address_new(iodefv2_postal_address_t **ret);
int iodefv2_postal_address_copy(const iodefv2_postal_address_t *src, iodefv2_postal_address_t *dst);
int iodefv2_postal_address_clone(iodefv2_postal_address_t *src, iodefv2_postal_address_t **dst);
int iodefv2_postal_address_compare(const iodefv2_postal_address_t *obj1, const iodefv2_postal_address_t *obj2);


iodefv2_postal_address_t *iodefv2_postal_address_ref(iodefv2_postal_address_t *postal_address);

#ifndef SWIG

int _iodefv2_postal_address_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_postal_address_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_postal_address_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_postal_address_destroy(iodefv2_postal_address_t *ptr);




void iodefv2_postal_address_unset_type(iodefv2_postal_address_t *ptr);
iodefv2_postal_address_type_t *iodefv2_postal_address_get_type(iodefv2_postal_address_t *ptr);

void iodefv2_postal_address_set_type(iodefv2_postal_address_t *ptr, iodefv2_postal_address_type_t type);
int iodefv2_postal_address_new_type(iodefv2_postal_address_t *ptr, iodefv2_postal_address_type_t **ret);



libiodefv2_string_t *iodefv2_postal_address_get_ext_type(iodefv2_postal_address_t *ptr);

void iodefv2_postal_address_set_ext_type(iodefv2_postal_address_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_postal_address_new_ext_type(iodefv2_postal_address_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_postal_address_get_p_address(iodefv2_postal_address_t *ptr);

void iodefv2_postal_address_set_p_address(iodefv2_postal_address_t *ptr, libiodefv2_string_t *p_address);
int iodefv2_postal_address_new_p_address(iodefv2_postal_address_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_postal_address_get_description(iodefv2_postal_address_t *ptr);

void iodefv2_postal_address_set_description(iodefv2_postal_address_t *ptr, libiodefv2_string_t *description);
int iodefv2_postal_address_new_description(iodefv2_postal_address_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_NODE_ROLE_CATEGORY_ERROR = -1,
        IODEFV2_NODE_ROLE_CATEGORY_CLIENT = 1,
        IODEFV2_NODE_ROLE_CATEGORY_SERVER_INTERNAL = 2,
        IODEFV2_NODE_ROLE_CATEGORY_SERVER_PUBLIC = 3,
        IODEFV2_NODE_ROLE_CATEGORY_WWW = 4,
        IODEFV2_NODE_ROLE_CATEGORY_MAIL = 5,
        IODEFV2_NODE_ROLE_CATEGORY_MESSAGING = 6,
        IODEFV2_NODE_ROLE_CATEGORY_STREAMING = 7,
        IODEFV2_NODE_ROLE_CATEGORY_VOICE = 8,
        IODEFV2_NODE_ROLE_CATEGORY_FILE = 9,
        IODEFV2_NODE_ROLE_CATEGORY_FTP = 10,
        IODEFV2_NODE_ROLE_CATEGORY_P2P = 11,
        IODEFV2_NODE_ROLE_CATEGORY_NAME = 12,
        IODEFV2_NODE_ROLE_CATEGORY_DIRECTORY = 13,
        IODEFV2_NODE_ROLE_CATEGORY_CREDENTIAL = 14,
        IODEFV2_NODE_ROLE_CATEGORY_PRINT = 15,
        IODEFV2_NODE_ROLE_CATEGORY_APPLICATION = 16,
        IODEFV2_NODE_ROLE_CATEGORY_DATABASE = 17,
        IODEFV2_NODE_ROLE_CATEGORY_INFRA = 18,
        IODEFV2_NODE_ROLE_CATEGORY_LOG = 19,
        IODEFV2_NODE_ROLE_CATEGORY_EXT_VALUE = 20,
} iodefv2_node_role_category_t;
iodefv2_node_role_category_t iodefv2_node_role_category_to_numeric(const char *name);
const char *iodefv2_node_role_category_to_string(iodefv2_node_role_category_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         iodefv2_node_role_category_t category;
 *         libiodefv2_string_t *ext_category;
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_node_role_t, 24);
 */

typedef struct iodefv2_node_role iodefv2_node_role_t;


int iodefv2_node_role_new(iodefv2_node_role_t **ret);
int iodefv2_node_role_copy(const iodefv2_node_role_t *src, iodefv2_node_role_t *dst);
int iodefv2_node_role_clone(iodefv2_node_role_t *src, iodefv2_node_role_t **dst);
int iodefv2_node_role_compare(const iodefv2_node_role_t *obj1, const iodefv2_node_role_t *obj2);


iodefv2_node_role_t *iodefv2_node_role_ref(iodefv2_node_role_t *node_role);

#ifndef SWIG

int _iodefv2_node_role_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_node_role_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_node_role_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_node_role_destroy(iodefv2_node_role_t *ptr);




iodefv2_node_role_category_t iodefv2_node_role_get_category(iodefv2_node_role_t *ptr);

void iodefv2_node_role_set_category(iodefv2_node_role_t *ptr, iodefv2_node_role_category_t category);
int iodefv2_node_role_new_category(iodefv2_node_role_t *ptr, iodefv2_node_role_category_t **ret);



libiodefv2_string_t *iodefv2_node_role_get_ext_category(iodefv2_node_role_t *ptr);

void iodefv2_node_role_set_ext_category(iodefv2_node_role_t *ptr, libiodefv2_string_t *ext_category);
int iodefv2_node_role_new_ext_category(iodefv2_node_role_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_node_role_get_description(iodefv2_node_role_t *ptr);

void iodefv2_node_role_set_description(iodefv2_node_role_t *ptr, libiodefv2_string_t *description);
int iodefv2_node_role_new_description(iodefv2_node_role_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_INCIDENT_ID_RESTRICTION_ERROR = -1,
        IODEFV2_INCIDENT_ID_RESTRICTION_PUBLIC = 1,
        IODEFV2_INCIDENT_ID_RESTRICTION_PARTNER = 2,
        IODEFV2_INCIDENT_ID_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_INCIDENT_ID_RESTRICTION_PRIVATE = 4,
        IODEFV2_INCIDENT_ID_RESTRICTION_DEFAULT = 5,
        IODEFV2_INCIDENT_ID_RESTRICTION_WHITE = 6,
        IODEFV2_INCIDENT_ID_RESTRICTION_GREEN = 7,
        IODEFV2_INCIDENT_ID_RESTRICTION_AMBER = 8,
        IODEFV2_INCIDENT_ID_RESTRICTION_RED = 9,
} iodefv2_incident_id_restriction_t;
iodefv2_incident_id_restriction_t iodefv2_incident_id_restriction_to_numeric(const char *name);
const char *iodefv2_incident_id_restriction_to_string(iodefv2_incident_id_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *instance;
 *         libiodefv2_string_t *ext_restriction;
 *        REQUIRED(libiodefv2_string_t, *name);
 *         OPTIONAL_INT(iodefv2_incident_id_restriction_t, restriction);
 * } TYPE_ID(iodefv2_incident_id_t, 26);
 */

typedef struct iodefv2_incident_id iodefv2_incident_id_t;


int iodefv2_incident_id_new(iodefv2_incident_id_t **ret);
int iodefv2_incident_id_copy(const iodefv2_incident_id_t *src, iodefv2_incident_id_t *dst);
int iodefv2_incident_id_clone(iodefv2_incident_id_t *src, iodefv2_incident_id_t **dst);
int iodefv2_incident_id_compare(const iodefv2_incident_id_t *obj1, const iodefv2_incident_id_t *obj2);


iodefv2_incident_id_t *iodefv2_incident_id_ref(iodefv2_incident_id_t *incident_id);

#ifndef SWIG

int _iodefv2_incident_id_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_incident_id_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_incident_id_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_incident_id_destroy(iodefv2_incident_id_t *ptr);




libiodefv2_string_t *iodefv2_incident_id_get_instance(iodefv2_incident_id_t *ptr);

void iodefv2_incident_id_set_instance(iodefv2_incident_id_t *ptr, libiodefv2_string_t *instance);
int iodefv2_incident_id_new_instance(iodefv2_incident_id_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_incident_id_get_ext_restriction(iodefv2_incident_id_t *ptr);

void iodefv2_incident_id_set_ext_restriction(iodefv2_incident_id_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_incident_id_new_ext_restriction(iodefv2_incident_id_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_incident_id_get_name(iodefv2_incident_id_t *ptr);

void iodefv2_incident_id_set_name(iodefv2_incident_id_t *ptr, libiodefv2_string_t *name);
int iodefv2_incident_id_new_name(iodefv2_incident_id_t *ptr, libiodefv2_string_t **ret);



void iodefv2_incident_id_unset_restriction(iodefv2_incident_id_t *ptr);
iodefv2_incident_id_restriction_t *iodefv2_incident_id_get_restriction(iodefv2_incident_id_t *ptr);

void iodefv2_incident_id_set_restriction(iodefv2_incident_id_t *ptr, iodefv2_incident_id_restriction_t restriction);
int iodefv2_incident_id_new_restriction(iodefv2_incident_id_t *ptr, iodefv2_incident_id_restriction_t **ret);



        
typedef enum {
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_ERROR = -1,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_PUBLIC = 1,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_PARTNER = 2,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_PRIVATE = 4,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_DEFAULT = 5,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_WHITE = 6,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_GREEN = 7,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_AMBER = 8,
        IODEFV2_ALTERNATIVE_INDICATOR_ID_RESTRICTION_RED = 9,
} iodefv2_alternative_indicator_id_restriction_t;
iodefv2_alternative_indicator_id_restriction_t iodefv2_alternative_indicator_id_restriction_to_numeric(const char *name);
const char *iodefv2_alternative_indicator_id_restriction_to_string(iodefv2_alternative_indicator_id_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_alternative_indicator_id_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *indicator_reference;
 * } TYPE_ID(iodefv2_alternative_indicator_id_t, 28);
 */

typedef struct iodefv2_alternative_indicator_id iodefv2_alternative_indicator_id_t;


int iodefv2_alternative_indicator_id_new(iodefv2_alternative_indicator_id_t **ret);
int iodefv2_alternative_indicator_id_copy(const iodefv2_alternative_indicator_id_t *src, iodefv2_alternative_indicator_id_t *dst);
int iodefv2_alternative_indicator_id_clone(iodefv2_alternative_indicator_id_t *src, iodefv2_alternative_indicator_id_t **dst);
int iodefv2_alternative_indicator_id_compare(const iodefv2_alternative_indicator_id_t *obj1, const iodefv2_alternative_indicator_id_t *obj2);


iodefv2_alternative_indicator_id_t *iodefv2_alternative_indicator_id_ref(iodefv2_alternative_indicator_id_t *alternative_indicator_id);

#ifndef SWIG

int _iodefv2_alternative_indicator_id_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_alternative_indicator_id_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_alternative_indicator_id_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_alternative_indicator_id_destroy(iodefv2_alternative_indicator_id_t *ptr);




void iodefv2_alternative_indicator_id_unset_restriction(iodefv2_alternative_indicator_id_t *ptr);
iodefv2_alternative_indicator_id_restriction_t *iodefv2_alternative_indicator_id_get_restriction(iodefv2_alternative_indicator_id_t *ptr);

void iodefv2_alternative_indicator_id_set_restriction(iodefv2_alternative_indicator_id_t *ptr, iodefv2_alternative_indicator_id_restriction_t restriction);
int iodefv2_alternative_indicator_id_new_restriction(iodefv2_alternative_indicator_id_t *ptr, iodefv2_alternative_indicator_id_restriction_t **ret);



libiodefv2_string_t *iodefv2_alternative_indicator_id_get_ext_restriction(iodefv2_alternative_indicator_id_t *ptr);

void iodefv2_alternative_indicator_id_set_ext_restriction(iodefv2_alternative_indicator_id_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_alternative_indicator_id_new_ext_restriction(iodefv2_alternative_indicator_id_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_alternative_indicator_id_get_indicator_reference(iodefv2_alternative_indicator_id_t *ptr);

void iodefv2_alternative_indicator_id_set_indicator_reference(iodefv2_alternative_indicator_id_t *ptr, libiodefv2_string_t *indicator_reference);
int iodefv2_alternative_indicator_id_new_indicator_reference(iodefv2_alternative_indicator_id_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_CONFIDENCE_RATING_ERROR = -1,
        IODEFV2_CONFIDENCE_RATING_LOW = 1,
        IODEFV2_CONFIDENCE_RATING_MEDIUM = 2,
        IODEFV2_CONFIDENCE_RATING_HIGH = 3,
        IODEFV2_CONFIDENCE_RATING_NUMERIC = 4,
} iodefv2_confidence_rating_t;
iodefv2_confidence_rating_t iodefv2_confidence_rating_to_numeric(const char *name);
const char *iodefv2_confidence_rating_to_string(iodefv2_confidence_rating_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         iodefv2_confidence_rating_t rating;
 *         libiodefv2_string_t *ext_rating;
 * } TYPE_ID(iodefv2_confidence_t, 30);
 */

typedef struct iodefv2_confidence iodefv2_confidence_t;


int iodefv2_confidence_new(iodefv2_confidence_t **ret);
int iodefv2_confidence_copy(const iodefv2_confidence_t *src, iodefv2_confidence_t *dst);
int iodefv2_confidence_clone(iodefv2_confidence_t *src, iodefv2_confidence_t **dst);
int iodefv2_confidence_compare(const iodefv2_confidence_t *obj1, const iodefv2_confidence_t *obj2);


iodefv2_confidence_t *iodefv2_confidence_ref(iodefv2_confidence_t *confidence);

#ifndef SWIG

int _iodefv2_confidence_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_confidence_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_confidence_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_confidence_destroy(iodefv2_confidence_t *ptr);




iodefv2_confidence_rating_t iodefv2_confidence_get_rating(iodefv2_confidence_t *ptr);

void iodefv2_confidence_set_rating(iodefv2_confidence_t *ptr, iodefv2_confidence_rating_t rating);
int iodefv2_confidence_new_rating(iodefv2_confidence_t *ptr, iodefv2_confidence_rating_t **ret);



libiodefv2_string_t *iodefv2_confidence_get_ext_rating(iodefv2_confidence_t *ptr);

void iodefv2_confidence_set_ext_rating(iodefv2_confidence_t *ptr, libiodefv2_string_t *ext_rating);
int iodefv2_confidence_new_ext_rating(iodefv2_confidence_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_SYSTEM_IMPACT_COMPLETION_ERROR = -1,
        IODEFV2_SYSTEM_IMPACT_COMPLETION_FAILED = 1,
        IODEFV2_SYSTEM_IMPACT_COMPLETION_SUCCEEDED = 2,
} iodefv2_system_impact_completion_t;
iodefv2_system_impact_completion_t iodefv2_system_impact_completion_to_numeric(const char *name);
const char *iodefv2_system_impact_completion_to_string(iodefv2_system_impact_completion_t val);

        
typedef enum {
        IODEFV2_SYSTEM_IMPACT_TYPE_ERROR = -1,
        IODEFV2_SYSTEM_IMPACT_TYPE_TAKEOVER_ACCOUNT = 1,
        IODEFV2_SYSTEM_IMPACT_TYPE_TAKEOVER_SERVICE = 2,
        IODEFV2_SYSTEM_IMPACT_TYPE_TAKEOVER_SYSTEM = 3,
        IODEFV2_SYSTEM_IMPACT_TYPE_CPS_MANIPULATION = 4,
        IODEFV2_SYSTEM_IMPACT_TYPE_CPS_DAMAGE = 5,
        IODEFV2_SYSTEM_IMPACT_TYPE_AVAILABILITY_DATA = 6,
        IODEFV2_SYSTEM_IMPACT_TYPE_AVAILABILITY_ACCOUNT = 7,
        IODEFV2_SYSTEM_IMPACT_TYPE_AVAILABILITY_SERVICE = 8,
        IODEFV2_SYSTEM_IMPACT_TYPE_AVAILABILITY_SYSTEM = 9,
        IODEFV2_SYSTEM_IMPACT_TYPE_DAMAGED_SYSTEM = 10,
        IODEFV2_SYSTEM_IMPACT_TYPE_DAMAGED_DATA = 11,
        IODEFV2_SYSTEM_IMPACT_TYPE_BREACH_PROPRIETARY = 12,
        IODEFV2_SYSTEM_IMPACT_TYPE_BREACH_PRIVACY = 13,
        IODEFV2_SYSTEM_IMPACT_TYPE_BREACH_CREDENTIAL = 14,
        IODEFV2_SYSTEM_IMPACT_TYPE_BREACH_CONFIGURATION = 15,
        IODEFV2_SYSTEM_IMPACT_TYPE_INTEGRITY_DATA = 16,
        IODEFV2_SYSTEM_IMPACT_TYPE_INTEGRITY_CONFIGURATION = 17,
        IODEFV2_SYSTEM_IMPACT_TYPE_INTEGRITY_HARDWARE = 18,
        IODEFV2_SYSTEM_IMPACT_TYPE_TRAFFIC_REDIRECTION = 19,
        IODEFV2_SYSTEM_IMPACT_TYPE_MONITORING_TRAFFIC = 20,
        IODEFV2_SYSTEM_IMPACT_TYPE_MONITORING_HOST = 21,
        IODEFV2_SYSTEM_IMPACT_TYPE_POLICY = 22,
        IODEFV2_SYSTEM_IMPACT_TYPE_UNKNOWN = 23,
        IODEFV2_SYSTEM_IMPACT_TYPE_EXT_VALUE = 24,
} iodefv2_system_impact_type_t;
iodefv2_system_impact_type_t iodefv2_system_impact_type_to_numeric(const char *name);
const char *iodefv2_system_impact_type_to_string(iodefv2_system_impact_type_t val);

        
typedef enum {
        IODEFV2_SYSTEM_IMPACT_SEVERITY_ERROR = -1,
        IODEFV2_SYSTEM_IMPACT_SEVERITY_LOW = 1,
        IODEFV2_SYSTEM_IMPACT_SEVERITY_MEDIUM = 2,
        IODEFV2_SYSTEM_IMPACT_SEVERITY_HIGH = 3,
} iodefv2_system_impact_severity_t;
iodefv2_system_impact_severity_t iodefv2_system_impact_severity_to_numeric(const char *name);
const char *iodefv2_system_impact_severity_to_string(iodefv2_system_impact_severity_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_system_impact_completion_t, completion);
 *         iodefv2_system_impact_type_t type;
 *         OPTIONAL_INT(iodefv2_system_impact_severity_t, severity);
 *         libiodefv2_string_t *ext_type;
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_system_impact_t, 34);
 */

typedef struct iodefv2_system_impact iodefv2_system_impact_t;


int iodefv2_system_impact_new(iodefv2_system_impact_t **ret);
int iodefv2_system_impact_copy(const iodefv2_system_impact_t *src, iodefv2_system_impact_t *dst);
int iodefv2_system_impact_clone(iodefv2_system_impact_t *src, iodefv2_system_impact_t **dst);
int iodefv2_system_impact_compare(const iodefv2_system_impact_t *obj1, const iodefv2_system_impact_t *obj2);


iodefv2_system_impact_t *iodefv2_system_impact_ref(iodefv2_system_impact_t *system_impact);

#ifndef SWIG

int _iodefv2_system_impact_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_system_impact_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_system_impact_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_system_impact_destroy(iodefv2_system_impact_t *ptr);




void iodefv2_system_impact_unset_completion(iodefv2_system_impact_t *ptr);
iodefv2_system_impact_completion_t *iodefv2_system_impact_get_completion(iodefv2_system_impact_t *ptr);

void iodefv2_system_impact_set_completion(iodefv2_system_impact_t *ptr, iodefv2_system_impact_completion_t completion);
int iodefv2_system_impact_new_completion(iodefv2_system_impact_t *ptr, iodefv2_system_impact_completion_t **ret);



iodefv2_system_impact_type_t iodefv2_system_impact_get_type(iodefv2_system_impact_t *ptr);

void iodefv2_system_impact_set_type(iodefv2_system_impact_t *ptr, iodefv2_system_impact_type_t type);
int iodefv2_system_impact_new_type(iodefv2_system_impact_t *ptr, iodefv2_system_impact_type_t **ret);



void iodefv2_system_impact_unset_severity(iodefv2_system_impact_t *ptr);
iodefv2_system_impact_severity_t *iodefv2_system_impact_get_severity(iodefv2_system_impact_t *ptr);

void iodefv2_system_impact_set_severity(iodefv2_system_impact_t *ptr, iodefv2_system_impact_severity_t severity);
int iodefv2_system_impact_new_severity(iodefv2_system_impact_t *ptr, iodefv2_system_impact_severity_t **ret);



libiodefv2_string_t *iodefv2_system_impact_get_ext_type(iodefv2_system_impact_t *ptr);

void iodefv2_system_impact_set_ext_type(iodefv2_system_impact_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_system_impact_new_ext_type(iodefv2_system_impact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_system_impact_get_description(iodefv2_system_impact_t *ptr);

void iodefv2_system_impact_set_description(iodefv2_system_impact_t *ptr, libiodefv2_string_t *description);
int iodefv2_system_impact_new_description(iodefv2_system_impact_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_ERROR = -1,
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_BYTES = 1,
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_INTEGER = 2,
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_REAL = 3,
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_STRING = 4,
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_XML = 5,
        IODEFV2_SOFTWARE_REFERENCE_DTYPE_EXT_VALUE = 6,
} iodefv2_software_reference_dtype_t;
iodefv2_software_reference_dtype_t iodefv2_software_reference_dtype_to_numeric(const char *name);
const char *iodefv2_software_reference_dtype_to_string(iodefv2_software_reference_dtype_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_software_reference_dtype_t, dtype);
 *         libiodefv2_string_t *ext_spec_name;
 *         libiodefv2_string_t *ext_dtype;
 * } TYPE_ID(iodefv2_software_reference_t, 36);
 */

typedef struct iodefv2_software_reference iodefv2_software_reference_t;


int iodefv2_software_reference_new(iodefv2_software_reference_t **ret);
int iodefv2_software_reference_copy(const iodefv2_software_reference_t *src, iodefv2_software_reference_t *dst);
int iodefv2_software_reference_clone(iodefv2_software_reference_t *src, iodefv2_software_reference_t **dst);
int iodefv2_software_reference_compare(const iodefv2_software_reference_t *obj1, const iodefv2_software_reference_t *obj2);


iodefv2_software_reference_t *iodefv2_software_reference_ref(iodefv2_software_reference_t *software_reference);

#ifndef SWIG

int _iodefv2_software_reference_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_software_reference_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_software_reference_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_software_reference_destroy(iodefv2_software_reference_t *ptr);




void iodefv2_software_reference_unset_dtype(iodefv2_software_reference_t *ptr);
iodefv2_software_reference_dtype_t *iodefv2_software_reference_get_dtype(iodefv2_software_reference_t *ptr);

void iodefv2_software_reference_set_dtype(iodefv2_software_reference_t *ptr, iodefv2_software_reference_dtype_t dtype);
int iodefv2_software_reference_new_dtype(iodefv2_software_reference_t *ptr, iodefv2_software_reference_dtype_t **ret);



libiodefv2_string_t *iodefv2_software_reference_get_ext_spec_name(iodefv2_software_reference_t *ptr);

void iodefv2_software_reference_set_ext_spec_name(iodefv2_software_reference_t *ptr, libiodefv2_string_t *ext_spec_name);
int iodefv2_software_reference_new_ext_spec_name(iodefv2_software_reference_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_software_reference_get_ext_dtype(iodefv2_software_reference_t *ptr);

void iodefv2_software_reference_set_ext_dtype(iodefv2_software_reference_t *ptr, libiodefv2_string_t *ext_dtype);
int iodefv2_software_reference_new_ext_dtype(iodefv2_software_reference_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_BUSINESS_IMPACT_TYPE_ERROR = -1,
        IODEFV2_BUSINESS_IMPACT_TYPE_BREACH_PROPRIETARY = 1,
        IODEFV2_BUSINESS_IMPACT_TYPE_BREACH_PRIVACY = 2,
        IODEFV2_BUSINESS_IMPACT_TYPE_BREACH_CREDENTIAL = 3,
        IODEFV2_BUSINESS_IMPACT_TYPE_LOSS_OF_INTEGRITY = 4,
        IODEFV2_BUSINESS_IMPACT_TYPE_LOSS_OF_SERVICE = 5,
        IODEFV2_BUSINESS_IMPACT_TYPE_THEFT_FINANCIAL = 6,
        IODEFV2_BUSINESS_IMPACT_TYPE_THEFT_SERVICE = 7,
        IODEFV2_BUSINESS_IMPACT_TYPE_DEGRADED_REPUTATION = 8,
        IODEFV2_BUSINESS_IMPACT_TYPE_ASSET_DAMAGE = 9,
        IODEFV2_BUSINESS_IMPACT_TYPE_DAMAGED_SYSTEM = 10,
        IODEFV2_BUSINESS_IMPACT_TYPE_LEGAL = 11,
        IODEFV2_BUSINESS_IMPACT_TYPE_EXTORTION = 12,
        IODEFV2_BUSINESS_IMPACT_TYPE_UNKNOWN = 13,
        IODEFV2_BUSINESS_IMPACT_TYPE_EXT_VALUE = 14,
} iodefv2_business_impact_type_t;
iodefv2_business_impact_type_t iodefv2_business_impact_type_to_numeric(const char *name);
const char *iodefv2_business_impact_type_to_string(iodefv2_business_impact_type_t val);

        
typedef enum {
        IODEFV2_BUSINESS_IMPACT_SEVERITY_ERROR = -1,
        IODEFV2_BUSINESS_IMPACT_SEVERITY_LOW = 1,
        IODEFV2_BUSINESS_IMPACT_SEVERITY_MEDIUM = 2,
        IODEFV2_BUSINESS_IMPACT_SEVERITY_HIGH = 3,
        IODEFV2_BUSINESS_IMPACT_SEVERITY_NONE = 4,
        IODEFV2_BUSINESS_IMPACT_SEVERITY_UNKNOWN = 5,
        IODEFV2_BUSINESS_IMPACT_SEVERITY_EXT_VALUE = 6,
} iodefv2_business_impact_severity_t;
iodefv2_business_impact_severity_t iodefv2_business_impact_severity_to_numeric(const char *name);
const char *iodefv2_business_impact_severity_to_string(iodefv2_business_impact_severity_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *ext_severity;
 *         iodefv2_business_impact_type_t type;
 *         OPTIONAL_INT(iodefv2_business_impact_severity_t, severity);
 *         libiodefv2_string_t *ext_type;
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_business_impact_t, 39);
 */

typedef struct iodefv2_business_impact iodefv2_business_impact_t;


int iodefv2_business_impact_new(iodefv2_business_impact_t **ret);
int iodefv2_business_impact_copy(const iodefv2_business_impact_t *src, iodefv2_business_impact_t *dst);
int iodefv2_business_impact_clone(iodefv2_business_impact_t *src, iodefv2_business_impact_t **dst);
int iodefv2_business_impact_compare(const iodefv2_business_impact_t *obj1, const iodefv2_business_impact_t *obj2);


iodefv2_business_impact_t *iodefv2_business_impact_ref(iodefv2_business_impact_t *business_impact);

#ifndef SWIG

int _iodefv2_business_impact_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_business_impact_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_business_impact_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_business_impact_destroy(iodefv2_business_impact_t *ptr);




libiodefv2_string_t *iodefv2_business_impact_get_ext_severity(iodefv2_business_impact_t *ptr);

void iodefv2_business_impact_set_ext_severity(iodefv2_business_impact_t *ptr, libiodefv2_string_t *ext_severity);
int iodefv2_business_impact_new_ext_severity(iodefv2_business_impact_t *ptr, libiodefv2_string_t **ret);



iodefv2_business_impact_type_t iodefv2_business_impact_get_type(iodefv2_business_impact_t *ptr);

void iodefv2_business_impact_set_type(iodefv2_business_impact_t *ptr, iodefv2_business_impact_type_t type);
int iodefv2_business_impact_new_type(iodefv2_business_impact_t *ptr, iodefv2_business_impact_type_t **ret);



void iodefv2_business_impact_unset_severity(iodefv2_business_impact_t *ptr);
iodefv2_business_impact_severity_t *iodefv2_business_impact_get_severity(iodefv2_business_impact_t *ptr);

void iodefv2_business_impact_set_severity(iodefv2_business_impact_t *ptr, iodefv2_business_impact_severity_t severity);
int iodefv2_business_impact_new_severity(iodefv2_business_impact_t *ptr, iodefv2_business_impact_severity_t **ret);



libiodefv2_string_t *iodefv2_business_impact_get_ext_type(iodefv2_business_impact_t *ptr);

void iodefv2_business_impact_set_ext_type(iodefv2_business_impact_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_business_impact_new_ext_type(iodefv2_business_impact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_business_impact_get_description(iodefv2_business_impact_t *ptr);

void iodefv2_business_impact_set_description(iodefv2_business_impact_t *ptr, libiodefv2_string_t *description);
int iodefv2_business_impact_new_description(iodefv2_business_impact_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *uid_ref;
 *         libiodefv2_string_t *version;
 *         libiodefv2_string_t *euid_ref;
 * } TYPE_ID(iodefv2_indicator_reference_t, 40);
 */

typedef struct iodefv2_indicator_reference iodefv2_indicator_reference_t;


int iodefv2_indicator_reference_new(iodefv2_indicator_reference_t **ret);
int iodefv2_indicator_reference_copy(const iodefv2_indicator_reference_t *src, iodefv2_indicator_reference_t *dst);
int iodefv2_indicator_reference_clone(iodefv2_indicator_reference_t *src, iodefv2_indicator_reference_t **dst);
int iodefv2_indicator_reference_compare(const iodefv2_indicator_reference_t *obj1, const iodefv2_indicator_reference_t *obj2);


iodefv2_indicator_reference_t *iodefv2_indicator_reference_ref(iodefv2_indicator_reference_t *indicator_reference);

#ifndef SWIG

int _iodefv2_indicator_reference_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_indicator_reference_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_indicator_reference_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_indicator_reference_destroy(iodefv2_indicator_reference_t *ptr);




libiodefv2_string_t *iodefv2_indicator_reference_get_uid_ref(iodefv2_indicator_reference_t *ptr);

void iodefv2_indicator_reference_set_uid_ref(iodefv2_indicator_reference_t *ptr, libiodefv2_string_t *uid_ref);
int iodefv2_indicator_reference_new_uid_ref(iodefv2_indicator_reference_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_indicator_reference_get_version(iodefv2_indicator_reference_t *ptr);

void iodefv2_indicator_reference_set_version(iodefv2_indicator_reference_t *ptr, libiodefv2_string_t *version);
int iodefv2_indicator_reference_new_version(iodefv2_indicator_reference_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_indicator_reference_get_euid_ref(iodefv2_indicator_reference_t *ptr);

void iodefv2_indicator_reference_set_euid_ref(iodefv2_indicator_reference_t *ptr, libiodefv2_string_t *euid_ref);
int iodefv2_indicator_reference_new_euid_ref(iodefv2_indicator_reference_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_EMAIL_TYPE_ERROR = -1,
        IODEFV2_EMAIL_TYPE_DIRECT = 1,
        IODEFV2_EMAIL_TYPE_HOTLINE = 2,
        IODEFV2_EMAIL_TYPE_EXT_VALUE = 3,
} iodefv2_email_type_t;
iodefv2_email_type_t iodefv2_email_type_to_numeric(const char *name);
const char *iodefv2_email_type_to_string(iodefv2_email_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_email_type_t, type);
 *         libiodefv2_string_t *ext_type;
 *        REQUIRED(libiodefv2_string_t, *email_to);
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_email_t, 42);
 */

typedef struct iodefv2_email iodefv2_email_t;


int iodefv2_email_new(iodefv2_email_t **ret);
int iodefv2_email_copy(const iodefv2_email_t *src, iodefv2_email_t *dst);
int iodefv2_email_clone(iodefv2_email_t *src, iodefv2_email_t **dst);
int iodefv2_email_compare(const iodefv2_email_t *obj1, const iodefv2_email_t *obj2);


iodefv2_email_t *iodefv2_email_ref(iodefv2_email_t *email);

#ifndef SWIG

int _iodefv2_email_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_email_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_email_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_email_destroy(iodefv2_email_t *ptr);




void iodefv2_email_unset_type(iodefv2_email_t *ptr);
iodefv2_email_type_t *iodefv2_email_get_type(iodefv2_email_t *ptr);

void iodefv2_email_set_type(iodefv2_email_t *ptr, iodefv2_email_type_t type);
int iodefv2_email_new_type(iodefv2_email_t *ptr, iodefv2_email_type_t **ret);



libiodefv2_string_t *iodefv2_email_get_ext_type(iodefv2_email_t *ptr);

void iodefv2_email_set_ext_type(iodefv2_email_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_email_new_ext_type(iodefv2_email_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_email_get_email_to(iodefv2_email_t *ptr);

void iodefv2_email_set_email_to(iodefv2_email_t *ptr, libiodefv2_string_t *email_to);
int iodefv2_email_new_email_to(iodefv2_email_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_email_get_description(iodefv2_email_t *ptr);

void iodefv2_email_set_description(iodefv2_email_t *ptr, libiodefv2_string_t *description);
int iodefv2_email_new_description(iodefv2_email_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_INTENDED_IMPACT_TYPE_ERROR = -1,
        IODEFV2_INTENDED_IMPACT_TYPE_BREACH_PROPRIETARY = 1,
        IODEFV2_INTENDED_IMPACT_TYPE_BREACH_PRIVACY = 2,
        IODEFV2_INTENDED_IMPACT_TYPE_BREACH_CREDENTIAL = 3,
        IODEFV2_INTENDED_IMPACT_TYPE_LOSS_OF_INTEGRITY = 4,
        IODEFV2_INTENDED_IMPACT_TYPE_LOSS_OF_SERVICE = 5,
        IODEFV2_INTENDED_IMPACT_TYPE_THEFT_FINANCIAL = 6,
        IODEFV2_INTENDED_IMPACT_TYPE_THEFT_SERVICE = 7,
        IODEFV2_INTENDED_IMPACT_TYPE_DEGRADED_REPUTATION = 8,
        IODEFV2_INTENDED_IMPACT_TYPE_ASSET_DAMAGE = 9,
        IODEFV2_INTENDED_IMPACT_TYPE_DAMAGED_SYSTEM = 10,
        IODEFV2_INTENDED_IMPACT_TYPE_LEGAL = 11,
        IODEFV2_INTENDED_IMPACT_TYPE_EXTORTION = 12,
        IODEFV2_INTENDED_IMPACT_TYPE_UNKNOWN = 13,
        IODEFV2_INTENDED_IMPACT_TYPE_EXT_VALUE = 14,
} iodefv2_intended_impact_type_t;
iodefv2_intended_impact_type_t iodefv2_intended_impact_type_to_numeric(const char *name);
const char *iodefv2_intended_impact_type_to_string(iodefv2_intended_impact_type_t val);

        
typedef enum {
        IODEFV2_INTENDED_IMPACT_SEVERITY_ERROR = -1,
        IODEFV2_INTENDED_IMPACT_SEVERITY_LOW = 1,
        IODEFV2_INTENDED_IMPACT_SEVERITY_MEDIUM = 2,
        IODEFV2_INTENDED_IMPACT_SEVERITY_HIGH = 3,
        IODEFV2_INTENDED_IMPACT_SEVERITY_NONE = 4,
        IODEFV2_INTENDED_IMPACT_SEVERITY_UNKNOWN = 5,
        IODEFV2_INTENDED_IMPACT_SEVERITY_EXT_VALUE = 6,
} iodefv2_intended_impact_severity_t;
iodefv2_intended_impact_severity_t iodefv2_intended_impact_severity_to_numeric(const char *name);
const char *iodefv2_intended_impact_severity_to_string(iodefv2_intended_impact_severity_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *ext_severity;
 *         iodefv2_intended_impact_type_t type;
 *         OPTIONAL_INT(iodefv2_intended_impact_severity_t, severity);
 *         libiodefv2_string_t *ext_type;
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_intended_impact_t, 45);
 */

typedef struct iodefv2_intended_impact iodefv2_intended_impact_t;


int iodefv2_intended_impact_new(iodefv2_intended_impact_t **ret);
int iodefv2_intended_impact_copy(const iodefv2_intended_impact_t *src, iodefv2_intended_impact_t *dst);
int iodefv2_intended_impact_clone(iodefv2_intended_impact_t *src, iodefv2_intended_impact_t **dst);
int iodefv2_intended_impact_compare(const iodefv2_intended_impact_t *obj1, const iodefv2_intended_impact_t *obj2);


iodefv2_intended_impact_t *iodefv2_intended_impact_ref(iodefv2_intended_impact_t *intended_impact);

#ifndef SWIG

int _iodefv2_intended_impact_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_intended_impact_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_intended_impact_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_intended_impact_destroy(iodefv2_intended_impact_t *ptr);




libiodefv2_string_t *iodefv2_intended_impact_get_ext_severity(iodefv2_intended_impact_t *ptr);

void iodefv2_intended_impact_set_ext_severity(iodefv2_intended_impact_t *ptr, libiodefv2_string_t *ext_severity);
int iodefv2_intended_impact_new_ext_severity(iodefv2_intended_impact_t *ptr, libiodefv2_string_t **ret);



iodefv2_intended_impact_type_t iodefv2_intended_impact_get_type(iodefv2_intended_impact_t *ptr);

void iodefv2_intended_impact_set_type(iodefv2_intended_impact_t *ptr, iodefv2_intended_impact_type_t type);
int iodefv2_intended_impact_new_type(iodefv2_intended_impact_t *ptr, iodefv2_intended_impact_type_t **ret);



void iodefv2_intended_impact_unset_severity(iodefv2_intended_impact_t *ptr);
iodefv2_intended_impact_severity_t *iodefv2_intended_impact_get_severity(iodefv2_intended_impact_t *ptr);

void iodefv2_intended_impact_set_severity(iodefv2_intended_impact_t *ptr, iodefv2_intended_impact_severity_t severity);
int iodefv2_intended_impact_new_severity(iodefv2_intended_impact_t *ptr, iodefv2_intended_impact_severity_t **ret);



libiodefv2_string_t *iodefv2_intended_impact_get_ext_type(iodefv2_intended_impact_t *ptr);

void iodefv2_intended_impact_set_ext_type(iodefv2_intended_impact_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_intended_impact_new_ext_type(iodefv2_intended_impact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_intended_impact_get_description(iodefv2_intended_impact_t *ptr);

void iodefv2_intended_impact_set_description(iodefv2_intended_impact_t *ptr, libiodefv2_string_t *description);
int iodefv2_intended_impact_new_description(iodefv2_intended_impact_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_ERROR = -1,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_PUBLIC = 1,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_PARTNER = 2,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_PRIVATE = 4,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_DEFAULT = 5,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_WHITE = 6,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_GREEN = 7,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_AMBER = 8,
        IODEFV2_ADDITIONAL_DATA_RESTRICTION_RED = 9,
} iodefv2_additional_data_restriction_t;
iodefv2_additional_data_restriction_t iodefv2_additional_data_restriction_to_numeric(const char *name);
const char *iodefv2_additional_data_restriction_to_string(iodefv2_additional_data_restriction_t val);

        
typedef enum {
        IODEFV2_ADDITIONAL_DATA_TYPE_ERROR = -1,
        IODEFV2_ADDITIONAL_DATA_TYPE_BOOLEAN = 1,
        IODEFV2_ADDITIONAL_DATA_TYPE_BYTE = 2,
        IODEFV2_ADDITIONAL_DATA_TYPE_CHARACTER = 3,
        IODEFV2_ADDITIONAL_DATA_TYPE_DATE_TIME = 4,
        IODEFV2_ADDITIONAL_DATA_TYPE_INTEGER = 5,
        IODEFV2_ADDITIONAL_DATA_TYPE_PORTLIST = 6,
        IODEFV2_ADDITIONAL_DATA_TYPE_REAL = 7,
        IODEFV2_ADDITIONAL_DATA_TYPE_STRING = 8,
        IODEFV2_ADDITIONAL_DATA_TYPE_FILE = 9,
        IODEFV2_ADDITIONAL_DATA_TYPE_FRAME = 10,
        IODEFV2_ADDITIONAL_DATA_TYPE_PACKET = 11,
        IODEFV2_ADDITIONAL_DATA_TYPE_IPV4_PACKET = 12,
        IODEFV2_ADDITIONAL_DATA_TYPE_IPV6_PACKET = 13,
        IODEFV2_ADDITIONAL_DATA_TYPE_PATH = 14,
        IODEFV2_ADDITIONAL_DATA_TYPE_URL = 15,
        IODEFV2_ADDITIONAL_DATA_TYPE_CSV = 16,
        IODEFV2_ADDITIONAL_DATA_TYPE_WINREG = 17,
        IODEFV2_ADDITIONAL_DATA_TYPE_XML = 18,
        IODEFV2_ADDITIONAL_DATA_TYPE_BYTES = 19,
        IODEFV2_ADDITIONAL_DATA_TYPE_NTPSTAMP = 20,
        IODEFV2_ADDITIONAL_DATA_TYPE_EXT_VALUE = 21,
} iodefv2_additional_data_type_t;
iodefv2_additional_data_type_t iodefv2_additional_data_type_to_numeric(const char *name);
const char *iodefv2_additional_data_type_to_string(iodefv2_additional_data_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *       IGNORED(libiodefv2_bool_t, _type_is_set);
 *         OPTIONAL_INT(iodefv2_additional_data_restriction_t, restriction);
 *         libiodefv2_string_t *name;
 *         iodefv2_additional_data_type_t type;
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *formatid;
 *         libiodefv2_string_t *observable_id;
 *         libiodefv2_string_t *meaning;
 *         libiodefv2_string_t *ext_dtype;
 *        REQUIRED(iodefv2_data_t, *data);
 * } TYPE_ID(iodefv2_additional_data_t, 48);
 */

typedef struct iodefv2_additional_data iodefv2_additional_data_t;


int iodefv2_additional_data_new(iodefv2_additional_data_t **ret);
int iodefv2_additional_data_copy(const iodefv2_additional_data_t *src, iodefv2_additional_data_t *dst);
int iodefv2_additional_data_clone(iodefv2_additional_data_t *src, iodefv2_additional_data_t **dst);
int iodefv2_additional_data_compare(const iodefv2_additional_data_t *obj1, const iodefv2_additional_data_t *obj2);


iodefv2_additional_data_t *iodefv2_additional_data_ref(iodefv2_additional_data_t *additional_data);

#ifndef SWIG

int _iodefv2_additional_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_additional_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_additional_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_additional_data_destroy(iodefv2_additional_data_t *ptr);




void iodefv2_additional_data_unset_restriction(iodefv2_additional_data_t *ptr);
iodefv2_additional_data_restriction_t *iodefv2_additional_data_get_restriction(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_restriction(iodefv2_additional_data_t *ptr, iodefv2_additional_data_restriction_t restriction);
int iodefv2_additional_data_new_restriction(iodefv2_additional_data_t *ptr, iodefv2_additional_data_restriction_t **ret);



libiodefv2_string_t *iodefv2_additional_data_get_name(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_name(iodefv2_additional_data_t *ptr, libiodefv2_string_t *name);
int iodefv2_additional_data_new_name(iodefv2_additional_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_additional_data_type_t iodefv2_additional_data_get_type(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_type(iodefv2_additional_data_t *ptr, iodefv2_additional_data_type_t type);
int iodefv2_additional_data_new_type(iodefv2_additional_data_t *ptr, iodefv2_additional_data_type_t **ret);



libiodefv2_string_t *iodefv2_additional_data_get_ext_restriction(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_ext_restriction(iodefv2_additional_data_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_additional_data_new_ext_restriction(iodefv2_additional_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_additional_data_get_formatid(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_formatid(iodefv2_additional_data_t *ptr, libiodefv2_string_t *formatid);
int iodefv2_additional_data_new_formatid(iodefv2_additional_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_additional_data_get_observable_id(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_observable_id(iodefv2_additional_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_additional_data_new_observable_id(iodefv2_additional_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_additional_data_get_meaning(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_meaning(iodefv2_additional_data_t *ptr, libiodefv2_string_t *meaning);
int iodefv2_additional_data_new_meaning(iodefv2_additional_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_additional_data_get_ext_dtype(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_ext_dtype(iodefv2_additional_data_t *ptr, libiodefv2_string_t *ext_dtype);
int iodefv2_additional_data_new_ext_dtype(iodefv2_additional_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_data_t *iodefv2_additional_data_get_data(iodefv2_additional_data_t *ptr);

void iodefv2_additional_data_set_data(iodefv2_additional_data_t *ptr, iodefv2_data_t *data);
int iodefv2_additional_data_new_data(iodefv2_additional_data_t *ptr, iodefv2_data_t **ret);



        
typedef enum {
        IODEFV2_COUNTER_UNIT_ERROR = -1,
        IODEFV2_COUNTER_UNIT_BYTE = 1,
        IODEFV2_COUNTER_UNIT_MBIT = 2,
        IODEFV2_COUNTER_UNIT_PACKET = 3,
        IODEFV2_COUNTER_UNIT_FLOW = 4,
        IODEFV2_COUNTER_UNIT_SESSION = 5,
        IODEFV2_COUNTER_UNIT_ALERT = 6,
        IODEFV2_COUNTER_UNIT_MESSAGE = 7,
        IODEFV2_COUNTER_UNIT_EVENT = 8,
        IODEFV2_COUNTER_UNIT_HOST = 9,
        IODEFV2_COUNTER_UNIT_SITE = 10,
        IODEFV2_COUNTER_UNIT_ORGANIZATION = 11,
        IODEFV2_COUNTER_UNIT_EXT_VALUE = 12,
} iodefv2_counter_unit_t;
iodefv2_counter_unit_t iodefv2_counter_unit_to_numeric(const char *name);
const char *iodefv2_counter_unit_to_string(iodefv2_counter_unit_t val);

        
typedef enum {
        IODEFV2_COUNTER_DURATION_ERROR = -1,
} iodefv2_counter_duration_t;
iodefv2_counter_duration_t iodefv2_counter_duration_to_numeric(const char *name);
const char *iodefv2_counter_duration_to_string(iodefv2_counter_duration_t val);

        
typedef enum {
        IODEFV2_COUNTER_TYPE_ERROR = -1,
        IODEFV2_COUNTER_TYPE_COUNT = 1,
        IODEFV2_COUNTER_TYPE_PEAK = 2,
        IODEFV2_COUNTER_TYPE_AVERAGE = 3,
        IODEFV2_COUNTER_TYPE_EXT_VALUE = 4,
} iodefv2_counter_type_t;
iodefv2_counter_type_t iodefv2_counter_type_to_numeric(const char *name);
const char *iodefv2_counter_type_to_string(iodefv2_counter_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *meaning;
 *         iodefv2_counter_unit_t unit;
 *         libiodefv2_string_t *ext_type;
 *         OPTIONAL_INT(iodefv2_counter_duration_t, duration);
 *         libiodefv2_string_t *ext_unit;
 *         iodefv2_counter_type_t type;
 *         libiodefv2_string_t *ext_duration;
 * } TYPE_ID(iodefv2_counter_t, 52);
 */

typedef struct iodefv2_counter iodefv2_counter_t;


int iodefv2_counter_new(iodefv2_counter_t **ret);
int iodefv2_counter_copy(const iodefv2_counter_t *src, iodefv2_counter_t *dst);
int iodefv2_counter_clone(iodefv2_counter_t *src, iodefv2_counter_t **dst);
int iodefv2_counter_compare(const iodefv2_counter_t *obj1, const iodefv2_counter_t *obj2);


iodefv2_counter_t *iodefv2_counter_ref(iodefv2_counter_t *counter);

#ifndef SWIG

int _iodefv2_counter_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_counter_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_counter_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_counter_destroy(iodefv2_counter_t *ptr);




libiodefv2_string_t *iodefv2_counter_get_meaning(iodefv2_counter_t *ptr);

void iodefv2_counter_set_meaning(iodefv2_counter_t *ptr, libiodefv2_string_t *meaning);
int iodefv2_counter_new_meaning(iodefv2_counter_t *ptr, libiodefv2_string_t **ret);



iodefv2_counter_unit_t iodefv2_counter_get_unit(iodefv2_counter_t *ptr);

void iodefv2_counter_set_unit(iodefv2_counter_t *ptr, iodefv2_counter_unit_t unit);
int iodefv2_counter_new_unit(iodefv2_counter_t *ptr, iodefv2_counter_unit_t **ret);



libiodefv2_string_t *iodefv2_counter_get_ext_type(iodefv2_counter_t *ptr);

void iodefv2_counter_set_ext_type(iodefv2_counter_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_counter_new_ext_type(iodefv2_counter_t *ptr, libiodefv2_string_t **ret);



void iodefv2_counter_unset_duration(iodefv2_counter_t *ptr);
iodefv2_counter_duration_t *iodefv2_counter_get_duration(iodefv2_counter_t *ptr);

void iodefv2_counter_set_duration(iodefv2_counter_t *ptr, iodefv2_counter_duration_t duration);
int iodefv2_counter_new_duration(iodefv2_counter_t *ptr, iodefv2_counter_duration_t **ret);



libiodefv2_string_t *iodefv2_counter_get_ext_unit(iodefv2_counter_t *ptr);

void iodefv2_counter_set_ext_unit(iodefv2_counter_t *ptr, libiodefv2_string_t *ext_unit);
int iodefv2_counter_new_ext_unit(iodefv2_counter_t *ptr, libiodefv2_string_t **ret);



iodefv2_counter_type_t iodefv2_counter_get_type(iodefv2_counter_t *ptr);

void iodefv2_counter_set_type(iodefv2_counter_t *ptr, iodefv2_counter_type_t type);
int iodefv2_counter_new_type(iodefv2_counter_t *ptr, iodefv2_counter_type_t **ret);



libiodefv2_string_t *iodefv2_counter_get_ext_duration(iodefv2_counter_t *ptr);

void iodefv2_counter_set_ext_duration(iodefv2_counter_t *ptr, libiodefv2_string_t *ext_duration);
int iodefv2_counter_new_ext_duration(iodefv2_counter_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_MONETARY_IMPACT_SEVERITY_ERROR = -1,
        IODEFV2_MONETARY_IMPACT_SEVERITY_LOW = 1,
        IODEFV2_MONETARY_IMPACT_SEVERITY_MEDIUM = 2,
        IODEFV2_MONETARY_IMPACT_SEVERITY_HIGH = 3,
} iodefv2_monetary_impact_severity_t;
iodefv2_monetary_impact_severity_t iodefv2_monetary_impact_severity_to_numeric(const char *name);
const char *iodefv2_monetary_impact_severity_to_string(iodefv2_monetary_impact_severity_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libiodefv2_string_t, *currency);
 *         OPTIONAL_INT(iodefv2_monetary_impact_severity_t, severity);
 * } TYPE_ID(iodefv2_monetary_impact_t, 54);
 */

typedef struct iodefv2_monetary_impact iodefv2_monetary_impact_t;


int iodefv2_monetary_impact_new(iodefv2_monetary_impact_t **ret);
int iodefv2_monetary_impact_copy(const iodefv2_monetary_impact_t *src, iodefv2_monetary_impact_t *dst);
int iodefv2_monetary_impact_clone(iodefv2_monetary_impact_t *src, iodefv2_monetary_impact_t **dst);
int iodefv2_monetary_impact_compare(const iodefv2_monetary_impact_t *obj1, const iodefv2_monetary_impact_t *obj2);


iodefv2_monetary_impact_t *iodefv2_monetary_impact_ref(iodefv2_monetary_impact_t *monetary_impact);

#ifndef SWIG

int _iodefv2_monetary_impact_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_monetary_impact_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_monetary_impact_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_monetary_impact_destroy(iodefv2_monetary_impact_t *ptr);




libiodefv2_string_t *iodefv2_monetary_impact_get_currency(iodefv2_monetary_impact_t *ptr);

void iodefv2_monetary_impact_set_currency(iodefv2_monetary_impact_t *ptr, libiodefv2_string_t *currency);
int iodefv2_monetary_impact_new_currency(iodefv2_monetary_impact_t *ptr, libiodefv2_string_t **ret);



void iodefv2_monetary_impact_unset_severity(iodefv2_monetary_impact_t *ptr);
iodefv2_monetary_impact_severity_t *iodefv2_monetary_impact_get_severity(iodefv2_monetary_impact_t *ptr);

void iodefv2_monetary_impact_set_severity(iodefv2_monetary_impact_t *ptr, iodefv2_monetary_impact_severity_t severity);
int iodefv2_monetary_impact_new_severity(iodefv2_monetary_impact_t *ptr, iodefv2_monetary_impact_severity_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *url;
 *         libiodefv2_string_t *iana_service;
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_service_name_t, 55);
 */

typedef struct iodefv2_service_name iodefv2_service_name_t;


int iodefv2_service_name_new(iodefv2_service_name_t **ret);
int iodefv2_service_name_copy(const iodefv2_service_name_t *src, iodefv2_service_name_t *dst);
int iodefv2_service_name_clone(iodefv2_service_name_t *src, iodefv2_service_name_t **dst);
int iodefv2_service_name_compare(const iodefv2_service_name_t *obj1, const iodefv2_service_name_t *obj2);


iodefv2_service_name_t *iodefv2_service_name_ref(iodefv2_service_name_t *service_name);

#ifndef SWIG

int _iodefv2_service_name_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_service_name_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_service_name_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_service_name_destroy(iodefv2_service_name_t *ptr);




libiodefv2_string_t *iodefv2_service_name_get_url(iodefv2_service_name_t *ptr);

void iodefv2_service_name_set_url(iodefv2_service_name_t *ptr, libiodefv2_string_t *url);
int iodefv2_service_name_new_url(iodefv2_service_name_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_service_name_get_iana_service(iodefv2_service_name_t *ptr);

void iodefv2_service_name_set_iana_service(iodefv2_service_name_t *ptr, libiodefv2_string_t *iana_service);
int iodefv2_service_name_new_iana_service(iodefv2_service_name_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_service_name_get_description(iodefv2_service_name_t *ptr);

void iodefv2_service_name_set_description(iodefv2_service_name_t *ptr, libiodefv2_string_t *description);
int iodefv2_service_name_new_description(iodefv2_service_name_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *version;
 *         libiodefv2_string_t *name;
 * } TYPE_ID(iodefv2_indicator_id_t, 56);
 */

typedef struct iodefv2_indicator_id iodefv2_indicator_id_t;


int iodefv2_indicator_id_new(iodefv2_indicator_id_t **ret);
int iodefv2_indicator_id_copy(const iodefv2_indicator_id_t *src, iodefv2_indicator_id_t *dst);
int iodefv2_indicator_id_clone(iodefv2_indicator_id_t *src, iodefv2_indicator_id_t **dst);
int iodefv2_indicator_id_compare(const iodefv2_indicator_id_t *obj1, const iodefv2_indicator_id_t *obj2);


iodefv2_indicator_id_t *iodefv2_indicator_id_ref(iodefv2_indicator_id_t *indicator_id);

#ifndef SWIG

int _iodefv2_indicator_id_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_indicator_id_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_indicator_id_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_indicator_id_destroy(iodefv2_indicator_id_t *ptr);




libiodefv2_string_t *iodefv2_indicator_id_get_version(iodefv2_indicator_id_t *ptr);

void iodefv2_indicator_id_set_version(iodefv2_indicator_id_t *ptr, libiodefv2_string_t *version);
int iodefv2_indicator_id_new_version(iodefv2_indicator_id_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_indicator_id_get_name(iodefv2_indicator_id_t *ptr);

void iodefv2_indicator_id_set_name(iodefv2_indicator_id_t *ptr, libiodefv2_string_t *name);
int iodefv2_indicator_id_new_name(iodefv2_indicator_id_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *signature;
 * } TYPE_ID(iodefv2_signature_data_t, 57);
 */

typedef struct iodefv2_signature_data iodefv2_signature_data_t;


int iodefv2_signature_data_new(iodefv2_signature_data_t **ret);
int iodefv2_signature_data_copy(const iodefv2_signature_data_t *src, iodefv2_signature_data_t *dst);
int iodefv2_signature_data_clone(iodefv2_signature_data_t *src, iodefv2_signature_data_t **dst);
int iodefv2_signature_data_compare(const iodefv2_signature_data_t *obj1, const iodefv2_signature_data_t *obj2);


iodefv2_signature_data_t *iodefv2_signature_data_ref(iodefv2_signature_data_t *signature_data);

#ifndef SWIG

int _iodefv2_signature_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_signature_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_signature_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_signature_data_destroy(iodefv2_signature_data_t *ptr);




libiodefv2_string_t *iodefv2_signature_data_get_signature(iodefv2_signature_data_t *ptr);

void iodefv2_signature_data_set_signature(iodefv2_signature_data_t *ptr, libiodefv2_string_t *signature);
int iodefv2_signature_data_new_signature(iodefv2_signature_data_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_ADDRESS_CATEGORY_ERROR = -1,
        IODEFV2_ADDRESS_CATEGORY_ASN = 1,
        IODEFV2_ADDRESS_CATEGORY_ATM = 2,
        IODEFV2_ADDRESS_CATEGORY_E_MAIL = 3,
        IODEFV2_ADDRESS_CATEGORY_IPV4_ADDR = 4,
        IODEFV2_ADDRESS_CATEGORY_IPV4_NET = 5,
        IODEFV2_ADDRESS_CATEGORY_IPV4_NET_MASK = 6,
        IODEFV2_ADDRESS_CATEGORY_IPV6_ADDR = 7,
        IODEFV2_ADDRESS_CATEGORY_IPV6_NET = 8,
        IODEFV2_ADDRESS_CATEGORY_IPV6_NET_MASK = 9,
        IODEFV2_ADDRESS_CATEGORY_MAC = 10,
        IODEFV2_ADDRESS_CATEGORY_EXT_VALUE = 11,
} iodefv2_address_category_t;
iodefv2_address_category_t iodefv2_address_category_to_numeric(const char *name);
const char *iodefv2_address_category_to_string(iodefv2_address_category_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         iodefv2_address_category_t category;
 *         libiodefv2_string_t *vlan_name;
 *         libiodefv2_string_t *ext_category;
 *         libiodefv2_string_t *vlan_num;
 *         libiodefv2_string_t *observable_id;
 * } TYPE_ID(iodefv2_address_t, 59);
 */

typedef struct iodefv2_address iodefv2_address_t;


int iodefv2_address_new(iodefv2_address_t **ret);
int iodefv2_address_copy(const iodefv2_address_t *src, iodefv2_address_t *dst);
int iodefv2_address_clone(iodefv2_address_t *src, iodefv2_address_t **dst);
int iodefv2_address_compare(const iodefv2_address_t *obj1, const iodefv2_address_t *obj2);


iodefv2_address_t *iodefv2_address_ref(iodefv2_address_t *address);

#ifndef SWIG

int _iodefv2_address_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_address_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_address_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_address_destroy(iodefv2_address_t *ptr);




iodefv2_address_category_t iodefv2_address_get_category(iodefv2_address_t *ptr);

void iodefv2_address_set_category(iodefv2_address_t *ptr, iodefv2_address_category_t category);
int iodefv2_address_new_category(iodefv2_address_t *ptr, iodefv2_address_category_t **ret);



libiodefv2_string_t *iodefv2_address_get_vlan_name(iodefv2_address_t *ptr);

void iodefv2_address_set_vlan_name(iodefv2_address_t *ptr, libiodefv2_string_t *vlan_name);
int iodefv2_address_new_vlan_name(iodefv2_address_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_address_get_ext_category(iodefv2_address_t *ptr);

void iodefv2_address_set_ext_category(iodefv2_address_t *ptr, libiodefv2_string_t *ext_category);
int iodefv2_address_new_ext_category(iodefv2_address_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_address_get_vlan_num(iodefv2_address_t *ptr);

void iodefv2_address_set_vlan_num(iodefv2_address_t *ptr, libiodefv2_string_t *vlan_num);
int iodefv2_address_new_vlan_num(iodefv2_address_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_address_get_observable_id(iodefv2_address_t *ptr);

void iodefv2_address_set_observable_id(iodefv2_address_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_address_new_observable_id(iodefv2_address_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 * } TYPE_ID(iodefv2_application_header_t, 60);
 */

typedef struct iodefv2_application_header iodefv2_application_header_t;


int iodefv2_application_header_new(iodefv2_application_header_t **ret);
int iodefv2_application_header_copy(const iodefv2_application_header_t *src, iodefv2_application_header_t *dst);
int iodefv2_application_header_clone(iodefv2_application_header_t *src, iodefv2_application_header_t **dst);
int iodefv2_application_header_compare(const iodefv2_application_header_t *obj1, const iodefv2_application_header_t *obj2);


iodefv2_application_header_t *iodefv2_application_header_ref(iodefv2_application_header_t *application_header);

#ifndef SWIG

int _iodefv2_application_header_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_application_header_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_application_header_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_application_header_destroy(iodefv2_application_header_t *ptr);



iodefv2_additional_data_t *iodefv2_application_header_get_next_additional_data(iodefv2_application_header_t *application_header, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_application_header_set_additional_data(iodefv2_application_header_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_application_header_new_additional_data(iodefv2_application_header_t *ptr, iodefv2_additional_data_t **ret, int pos);



        
typedef enum {
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_ERROR = -1,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_PUBLIC = 1,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_PARTNER = 2,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_PRIVATE = 4,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_DEFAULT = 5,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_WHITE = 6,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_GREEN = 7,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_AMBER = 8,
        IODEFV2_CERTIFICATE_DATA_RESTRICTION_RED = 9,
} iodefv2_certificate_data_restriction_t;
iodefv2_certificate_data_restriction_t iodefv2_certificate_data_restriction_to_numeric(const char *name);
const char *iodefv2_certificate_data_restriction_to_string(iodefv2_certificate_data_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_certificate_data_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(certificate_list, iodefv2_certificate_t);
 * } TYPE_ID(iodefv2_certificate_data_t, 62);
 */

typedef struct iodefv2_certificate_data iodefv2_certificate_data_t;


int iodefv2_certificate_data_new(iodefv2_certificate_data_t **ret);
int iodefv2_certificate_data_copy(const iodefv2_certificate_data_t *src, iodefv2_certificate_data_t *dst);
int iodefv2_certificate_data_clone(iodefv2_certificate_data_t *src, iodefv2_certificate_data_t **dst);
int iodefv2_certificate_data_compare(const iodefv2_certificate_data_t *obj1, const iodefv2_certificate_data_t *obj2);


iodefv2_certificate_data_t *iodefv2_certificate_data_ref(iodefv2_certificate_data_t *certificate_data);

#ifndef SWIG

int _iodefv2_certificate_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_certificate_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_certificate_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_certificate_data_destroy(iodefv2_certificate_data_t *ptr);




void iodefv2_certificate_data_unset_restriction(iodefv2_certificate_data_t *ptr);
iodefv2_certificate_data_restriction_t *iodefv2_certificate_data_get_restriction(iodefv2_certificate_data_t *ptr);

void iodefv2_certificate_data_set_restriction(iodefv2_certificate_data_t *ptr, iodefv2_certificate_data_restriction_t restriction);
int iodefv2_certificate_data_new_restriction(iodefv2_certificate_data_t *ptr, iodefv2_certificate_data_restriction_t **ret);



libiodefv2_string_t *iodefv2_certificate_data_get_ext_restriction(iodefv2_certificate_data_t *ptr);

void iodefv2_certificate_data_set_ext_restriction(iodefv2_certificate_data_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_certificate_data_new_ext_restriction(iodefv2_certificate_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_certificate_data_get_observable_id(iodefv2_certificate_data_t *ptr);

void iodefv2_certificate_data_set_observable_id(iodefv2_certificate_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_certificate_data_new_observable_id(iodefv2_certificate_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_certificate_t *iodefv2_certificate_data_get_next_certificate(iodefv2_certificate_data_t *certificate_data, iodefv2_certificate_t *certificate_cur);
void iodefv2_certificate_data_set_certificate(iodefv2_certificate_data_t *ptr, iodefv2_certificate_t *object, int pos);
int iodefv2_certificate_data_new_certificate(iodefv2_certificate_data_t *ptr, iodefv2_certificate_t **ret, int pos);



        
typedef enum {
        IODEFV2_THREAT_ACTOR_RESTRICTION_ERROR = -1,
        IODEFV2_THREAT_ACTOR_RESTRICTION_PUBLIC = 1,
        IODEFV2_THREAT_ACTOR_RESTRICTION_PARTNER = 2,
        IODEFV2_THREAT_ACTOR_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_THREAT_ACTOR_RESTRICTION_PRIVATE = 4,
        IODEFV2_THREAT_ACTOR_RESTRICTION_DEFAULT = 5,
        IODEFV2_THREAT_ACTOR_RESTRICTION_WHITE = 6,
        IODEFV2_THREAT_ACTOR_RESTRICTION_GREEN = 7,
        IODEFV2_THREAT_ACTOR_RESTRICTION_AMBER = 8,
        IODEFV2_THREAT_ACTOR_RESTRICTION_RED = 9,
} iodefv2_threat_actor_restriction_t;
iodefv2_threat_actor_restriction_t iodefv2_threat_actor_restriction_to_numeric(const char *name);
const char *iodefv2_threat_actor_restriction_to_string(iodefv2_threat_actor_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_threat_actor_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *url;
 *         libiodefv2_string_t *threat_actor_id;
 *         libiodefv2_string_t *description;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 * } TYPE_ID(iodefv2_threat_actor_t, 64);
 */

typedef struct iodefv2_threat_actor iodefv2_threat_actor_t;


int iodefv2_threat_actor_new(iodefv2_threat_actor_t **ret);
int iodefv2_threat_actor_copy(const iodefv2_threat_actor_t *src, iodefv2_threat_actor_t *dst);
int iodefv2_threat_actor_clone(iodefv2_threat_actor_t *src, iodefv2_threat_actor_t **dst);
int iodefv2_threat_actor_compare(const iodefv2_threat_actor_t *obj1, const iodefv2_threat_actor_t *obj2);


iodefv2_threat_actor_t *iodefv2_threat_actor_ref(iodefv2_threat_actor_t *threat_actor);

#ifndef SWIG

int _iodefv2_threat_actor_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_threat_actor_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_threat_actor_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_threat_actor_destroy(iodefv2_threat_actor_t *ptr);




void iodefv2_threat_actor_unset_restriction(iodefv2_threat_actor_t *ptr);
iodefv2_threat_actor_restriction_t *iodefv2_threat_actor_get_restriction(iodefv2_threat_actor_t *ptr);

void iodefv2_threat_actor_set_restriction(iodefv2_threat_actor_t *ptr, iodefv2_threat_actor_restriction_t restriction);
int iodefv2_threat_actor_new_restriction(iodefv2_threat_actor_t *ptr, iodefv2_threat_actor_restriction_t **ret);



libiodefv2_string_t *iodefv2_threat_actor_get_ext_restriction(iodefv2_threat_actor_t *ptr);

void iodefv2_threat_actor_set_ext_restriction(iodefv2_threat_actor_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_threat_actor_new_ext_restriction(iodefv2_threat_actor_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_threat_actor_get_url(iodefv2_threat_actor_t *ptr);

void iodefv2_threat_actor_set_url(iodefv2_threat_actor_t *ptr, libiodefv2_string_t *url);
int iodefv2_threat_actor_new_url(iodefv2_threat_actor_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_threat_actor_get_threat_actor_id(iodefv2_threat_actor_t *ptr);

void iodefv2_threat_actor_set_threat_actor_id(iodefv2_threat_actor_t *ptr, libiodefv2_string_t *threat_actor_id);
int iodefv2_threat_actor_new_threat_actor_id(iodefv2_threat_actor_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_threat_actor_get_description(iodefv2_threat_actor_t *ptr);

void iodefv2_threat_actor_set_description(iodefv2_threat_actor_t *ptr, libiodefv2_string_t *description);
int iodefv2_threat_actor_new_description(iodefv2_threat_actor_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_threat_actor_get_next_additional_data(iodefv2_threat_actor_t *threat_actor, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_threat_actor_set_additional_data(iodefv2_threat_actor_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_threat_actor_new_additional_data(iodefv2_threat_actor_t *ptr, iodefv2_additional_data_t **ret, int pos);



        
typedef enum {
        IODEFV2_METHOD_RESTRICTION_ERROR = -1,
        IODEFV2_METHOD_RESTRICTION_PUBLIC = 1,
        IODEFV2_METHOD_RESTRICTION_PARTNER = 2,
        IODEFV2_METHOD_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_METHOD_RESTRICTION_PRIVATE = 4,
        IODEFV2_METHOD_RESTRICTION_DEFAULT = 5,
        IODEFV2_METHOD_RESTRICTION_WHITE = 6,
        IODEFV2_METHOD_RESTRICTION_GREEN = 7,
        IODEFV2_METHOD_RESTRICTION_AMBER = 8,
        IODEFV2_METHOD_RESTRICTION_RED = 9,
} iodefv2_method_restriction_t;
iodefv2_method_restriction_t iodefv2_method_restriction_to_numeric(const char *name);
const char *iodefv2_method_restriction_to_string(iodefv2_method_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_method_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *description;
 *        LISTED_OBJECT(reference_list, iodefv2_reference_t);
 * } TYPE_ID(iodefv2_method_t, 66);
 */

typedef struct iodefv2_method iodefv2_method_t;


int iodefv2_method_new(iodefv2_method_t **ret);
int iodefv2_method_copy(const iodefv2_method_t *src, iodefv2_method_t *dst);
int iodefv2_method_clone(iodefv2_method_t *src, iodefv2_method_t **dst);
int iodefv2_method_compare(const iodefv2_method_t *obj1, const iodefv2_method_t *obj2);


iodefv2_method_t *iodefv2_method_ref(iodefv2_method_t *method);

#ifndef SWIG

int _iodefv2_method_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_method_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_method_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_method_destroy(iodefv2_method_t *ptr);




void iodefv2_method_unset_restriction(iodefv2_method_t *ptr);
iodefv2_method_restriction_t *iodefv2_method_get_restriction(iodefv2_method_t *ptr);

void iodefv2_method_set_restriction(iodefv2_method_t *ptr, iodefv2_method_restriction_t restriction);
int iodefv2_method_new_restriction(iodefv2_method_t *ptr, iodefv2_method_restriction_t **ret);



libiodefv2_string_t *iodefv2_method_get_ext_restriction(iodefv2_method_t *ptr);

void iodefv2_method_set_ext_restriction(iodefv2_method_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_method_new_ext_restriction(iodefv2_method_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_method_get_next_additional_data(iodefv2_method_t *method, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_method_set_additional_data(iodefv2_method_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_method_new_additional_data(iodefv2_method_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_method_get_description(iodefv2_method_t *ptr);

void iodefv2_method_set_description(iodefv2_method_t *ptr, libiodefv2_string_t *description);
int iodefv2_method_new_description(iodefv2_method_t *ptr, libiodefv2_string_t **ret);


iodefv2_reference_t *iodefv2_method_get_next_reference(iodefv2_method_t *method, iodefv2_reference_t *reference_cur);
void iodefv2_method_set_reference(iodefv2_method_t *ptr, iodefv2_reference_t *object, int pos);
int iodefv2_method_new_reference(iodefv2_method_t *ptr, iodefv2_reference_t **ret, int pos);



        
typedef enum {
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_ERROR = -1,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_PUBLIC = 1,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_PARTNER = 2,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_PRIVATE = 4,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_DEFAULT = 5,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_WHITE = 6,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_GREEN = 7,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_AMBER = 8,
        IODEFV2_ALTERNATIVE_ID_RESTRICTION_RED = 9,
} iodefv2_alternative_id_restriction_t;
iodefv2_alternative_id_restriction_t iodefv2_alternative_id_restriction_to_numeric(const char *name);
const char *iodefv2_alternative_id_restriction_to_string(iodefv2_alternative_id_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_alternative_id_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *        LISTED_OBJECT(incident_id_list, iodefv2_incident_id_t);
 * } TYPE_ID(iodefv2_alternative_id_t, 68);
 */

typedef struct iodefv2_alternative_id iodefv2_alternative_id_t;


int iodefv2_alternative_id_new(iodefv2_alternative_id_t **ret);
int iodefv2_alternative_id_copy(const iodefv2_alternative_id_t *src, iodefv2_alternative_id_t *dst);
int iodefv2_alternative_id_clone(iodefv2_alternative_id_t *src, iodefv2_alternative_id_t **dst);
int iodefv2_alternative_id_compare(const iodefv2_alternative_id_t *obj1, const iodefv2_alternative_id_t *obj2);


iodefv2_alternative_id_t *iodefv2_alternative_id_ref(iodefv2_alternative_id_t *alternative_id);

#ifndef SWIG

int _iodefv2_alternative_id_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_alternative_id_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_alternative_id_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_alternative_id_destroy(iodefv2_alternative_id_t *ptr);




void iodefv2_alternative_id_unset_restriction(iodefv2_alternative_id_t *ptr);
iodefv2_alternative_id_restriction_t *iodefv2_alternative_id_get_restriction(iodefv2_alternative_id_t *ptr);

void iodefv2_alternative_id_set_restriction(iodefv2_alternative_id_t *ptr, iodefv2_alternative_id_restriction_t restriction);
int iodefv2_alternative_id_new_restriction(iodefv2_alternative_id_t *ptr, iodefv2_alternative_id_restriction_t **ret);



libiodefv2_string_t *iodefv2_alternative_id_get_ext_restriction(iodefv2_alternative_id_t *ptr);

void iodefv2_alternative_id_set_ext_restriction(iodefv2_alternative_id_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_alternative_id_new_ext_restriction(iodefv2_alternative_id_t *ptr, libiodefv2_string_t **ret);


iodefv2_incident_id_t *iodefv2_alternative_id_get_next_incident_id(iodefv2_alternative_id_t *alternative_id, iodefv2_incident_id_t *incident_id_cur);
void iodefv2_alternative_id_set_incident_id(iodefv2_alternative_id_t *ptr, iodefv2_incident_id_t *object, int pos);
int iodefv2_alternative_id_new_incident_id(iodefv2_alternative_id_t *ptr, iodefv2_incident_id_t **ret, int pos);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *url;
 *         libiodefv2_string_t *description;
 *         iodefv2_software_reference_t *software_reference;
 * } TYPE_ID(iodefv2_software_t, 69);
 */

typedef struct iodefv2_software iodefv2_software_t;


int iodefv2_software_new(iodefv2_software_t **ret);
int iodefv2_software_copy(const iodefv2_software_t *src, iodefv2_software_t *dst);
int iodefv2_software_clone(iodefv2_software_t *src, iodefv2_software_t **dst);
int iodefv2_software_compare(const iodefv2_software_t *obj1, const iodefv2_software_t *obj2);


iodefv2_software_t *iodefv2_software_ref(iodefv2_software_t *software);

#ifndef SWIG

int _iodefv2_software_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_software_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_software_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_software_destroy(iodefv2_software_t *ptr);




libiodefv2_string_t *iodefv2_software_get_url(iodefv2_software_t *ptr);

void iodefv2_software_set_url(iodefv2_software_t *ptr, libiodefv2_string_t *url);
int iodefv2_software_new_url(iodefv2_software_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_software_get_description(iodefv2_software_t *ptr);

void iodefv2_software_set_description(iodefv2_software_t *ptr, libiodefv2_string_t *description);
int iodefv2_software_new_description(iodefv2_software_t *ptr, libiodefv2_string_t **ret);



iodefv2_software_reference_t *iodefv2_software_get_software_reference(iodefv2_software_t *ptr);

void iodefv2_software_set_software_reference(iodefv2_software_t *ptr, iodefv2_software_reference_t *software_reference);
int iodefv2_software_new_software_reference(iodefv2_software_t *ptr, iodefv2_software_reference_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(address_list, iodefv2_address_t);
 *        REQUIRED(libiodefv2_string_t, *server);
 * } TYPE_ID(iodefv2_nameservers_t, 70);
 */

typedef struct iodefv2_nameservers iodefv2_nameservers_t;


int iodefv2_nameservers_new(iodefv2_nameservers_t **ret);
int iodefv2_nameservers_copy(const iodefv2_nameservers_t *src, iodefv2_nameservers_t *dst);
int iodefv2_nameservers_clone(iodefv2_nameservers_t *src, iodefv2_nameservers_t **dst);
int iodefv2_nameservers_compare(const iodefv2_nameservers_t *obj1, const iodefv2_nameservers_t *obj2);


iodefv2_nameservers_t *iodefv2_nameservers_ref(iodefv2_nameservers_t *nameservers);

#ifndef SWIG

int _iodefv2_nameservers_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_nameservers_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_nameservers_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_nameservers_destroy(iodefv2_nameservers_t *ptr);



iodefv2_address_t *iodefv2_nameservers_get_next_address(iodefv2_nameservers_t *nameservers, iodefv2_address_t *address_cur);
void iodefv2_nameservers_set_address(iodefv2_nameservers_t *ptr, iodefv2_address_t *object, int pos);
int iodefv2_nameservers_new_address(iodefv2_nameservers_t *ptr, iodefv2_address_t **ret, int pos);



libiodefv2_string_t *iodefv2_nameservers_get_server(iodefv2_nameservers_t *ptr);

void iodefv2_nameservers_set_server(iodefv2_nameservers_t *ptr, libiodefv2_string_t *server);
int iodefv2_nameservers_new_server(iodefv2_nameservers_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(key_list, iodefv2_key_t);
 * } TYPE_ID(iodefv2_windows_registry_keys_modified_t, 71);
 */

typedef struct iodefv2_windows_registry_keys_modified iodefv2_windows_registry_keys_modified_t;


int iodefv2_windows_registry_keys_modified_new(iodefv2_windows_registry_keys_modified_t **ret);
int iodefv2_windows_registry_keys_modified_copy(const iodefv2_windows_registry_keys_modified_t *src, iodefv2_windows_registry_keys_modified_t *dst);
int iodefv2_windows_registry_keys_modified_clone(iodefv2_windows_registry_keys_modified_t *src, iodefv2_windows_registry_keys_modified_t **dst);
int iodefv2_windows_registry_keys_modified_compare(const iodefv2_windows_registry_keys_modified_t *obj1, const iodefv2_windows_registry_keys_modified_t *obj2);


iodefv2_windows_registry_keys_modified_t *iodefv2_windows_registry_keys_modified_ref(iodefv2_windows_registry_keys_modified_t *windows_registry_keys_modified);

#ifndef SWIG

int _iodefv2_windows_registry_keys_modified_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_windows_registry_keys_modified_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_windows_registry_keys_modified_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_windows_registry_keys_modified_destroy(iodefv2_windows_registry_keys_modified_t *ptr);




libiodefv2_string_t *iodefv2_windows_registry_keys_modified_get_observable_id(iodefv2_windows_registry_keys_modified_t *ptr);

void iodefv2_windows_registry_keys_modified_set_observable_id(iodefv2_windows_registry_keys_modified_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_windows_registry_keys_modified_new_observable_id(iodefv2_windows_registry_keys_modified_t *ptr, libiodefv2_string_t **ret);


iodefv2_key_t *iodefv2_windows_registry_keys_modified_get_next_key(iodefv2_windows_registry_keys_modified_t *windows_registry_keys_modified, iodefv2_key_t *key_cur);
void iodefv2_windows_registry_keys_modified_set_key(iodefv2_windows_registry_keys_modified_t *ptr, iodefv2_key_t *object, int pos);
int iodefv2_windows_registry_keys_modified_new_key(iodefv2_windows_registry_keys_modified_t *ptr, iodefv2_key_t **ret, int pos);



        
typedef enum {
        IODEFV2_CAMPAIGN_RESTRICTION_ERROR = -1,
        IODEFV2_CAMPAIGN_RESTRICTION_PUBLIC = 1,
        IODEFV2_CAMPAIGN_RESTRICTION_PARTNER = 2,
        IODEFV2_CAMPAIGN_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_CAMPAIGN_RESTRICTION_PRIVATE = 4,
        IODEFV2_CAMPAIGN_RESTRICTION_DEFAULT = 5,
        IODEFV2_CAMPAIGN_RESTRICTION_WHITE = 6,
        IODEFV2_CAMPAIGN_RESTRICTION_GREEN = 7,
        IODEFV2_CAMPAIGN_RESTRICTION_AMBER = 8,
        IODEFV2_CAMPAIGN_RESTRICTION_RED = 9,
} iodefv2_campaign_restriction_t;
iodefv2_campaign_restriction_t iodefv2_campaign_restriction_to_numeric(const char *name);
const char *iodefv2_campaign_restriction_to_string(iodefv2_campaign_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_campaign_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *url;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *description;
 *         libiodefv2_string_t *campaign_id;
 * } TYPE_ID(iodefv2_campaign_t, 73);
 */

typedef struct iodefv2_campaign iodefv2_campaign_t;


int iodefv2_campaign_new(iodefv2_campaign_t **ret);
int iodefv2_campaign_copy(const iodefv2_campaign_t *src, iodefv2_campaign_t *dst);
int iodefv2_campaign_clone(iodefv2_campaign_t *src, iodefv2_campaign_t **dst);
int iodefv2_campaign_compare(const iodefv2_campaign_t *obj1, const iodefv2_campaign_t *obj2);


iodefv2_campaign_t *iodefv2_campaign_ref(iodefv2_campaign_t *campaign);

#ifndef SWIG

int _iodefv2_campaign_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_campaign_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_campaign_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_campaign_destroy(iodefv2_campaign_t *ptr);




void iodefv2_campaign_unset_restriction(iodefv2_campaign_t *ptr);
iodefv2_campaign_restriction_t *iodefv2_campaign_get_restriction(iodefv2_campaign_t *ptr);

void iodefv2_campaign_set_restriction(iodefv2_campaign_t *ptr, iodefv2_campaign_restriction_t restriction);
int iodefv2_campaign_new_restriction(iodefv2_campaign_t *ptr, iodefv2_campaign_restriction_t **ret);



libiodefv2_string_t *iodefv2_campaign_get_ext_restriction(iodefv2_campaign_t *ptr);

void iodefv2_campaign_set_ext_restriction(iodefv2_campaign_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_campaign_new_ext_restriction(iodefv2_campaign_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_campaign_get_url(iodefv2_campaign_t *ptr);

void iodefv2_campaign_set_url(iodefv2_campaign_t *ptr, libiodefv2_string_t *url);
int iodefv2_campaign_new_url(iodefv2_campaign_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_campaign_get_next_additional_data(iodefv2_campaign_t *campaign, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_campaign_set_additional_data(iodefv2_campaign_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_campaign_new_additional_data(iodefv2_campaign_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_campaign_get_description(iodefv2_campaign_t *ptr);

void iodefv2_campaign_set_description(iodefv2_campaign_t *ptr, libiodefv2_string_t *description);
int iodefv2_campaign_new_description(iodefv2_campaign_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_campaign_get_campaign_id(iodefv2_campaign_t *ptr);

void iodefv2_campaign_set_campaign_id(iodefv2_campaign_t *ptr, libiodefv2_string_t *campaign_id);
int iodefv2_campaign_new_campaign_id(iodefv2_campaign_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_ASSESSMENT_RESTRICTION_ERROR = -1,
        IODEFV2_ASSESSMENT_RESTRICTION_PUBLIC = 1,
        IODEFV2_ASSESSMENT_RESTRICTION_PARTNER = 2,
        IODEFV2_ASSESSMENT_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_ASSESSMENT_RESTRICTION_PRIVATE = 4,
        IODEFV2_ASSESSMENT_RESTRICTION_DEFAULT = 5,
        IODEFV2_ASSESSMENT_RESTRICTION_WHITE = 6,
        IODEFV2_ASSESSMENT_RESTRICTION_GREEN = 7,
        IODEFV2_ASSESSMENT_RESTRICTION_AMBER = 8,
        IODEFV2_ASSESSMENT_RESTRICTION_RED = 9,
} iodefv2_assessment_restriction_t;
iodefv2_assessment_restriction_t iodefv2_assessment_restriction_to_numeric(const char *name);
const char *iodefv2_assessment_restriction_to_string(iodefv2_assessment_restriction_t val);

        
typedef enum {
        IODEFV2_ASSESSMENT_OCCURRENCE_ERROR = -1,
        IODEFV2_ASSESSMENT_OCCURRENCE_ACTUAL = 1,
        IODEFV2_ASSESSMENT_OCCURRENCE_POTENTIAL = 2,
} iodefv2_assessment_occurrence_t;
iodefv2_assessment_occurrence_t iodefv2_assessment_occurrence_to_numeric(const char *name);
const char *iodefv2_assessment_occurrence_to_string(iodefv2_assessment_occurrence_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_assessment_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         OPTIONAL_INT(iodefv2_assessment_occurrence_t, occurrence);
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(intended_impact_list, iodefv2_intended_impact_t);
 *         iodefv2_confidence_t *confidence;
 *        LISTED_OBJECT(time_impact_list, iodefv2_time_impact_t);
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *        LISTED_OBJECT(monetary_impact_list, iodefv2_monetary_impact_t);
 *        LISTED_OBJECT(counter_list, iodefv2_counter_t);
 *        LISTED_OBJECT(system_impact_list, iodefv2_system_impact_t);
 *        LISTED_OBJECT(business_impact_list, iodefv2_business_impact_t);
 *         libiodefv2_string_t *incident_category;
 *         libiodefv2_string_t *mitigating_factor;
 *         libiodefv2_string_t *cause;
 * } TYPE_ID(iodefv2_assessment_t, 76);
 */

typedef struct iodefv2_assessment iodefv2_assessment_t;


int iodefv2_assessment_new(iodefv2_assessment_t **ret);
int iodefv2_assessment_copy(const iodefv2_assessment_t *src, iodefv2_assessment_t *dst);
int iodefv2_assessment_clone(iodefv2_assessment_t *src, iodefv2_assessment_t **dst);
int iodefv2_assessment_compare(const iodefv2_assessment_t *obj1, const iodefv2_assessment_t *obj2);


iodefv2_assessment_t *iodefv2_assessment_ref(iodefv2_assessment_t *assessment);

#ifndef SWIG

int _iodefv2_assessment_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_assessment_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_assessment_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_assessment_destroy(iodefv2_assessment_t *ptr);




void iodefv2_assessment_unset_restriction(iodefv2_assessment_t *ptr);
iodefv2_assessment_restriction_t *iodefv2_assessment_get_restriction(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_restriction(iodefv2_assessment_t *ptr, iodefv2_assessment_restriction_t restriction);
int iodefv2_assessment_new_restriction(iodefv2_assessment_t *ptr, iodefv2_assessment_restriction_t **ret);



libiodefv2_string_t *iodefv2_assessment_get_ext_restriction(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_ext_restriction(iodefv2_assessment_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_assessment_new_ext_restriction(iodefv2_assessment_t *ptr, libiodefv2_string_t **ret);



void iodefv2_assessment_unset_occurrence(iodefv2_assessment_t *ptr);
iodefv2_assessment_occurrence_t *iodefv2_assessment_get_occurrence(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_occurrence(iodefv2_assessment_t *ptr, iodefv2_assessment_occurrence_t occurrence);
int iodefv2_assessment_new_occurrence(iodefv2_assessment_t *ptr, iodefv2_assessment_occurrence_t **ret);



libiodefv2_string_t *iodefv2_assessment_get_observable_id(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_observable_id(iodefv2_assessment_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_assessment_new_observable_id(iodefv2_assessment_t *ptr, libiodefv2_string_t **ret);


iodefv2_intended_impact_t *iodefv2_assessment_get_next_intended_impact(iodefv2_assessment_t *assessment, iodefv2_intended_impact_t *intended_impact_cur);
void iodefv2_assessment_set_intended_impact(iodefv2_assessment_t *ptr, iodefv2_intended_impact_t *object, int pos);
int iodefv2_assessment_new_intended_impact(iodefv2_assessment_t *ptr, iodefv2_intended_impact_t **ret, int pos);



iodefv2_confidence_t *iodefv2_assessment_get_confidence(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_confidence(iodefv2_assessment_t *ptr, iodefv2_confidence_t *confidence);
int iodefv2_assessment_new_confidence(iodefv2_assessment_t *ptr, iodefv2_confidence_t **ret);


iodefv2_time_impact_t *iodefv2_assessment_get_next_time_impact(iodefv2_assessment_t *assessment, iodefv2_time_impact_t *time_impact_cur);
void iodefv2_assessment_set_time_impact(iodefv2_assessment_t *ptr, iodefv2_time_impact_t *object, int pos);
int iodefv2_assessment_new_time_impact(iodefv2_assessment_t *ptr, iodefv2_time_impact_t **ret, int pos);


iodefv2_additional_data_t *iodefv2_assessment_get_next_additional_data(iodefv2_assessment_t *assessment, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_assessment_set_additional_data(iodefv2_assessment_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_assessment_new_additional_data(iodefv2_assessment_t *ptr, iodefv2_additional_data_t **ret, int pos);


iodefv2_monetary_impact_t *iodefv2_assessment_get_next_monetary_impact(iodefv2_assessment_t *assessment, iodefv2_monetary_impact_t *monetary_impact_cur);
void iodefv2_assessment_set_monetary_impact(iodefv2_assessment_t *ptr, iodefv2_monetary_impact_t *object, int pos);
int iodefv2_assessment_new_monetary_impact(iodefv2_assessment_t *ptr, iodefv2_monetary_impact_t **ret, int pos);


iodefv2_counter_t *iodefv2_assessment_get_next_counter(iodefv2_assessment_t *assessment, iodefv2_counter_t *counter_cur);
void iodefv2_assessment_set_counter(iodefv2_assessment_t *ptr, iodefv2_counter_t *object, int pos);
int iodefv2_assessment_new_counter(iodefv2_assessment_t *ptr, iodefv2_counter_t **ret, int pos);


iodefv2_system_impact_t *iodefv2_assessment_get_next_system_impact(iodefv2_assessment_t *assessment, iodefv2_system_impact_t *system_impact_cur);
void iodefv2_assessment_set_system_impact(iodefv2_assessment_t *ptr, iodefv2_system_impact_t *object, int pos);
int iodefv2_assessment_new_system_impact(iodefv2_assessment_t *ptr, iodefv2_system_impact_t **ret, int pos);


iodefv2_business_impact_t *iodefv2_assessment_get_next_business_impact(iodefv2_assessment_t *assessment, iodefv2_business_impact_t *business_impact_cur);
void iodefv2_assessment_set_business_impact(iodefv2_assessment_t *ptr, iodefv2_business_impact_t *object, int pos);
int iodefv2_assessment_new_business_impact(iodefv2_assessment_t *ptr, iodefv2_business_impact_t **ret, int pos);



libiodefv2_string_t *iodefv2_assessment_get_incident_category(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_incident_category(iodefv2_assessment_t *ptr, libiodefv2_string_t *incident_category);
int iodefv2_assessment_new_incident_category(iodefv2_assessment_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_assessment_get_mitigating_factor(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_mitigating_factor(iodefv2_assessment_t *ptr, libiodefv2_string_t *mitigating_factor);
int iodefv2_assessment_new_mitigating_factor(iodefv2_assessment_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_assessment_get_cause(iodefv2_assessment_t *ptr);

void iodefv2_assessment_set_cause(iodefv2_assessment_t *ptr, libiodefv2_string_t *cause);
int iodefv2_assessment_new_cause(iodefv2_assessment_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *url;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *description;
 *         libiodefv2_string_t *attack_phase_id;
 * } TYPE_ID(iodefv2_attack_phase_t, 77);
 */

typedef struct iodefv2_attack_phase iodefv2_attack_phase_t;


int iodefv2_attack_phase_new(iodefv2_attack_phase_t **ret);
int iodefv2_attack_phase_copy(const iodefv2_attack_phase_t *src, iodefv2_attack_phase_t *dst);
int iodefv2_attack_phase_clone(iodefv2_attack_phase_t *src, iodefv2_attack_phase_t **dst);
int iodefv2_attack_phase_compare(const iodefv2_attack_phase_t *obj1, const iodefv2_attack_phase_t *obj2);


iodefv2_attack_phase_t *iodefv2_attack_phase_ref(iodefv2_attack_phase_t *attack_phase);

#ifndef SWIG

int _iodefv2_attack_phase_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_attack_phase_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_attack_phase_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_attack_phase_destroy(iodefv2_attack_phase_t *ptr);




libiodefv2_string_t *iodefv2_attack_phase_get_url(iodefv2_attack_phase_t *ptr);

void iodefv2_attack_phase_set_url(iodefv2_attack_phase_t *ptr, libiodefv2_string_t *url);
int iodefv2_attack_phase_new_url(iodefv2_attack_phase_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_attack_phase_get_next_additional_data(iodefv2_attack_phase_t *attack_phase, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_attack_phase_set_additional_data(iodefv2_attack_phase_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_attack_phase_new_additional_data(iodefv2_attack_phase_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_attack_phase_get_description(iodefv2_attack_phase_t *ptr);

void iodefv2_attack_phase_set_description(iodefv2_attack_phase_t *ptr, libiodefv2_string_t *description);
int iodefv2_attack_phase_new_description(iodefv2_attack_phase_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_attack_phase_get_attack_phase_id(iodefv2_attack_phase_t *ptr);

void iodefv2_attack_phase_set_attack_phase_id(iodefv2_attack_phase_t *ptr, libiodefv2_string_t *attack_phase_id);
int iodefv2_attack_phase_new_attack_phase_id(iodefv2_attack_phase_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_CONTACT_RESTRICTION_ERROR = -1,
        IODEFV2_CONTACT_RESTRICTION_PUBLIC = 1,
        IODEFV2_CONTACT_RESTRICTION_PARTNER = 2,
        IODEFV2_CONTACT_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_CONTACT_RESTRICTION_PRIVATE = 4,
        IODEFV2_CONTACT_RESTRICTION_DEFAULT = 5,
        IODEFV2_CONTACT_RESTRICTION_WHITE = 6,
        IODEFV2_CONTACT_RESTRICTION_GREEN = 7,
        IODEFV2_CONTACT_RESTRICTION_AMBER = 8,
        IODEFV2_CONTACT_RESTRICTION_RED = 9,
} iodefv2_contact_restriction_t;
iodefv2_contact_restriction_t iodefv2_contact_restriction_to_numeric(const char *name);
const char *iodefv2_contact_restriction_to_string(iodefv2_contact_restriction_t val);

        
typedef enum {
        IODEFV2_CONTACT_ROLE_ERROR = -1,
        IODEFV2_CONTACT_ROLE_CREATOR = 1,
        IODEFV2_CONTACT_ROLE_ADMIN = 2,
        IODEFV2_CONTACT_ROLE_TECH = 3,
        IODEFV2_CONTACT_ROLE_IRT = 4,
        IODEFV2_CONTACT_ROLE_CC = 5,
        IODEFV2_CONTACT_ROLE_EXT_VALUE = 6,
} iodefv2_contact_role_t;
iodefv2_contact_role_t iodefv2_contact_role_to_numeric(const char *name);
const char *iodefv2_contact_role_to_string(iodefv2_contact_role_t val);

        
typedef enum {
        IODEFV2_CONTACT_TYPE_ERROR = -1,
        IODEFV2_CONTACT_TYPE_PERSON = 1,
        IODEFV2_CONTACT_TYPE_ORGANIZATION = 2,
        IODEFV2_CONTACT_TYPE_EXT_VALUE = 3,
} iodefv2_contact_type_t;
iodefv2_contact_type_t iodefv2_contact_type_to_numeric(const char *name);
const char *iodefv2_contact_type_to_string(iodefv2_contact_type_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_contact_restriction_t, restriction);
 *         iodefv2_contact_role_t role;
 *         libiodefv2_string_t *ext_type;
 *         libiodefv2_string_t *ext_role;
 *         libiodefv2_string_t *ext_restriction;
 *         iodefv2_contact_type_t type;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *contact_title;
 *         libiodefv2_string_t *description;
 *        LISTED_OBJECT(telephone_list, iodefv2_telephone_t);
 *        LISTED_OBJECT(email_list, iodefv2_email_t);
 *         libiodefv2_string_t *contact_name;
 *         libiodefv2_string_t *timezone;
 *        LISTED_OBJECT(postal_address_list, iodefv2_postal_address_t);
 *        LISTED_OBJECT(registry_handle_list, iodefv2_registry_handle_t);
 * } TYPE_ID(iodefv2_contact_t, 81);
 */

typedef struct iodefv2_contact iodefv2_contact_t;


int iodefv2_contact_new(iodefv2_contact_t **ret);
int iodefv2_contact_copy(const iodefv2_contact_t *src, iodefv2_contact_t *dst);
int iodefv2_contact_clone(iodefv2_contact_t *src, iodefv2_contact_t **dst);
int iodefv2_contact_compare(const iodefv2_contact_t *obj1, const iodefv2_contact_t *obj2);


iodefv2_contact_t *iodefv2_contact_ref(iodefv2_contact_t *contact);

#ifndef SWIG

int _iodefv2_contact_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_contact_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_contact_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_contact_destroy(iodefv2_contact_t *ptr);




void iodefv2_contact_unset_restriction(iodefv2_contact_t *ptr);
iodefv2_contact_restriction_t *iodefv2_contact_get_restriction(iodefv2_contact_t *ptr);

void iodefv2_contact_set_restriction(iodefv2_contact_t *ptr, iodefv2_contact_restriction_t restriction);
int iodefv2_contact_new_restriction(iodefv2_contact_t *ptr, iodefv2_contact_restriction_t **ret);



iodefv2_contact_role_t iodefv2_contact_get_role(iodefv2_contact_t *ptr);

void iodefv2_contact_set_role(iodefv2_contact_t *ptr, iodefv2_contact_role_t role);
int iodefv2_contact_new_role(iodefv2_contact_t *ptr, iodefv2_contact_role_t **ret);



libiodefv2_string_t *iodefv2_contact_get_ext_type(iodefv2_contact_t *ptr);

void iodefv2_contact_set_ext_type(iodefv2_contact_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_contact_new_ext_type(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_contact_get_ext_role(iodefv2_contact_t *ptr);

void iodefv2_contact_set_ext_role(iodefv2_contact_t *ptr, libiodefv2_string_t *ext_role);
int iodefv2_contact_new_ext_role(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_contact_get_ext_restriction(iodefv2_contact_t *ptr);

void iodefv2_contact_set_ext_restriction(iodefv2_contact_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_contact_new_ext_restriction(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);



iodefv2_contact_type_t iodefv2_contact_get_type(iodefv2_contact_t *ptr);

void iodefv2_contact_set_type(iodefv2_contact_t *ptr, iodefv2_contact_type_t type);
int iodefv2_contact_new_type(iodefv2_contact_t *ptr, iodefv2_contact_type_t **ret);


iodefv2_additional_data_t *iodefv2_contact_get_next_additional_data(iodefv2_contact_t *contact, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_contact_set_additional_data(iodefv2_contact_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_contact_new_additional_data(iodefv2_contact_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_contact_get_contact_title(iodefv2_contact_t *ptr);

void iodefv2_contact_set_contact_title(iodefv2_contact_t *ptr, libiodefv2_string_t *contact_title);
int iodefv2_contact_new_contact_title(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_contact_get_description(iodefv2_contact_t *ptr);

void iodefv2_contact_set_description(iodefv2_contact_t *ptr, libiodefv2_string_t *description);
int iodefv2_contact_new_description(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);


iodefv2_telephone_t *iodefv2_contact_get_next_telephone(iodefv2_contact_t *contact, iodefv2_telephone_t *telephone_cur);
void iodefv2_contact_set_telephone(iodefv2_contact_t *ptr, iodefv2_telephone_t *object, int pos);
int iodefv2_contact_new_telephone(iodefv2_contact_t *ptr, iodefv2_telephone_t **ret, int pos);


iodefv2_email_t *iodefv2_contact_get_next_email(iodefv2_contact_t *contact, iodefv2_email_t *email_cur);
void iodefv2_contact_set_email(iodefv2_contact_t *ptr, iodefv2_email_t *object, int pos);
int iodefv2_contact_new_email(iodefv2_contact_t *ptr, iodefv2_email_t **ret, int pos);



libiodefv2_string_t *iodefv2_contact_get_contact_name(iodefv2_contact_t *ptr);

void iodefv2_contact_set_contact_name(iodefv2_contact_t *ptr, libiodefv2_string_t *contact_name);
int iodefv2_contact_new_contact_name(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_contact_get_timezone(iodefv2_contact_t *ptr);

void iodefv2_contact_set_timezone(iodefv2_contact_t *ptr, libiodefv2_string_t *timezone);
int iodefv2_contact_new_timezone(iodefv2_contact_t *ptr, libiodefv2_string_t **ret);


iodefv2_postal_address_t *iodefv2_contact_get_next_postal_address(iodefv2_contact_t *contact, iodefv2_postal_address_t *postal_address_cur);
void iodefv2_contact_set_postal_address(iodefv2_contact_t *ptr, iodefv2_postal_address_t *object, int pos);
int iodefv2_contact_new_postal_address(iodefv2_contact_t *ptr, iodefv2_postal_address_t **ret, int pos);


iodefv2_registry_handle_t *iodefv2_contact_get_next_registry_handle(iodefv2_contact_t *contact, iodefv2_registry_handle_t *registry_handle_cur);
void iodefv2_contact_set_registry_handle(iodefv2_contact_t *ptr, iodefv2_registry_handle_t *object, int pos);
int iodefv2_contact_new_registry_handle(iodefv2_contact_t *ptr, iodefv2_registry_handle_t **ret, int pos);



        
typedef enum {
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_ERROR = -1,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_PUBLIC = 1,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_PARTNER = 2,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_PRIVATE = 4,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_DEFAULT = 5,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_WHITE = 6,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_GREEN = 7,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_AMBER = 8,
        IODEFV2_RELATED_ACTIVITY_RESTRICTION_RED = 9,
} iodefv2_related_activity_restriction_t;
iodefv2_related_activity_restriction_t iodefv2_related_activity_restriction_to_numeric(const char *name);
const char *iodefv2_related_activity_restriction_to_string(iodefv2_related_activity_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_related_activity_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_confidence_t *confidence;
 *         libiodefv2_string_t *description;
 *        LISTED_OBJECT(campaign_list, iodefv2_campaign_t);
 *         libiodefv2_string_t *url;
 *        LISTED_OBJECT(threat_actor_list, iodefv2_threat_actor_t);
 *        LISTED_OBJECT(indicator_id_list, iodefv2_indicator_id_t);
 *        LISTED_OBJECT(incident_id_list, iodefv2_incident_id_t);
 * } TYPE_ID(iodefv2_related_activity_t, 83);
 */

typedef struct iodefv2_related_activity iodefv2_related_activity_t;


int iodefv2_related_activity_new(iodefv2_related_activity_t **ret);
int iodefv2_related_activity_copy(const iodefv2_related_activity_t *src, iodefv2_related_activity_t *dst);
int iodefv2_related_activity_clone(iodefv2_related_activity_t *src, iodefv2_related_activity_t **dst);
int iodefv2_related_activity_compare(const iodefv2_related_activity_t *obj1, const iodefv2_related_activity_t *obj2);


iodefv2_related_activity_t *iodefv2_related_activity_ref(iodefv2_related_activity_t *related_activity);

#ifndef SWIG

int _iodefv2_related_activity_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_related_activity_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_related_activity_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_related_activity_destroy(iodefv2_related_activity_t *ptr);




void iodefv2_related_activity_unset_restriction(iodefv2_related_activity_t *ptr);
iodefv2_related_activity_restriction_t *iodefv2_related_activity_get_restriction(iodefv2_related_activity_t *ptr);

void iodefv2_related_activity_set_restriction(iodefv2_related_activity_t *ptr, iodefv2_related_activity_restriction_t restriction);
int iodefv2_related_activity_new_restriction(iodefv2_related_activity_t *ptr, iodefv2_related_activity_restriction_t **ret);



libiodefv2_string_t *iodefv2_related_activity_get_ext_restriction(iodefv2_related_activity_t *ptr);

void iodefv2_related_activity_set_ext_restriction(iodefv2_related_activity_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_related_activity_new_ext_restriction(iodefv2_related_activity_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_related_activity_get_next_additional_data(iodefv2_related_activity_t *related_activity, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_related_activity_set_additional_data(iodefv2_related_activity_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_related_activity_new_additional_data(iodefv2_related_activity_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_confidence_t *iodefv2_related_activity_get_confidence(iodefv2_related_activity_t *ptr);

void iodefv2_related_activity_set_confidence(iodefv2_related_activity_t *ptr, iodefv2_confidence_t *confidence);
int iodefv2_related_activity_new_confidence(iodefv2_related_activity_t *ptr, iodefv2_confidence_t **ret);



libiodefv2_string_t *iodefv2_related_activity_get_description(iodefv2_related_activity_t *ptr);

void iodefv2_related_activity_set_description(iodefv2_related_activity_t *ptr, libiodefv2_string_t *description);
int iodefv2_related_activity_new_description(iodefv2_related_activity_t *ptr, libiodefv2_string_t **ret);


iodefv2_campaign_t *iodefv2_related_activity_get_next_campaign(iodefv2_related_activity_t *related_activity, iodefv2_campaign_t *campaign_cur);
void iodefv2_related_activity_set_campaign(iodefv2_related_activity_t *ptr, iodefv2_campaign_t *object, int pos);
int iodefv2_related_activity_new_campaign(iodefv2_related_activity_t *ptr, iodefv2_campaign_t **ret, int pos);



libiodefv2_string_t *iodefv2_related_activity_get_url(iodefv2_related_activity_t *ptr);

void iodefv2_related_activity_set_url(iodefv2_related_activity_t *ptr, libiodefv2_string_t *url);
int iodefv2_related_activity_new_url(iodefv2_related_activity_t *ptr, libiodefv2_string_t **ret);


iodefv2_threat_actor_t *iodefv2_related_activity_get_next_threat_actor(iodefv2_related_activity_t *related_activity, iodefv2_threat_actor_t *threat_actor_cur);
void iodefv2_related_activity_set_threat_actor(iodefv2_related_activity_t *ptr, iodefv2_threat_actor_t *object, int pos);
int iodefv2_related_activity_new_threat_actor(iodefv2_related_activity_t *ptr, iodefv2_threat_actor_t **ret, int pos);


iodefv2_indicator_id_t *iodefv2_related_activity_get_next_indicator_id(iodefv2_related_activity_t *related_activity, iodefv2_indicator_id_t *indicator_id_cur);
void iodefv2_related_activity_set_indicator_id(iodefv2_related_activity_t *ptr, iodefv2_indicator_id_t *object, int pos);
int iodefv2_related_activity_new_indicator_id(iodefv2_related_activity_t *ptr, iodefv2_indicator_id_t **ret, int pos);


iodefv2_incident_id_t *iodefv2_related_activity_get_next_incident_id(iodefv2_related_activity_t *related_activity, iodefv2_incident_id_t *incident_id_cur);
void iodefv2_related_activity_set_incident_id(iodefv2_related_activity_t *ptr, iodefv2_incident_id_t *object, int pos);
int iodefv2_related_activity_new_incident_id(iodefv2_related_activity_t *ptr, iodefv2_incident_id_t **ret, int pos);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(contact_list, iodefv2_contact_t);
 *         libiodefv2_string_t *same_domain_contact;
 * } TYPE_ID(iodefv2_domain_contacts_t, 84);
 */

typedef struct iodefv2_domain_contacts iodefv2_domain_contacts_t;


int iodefv2_domain_contacts_new(iodefv2_domain_contacts_t **ret);
int iodefv2_domain_contacts_copy(const iodefv2_domain_contacts_t *src, iodefv2_domain_contacts_t *dst);
int iodefv2_domain_contacts_clone(iodefv2_domain_contacts_t *src, iodefv2_domain_contacts_t **dst);
int iodefv2_domain_contacts_compare(const iodefv2_domain_contacts_t *obj1, const iodefv2_domain_contacts_t *obj2);


iodefv2_domain_contacts_t *iodefv2_domain_contacts_ref(iodefv2_domain_contacts_t *domain_contacts);

#ifndef SWIG

int _iodefv2_domain_contacts_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_domain_contacts_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_domain_contacts_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_domain_contacts_destroy(iodefv2_domain_contacts_t *ptr);



iodefv2_contact_t *iodefv2_domain_contacts_get_next_contact(iodefv2_domain_contacts_t *domain_contacts, iodefv2_contact_t *contact_cur);
void iodefv2_domain_contacts_set_contact(iodefv2_domain_contacts_t *ptr, iodefv2_contact_t *object, int pos);
int iodefv2_domain_contacts_new_contact(iodefv2_domain_contacts_t *ptr, iodefv2_contact_t **ret, int pos);



libiodefv2_string_t *iodefv2_domain_contacts_get_same_domain_contact(iodefv2_domain_contacts_t *ptr);

void iodefv2_domain_contacts_set_same_domain_contact(iodefv2_domain_contacts_t *ptr, libiodefv2_string_t *same_domain_contact);
int iodefv2_domain_contacts_new_same_domain_contact(iodefv2_domain_contacts_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_HISTORY_ITEM_ACTION_ERROR = -1,
} iodefv2_history_item_action_t;
iodefv2_history_item_action_t iodefv2_history_item_action_to_numeric(const char *name);
const char *iodefv2_history_item_action_to_string(iodefv2_history_item_action_t val);

        
typedef enum {
        IODEFV2_HISTORY_ITEM_RESTRICTION_ERROR = -1,
        IODEFV2_HISTORY_ITEM_RESTRICTION_PUBLIC = 1,
        IODEFV2_HISTORY_ITEM_RESTRICTION_PARTNER = 2,
        IODEFV2_HISTORY_ITEM_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_HISTORY_ITEM_RESTRICTION_PRIVATE = 4,
        IODEFV2_HISTORY_ITEM_RESTRICTION_DEFAULT = 5,
        IODEFV2_HISTORY_ITEM_RESTRICTION_WHITE = 6,
        IODEFV2_HISTORY_ITEM_RESTRICTION_GREEN = 7,
        IODEFV2_HISTORY_ITEM_RESTRICTION_AMBER = 8,
        IODEFV2_HISTORY_ITEM_RESTRICTION_RED = 9,
} iodefv2_history_item_restriction_t;
iodefv2_history_item_restriction_t iodefv2_history_item_restriction_to_numeric(const char *name);
const char *iodefv2_history_item_restriction_to_string(iodefv2_history_item_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         iodefv2_history_item_action_t action;
 *         OPTIONAL_INT(iodefv2_history_item_restriction_t, restriction);
 *         libiodefv2_string_t *ext_action;
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_contact_t *contact;
 *         libiodefv2_string_t *defined_coa;
 *         libiodefv2_string_t *description;
 *         iodefv2_incident_id_t *incident_id;
 *        REQUIRED(iodefv2_time_t, *date_time);
 * } TYPE_ID(iodefv2_history_item_t, 87);
 */

typedef struct iodefv2_history_item iodefv2_history_item_t;


int iodefv2_history_item_new(iodefv2_history_item_t **ret);
int iodefv2_history_item_copy(const iodefv2_history_item_t *src, iodefv2_history_item_t *dst);
int iodefv2_history_item_clone(iodefv2_history_item_t *src, iodefv2_history_item_t **dst);
int iodefv2_history_item_compare(const iodefv2_history_item_t *obj1, const iodefv2_history_item_t *obj2);


iodefv2_history_item_t *iodefv2_history_item_ref(iodefv2_history_item_t *history_item);

#ifndef SWIG

int _iodefv2_history_item_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_history_item_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_history_item_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_history_item_destroy(iodefv2_history_item_t *ptr);




iodefv2_history_item_action_t iodefv2_history_item_get_action(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_action(iodefv2_history_item_t *ptr, iodefv2_history_item_action_t action);
int iodefv2_history_item_new_action(iodefv2_history_item_t *ptr, iodefv2_history_item_action_t **ret);



void iodefv2_history_item_unset_restriction(iodefv2_history_item_t *ptr);
iodefv2_history_item_restriction_t *iodefv2_history_item_get_restriction(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_restriction(iodefv2_history_item_t *ptr, iodefv2_history_item_restriction_t restriction);
int iodefv2_history_item_new_restriction(iodefv2_history_item_t *ptr, iodefv2_history_item_restriction_t **ret);



libiodefv2_string_t *iodefv2_history_item_get_ext_action(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_ext_action(iodefv2_history_item_t *ptr, libiodefv2_string_t *ext_action);
int iodefv2_history_item_new_ext_action(iodefv2_history_item_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_history_item_get_ext_restriction(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_ext_restriction(iodefv2_history_item_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_history_item_new_ext_restriction(iodefv2_history_item_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_history_item_get_observable_id(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_observable_id(iodefv2_history_item_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_history_item_new_observable_id(iodefv2_history_item_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_history_item_get_next_additional_data(iodefv2_history_item_t *history_item, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_history_item_set_additional_data(iodefv2_history_item_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_history_item_new_additional_data(iodefv2_history_item_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_contact_t *iodefv2_history_item_get_contact(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_contact(iodefv2_history_item_t *ptr, iodefv2_contact_t *contact);
int iodefv2_history_item_new_contact(iodefv2_history_item_t *ptr, iodefv2_contact_t **ret);



libiodefv2_string_t *iodefv2_history_item_get_defined_coa(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_defined_coa(iodefv2_history_item_t *ptr, libiodefv2_string_t *defined_coa);
int iodefv2_history_item_new_defined_coa(iodefv2_history_item_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_history_item_get_description(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_description(iodefv2_history_item_t *ptr, libiodefv2_string_t *description);
int iodefv2_history_item_new_description(iodefv2_history_item_t *ptr, libiodefv2_string_t **ret);



iodefv2_incident_id_t *iodefv2_history_item_get_incident_id(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_incident_id(iodefv2_history_item_t *ptr, iodefv2_incident_id_t *incident_id);
int iodefv2_history_item_new_incident_id(iodefv2_history_item_t *ptr, iodefv2_incident_id_t **ret);



iodefv2_time_t *iodefv2_history_item_get_date_time(iodefv2_history_item_t *ptr);

void iodefv2_history_item_set_date_time(iodefv2_history_item_t *ptr, iodefv2_time_t *date_time);
int iodefv2_history_item_new_date_time(iodefv2_history_item_t *ptr, iodefv2_time_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_software_t *software;
 * } TYPE_ID(iodefv2_fuzzy_hash_t, 88);
 */

typedef struct iodefv2_fuzzy_hash iodefv2_fuzzy_hash_t;


int iodefv2_fuzzy_hash_new(iodefv2_fuzzy_hash_t **ret);
int iodefv2_fuzzy_hash_copy(const iodefv2_fuzzy_hash_t *src, iodefv2_fuzzy_hash_t *dst);
int iodefv2_fuzzy_hash_clone(iodefv2_fuzzy_hash_t *src, iodefv2_fuzzy_hash_t **dst);
int iodefv2_fuzzy_hash_compare(const iodefv2_fuzzy_hash_t *obj1, const iodefv2_fuzzy_hash_t *obj2);


iodefv2_fuzzy_hash_t *iodefv2_fuzzy_hash_ref(iodefv2_fuzzy_hash_t *fuzzy_hash);

#ifndef SWIG

int _iodefv2_fuzzy_hash_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_fuzzy_hash_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_fuzzy_hash_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_fuzzy_hash_destroy(iodefv2_fuzzy_hash_t *ptr);



iodefv2_additional_data_t *iodefv2_fuzzy_hash_get_next_additional_data(iodefv2_fuzzy_hash_t *fuzzy_hash, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_fuzzy_hash_set_additional_data(iodefv2_fuzzy_hash_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_fuzzy_hash_new_additional_data(iodefv2_fuzzy_hash_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_software_t *iodefv2_fuzzy_hash_get_software(iodefv2_fuzzy_hash_t *ptr);

void iodefv2_fuzzy_hash_set_software(iodefv2_fuzzy_hash_t *ptr, iodefv2_software_t *software);
int iodefv2_fuzzy_hash_new_software(iodefv2_fuzzy_hash_t *ptr, iodefv2_software_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libiodefv2_string_t, *digest_value);
 *        REQUIRED(libiodefv2_string_t, *digest_method);
 *         libiodefv2_string_t *canonicalization_method;
 *         iodefv2_software_t *software;
 * } TYPE_ID(iodefv2_hash_t, 89);
 */

typedef struct iodefv2_hash iodefv2_hash_t;


int iodefv2_hash_new(iodefv2_hash_t **ret);
int iodefv2_hash_copy(const iodefv2_hash_t *src, iodefv2_hash_t *dst);
int iodefv2_hash_clone(iodefv2_hash_t *src, iodefv2_hash_t **dst);
int iodefv2_hash_compare(const iodefv2_hash_t *obj1, const iodefv2_hash_t *obj2);


iodefv2_hash_t *iodefv2_hash_ref(iodefv2_hash_t *hash);

#ifndef SWIG

int _iodefv2_hash_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_hash_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_hash_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_hash_destroy(iodefv2_hash_t *ptr);




libiodefv2_string_t *iodefv2_hash_get_digest_value(iodefv2_hash_t *ptr);

void iodefv2_hash_set_digest_value(iodefv2_hash_t *ptr, libiodefv2_string_t *digest_value);
int iodefv2_hash_new_digest_value(iodefv2_hash_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_hash_get_digest_method(iodefv2_hash_t *ptr);

void iodefv2_hash_set_digest_method(iodefv2_hash_t *ptr, libiodefv2_string_t *digest_method);
int iodefv2_hash_new_digest_method(iodefv2_hash_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_hash_get_canonicalization_method(iodefv2_hash_t *ptr);

void iodefv2_hash_set_canonicalization_method(iodefv2_hash_t *ptr, libiodefv2_string_t *canonicalization_method);
int iodefv2_hash_new_canonicalization_method(iodefv2_hash_t *ptr, libiodefv2_string_t **ret);



iodefv2_software_t *iodefv2_hash_get_software(iodefv2_hash_t *ptr);

void iodefv2_hash_set_software(iodefv2_hash_t *ptr, iodefv2_software_t *software);
int iodefv2_hash_new_software(iodefv2_hash_t *ptr, iodefv2_software_t **ret);



        
typedef enum {
        IODEFV2_DETECTION_PATTERN_RESTRICTION_ERROR = -1,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_PUBLIC = 1,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_PARTNER = 2,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_PRIVATE = 4,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_DEFAULT = 5,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_WHITE = 6,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_GREEN = 7,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_AMBER = 8,
        IODEFV2_DETECTION_PATTERN_RESTRICTION_RED = 9,
} iodefv2_detection_pattern_restriction_t;
iodefv2_detection_pattern_restriction_t iodefv2_detection_pattern_restriction_to_numeric(const char *name);
const char *iodefv2_detection_pattern_restriction_to_string(iodefv2_detection_pattern_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_detection_pattern_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *observable_id;
 *         libiodefv2_string_t *detection_configuration;
 *         libiodefv2_string_t *description;
 *        REQUIRED(iodefv2_software_t, *software);
 * } TYPE_ID(iodefv2_detection_pattern_t, 91);
 */

typedef struct iodefv2_detection_pattern iodefv2_detection_pattern_t;


int iodefv2_detection_pattern_new(iodefv2_detection_pattern_t **ret);
int iodefv2_detection_pattern_copy(const iodefv2_detection_pattern_t *src, iodefv2_detection_pattern_t *dst);
int iodefv2_detection_pattern_clone(iodefv2_detection_pattern_t *src, iodefv2_detection_pattern_t **dst);
int iodefv2_detection_pattern_compare(const iodefv2_detection_pattern_t *obj1, const iodefv2_detection_pattern_t *obj2);


iodefv2_detection_pattern_t *iodefv2_detection_pattern_ref(iodefv2_detection_pattern_t *detection_pattern);

#ifndef SWIG

int _iodefv2_detection_pattern_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_detection_pattern_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_detection_pattern_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_detection_pattern_destroy(iodefv2_detection_pattern_t *ptr);




void iodefv2_detection_pattern_unset_restriction(iodefv2_detection_pattern_t *ptr);
iodefv2_detection_pattern_restriction_t *iodefv2_detection_pattern_get_restriction(iodefv2_detection_pattern_t *ptr);

void iodefv2_detection_pattern_set_restriction(iodefv2_detection_pattern_t *ptr, iodefv2_detection_pattern_restriction_t restriction);
int iodefv2_detection_pattern_new_restriction(iodefv2_detection_pattern_t *ptr, iodefv2_detection_pattern_restriction_t **ret);



libiodefv2_string_t *iodefv2_detection_pattern_get_ext_restriction(iodefv2_detection_pattern_t *ptr);

void iodefv2_detection_pattern_set_ext_restriction(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_detection_pattern_new_ext_restriction(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_detection_pattern_get_observable_id(iodefv2_detection_pattern_t *ptr);

void iodefv2_detection_pattern_set_observable_id(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_detection_pattern_new_observable_id(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_detection_pattern_get_detection_configuration(iodefv2_detection_pattern_t *ptr);

void iodefv2_detection_pattern_set_detection_configuration(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t *detection_configuration);
int iodefv2_detection_pattern_new_detection_configuration(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_detection_pattern_get_description(iodefv2_detection_pattern_t *ptr);

void iodefv2_detection_pattern_set_description(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t *description);
int iodefv2_detection_pattern_new_description(iodefv2_detection_pattern_t *ptr, libiodefv2_string_t **ret);



iodefv2_software_t *iodefv2_detection_pattern_get_software(iodefv2_detection_pattern_t *ptr);

void iodefv2_detection_pattern_set_software(iodefv2_detection_pattern_t *ptr, iodefv2_software_t *software);
int iodefv2_detection_pattern_new_software(iodefv2_detection_pattern_t *ptr, iodefv2_software_t **ret);



        
typedef enum {
        IODEFV2_EXPECTATION_RESTRICTION_ERROR = -1,
        IODEFV2_EXPECTATION_RESTRICTION_PUBLIC = 1,
        IODEFV2_EXPECTATION_RESTRICTION_PARTNER = 2,
        IODEFV2_EXPECTATION_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_EXPECTATION_RESTRICTION_PRIVATE = 4,
        IODEFV2_EXPECTATION_RESTRICTION_DEFAULT = 5,
        IODEFV2_EXPECTATION_RESTRICTION_WHITE = 6,
        IODEFV2_EXPECTATION_RESTRICTION_GREEN = 7,
        IODEFV2_EXPECTATION_RESTRICTION_AMBER = 8,
        IODEFV2_EXPECTATION_RESTRICTION_RED = 9,
} iodefv2_expectation_restriction_t;
iodefv2_expectation_restriction_t iodefv2_expectation_restriction_to_numeric(const char *name);
const char *iodefv2_expectation_restriction_to_string(iodefv2_expectation_restriction_t val);

        
typedef enum {
        IODEFV2_EXPECTATION_SEVERITY_ERROR = -1,
        IODEFV2_EXPECTATION_SEVERITY_LOW = 1,
        IODEFV2_EXPECTATION_SEVERITY_MEDIUM = 2,
        IODEFV2_EXPECTATION_SEVERITY_HIGH = 3,
} iodefv2_expectation_severity_t;
iodefv2_expectation_severity_t iodefv2_expectation_severity_to_numeric(const char *name);
const char *iodefv2_expectation_severity_to_string(iodefv2_expectation_severity_t val);

        
typedef enum {
        IODEFV2_EXPECTATION_ACTION_ERROR = -1,
        IODEFV2_EXPECTATION_ACTION_NOTHING = 1,
        IODEFV2_EXPECTATION_ACTION_CONTACT_SOURCE_SITE = 2,
        IODEFV2_EXPECTATION_ACTION_CONTACT_TARGET_SITE = 3,
        IODEFV2_EXPECTATION_ACTION_CONTACT_SENDER = 4,
        IODEFV2_EXPECTATION_ACTION_INVESTIGATE = 5,
        IODEFV2_EXPECTATION_ACTION_BLOCK_HOST = 6,
        IODEFV2_EXPECTATION_ACTION_BLOCK_NETWORK = 7,
        IODEFV2_EXPECTATION_ACTION_BLOCK_PORT = 8,
        IODEFV2_EXPECTATION_ACTION_RATE_LIMIT_HOST = 9,
        IODEFV2_EXPECTATION_ACTION_RATE_LIMIT_NETWORK = 10,
        IODEFV2_EXPECTATION_ACTION_RATE_LIMIT_PORT = 11,
        IODEFV2_EXPECTATION_ACTION_REMEDIATE_OTHER = 12,
        IODEFV2_EXPECTATION_ACTION_STATUS_TRIAGE = 13,
        IODEFV2_EXPECTATION_ACTION_STATUS_NEW_INFO = 14,
        IODEFV2_EXPECTATION_ACTION_OTHER = 15,
        IODEFV2_EXPECTATION_ACTION_EXT_VALUE = 16,
} iodefv2_expectation_action_t;
iodefv2_expectation_action_t iodefv2_expectation_action_to_numeric(const char *name);
const char *iodefv2_expectation_action_to_string(iodefv2_expectation_action_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_expectation_restriction_t, restriction);
 *         libiodefv2_string_t *ext_action;
 *         libiodefv2_string_t *ext_severity;
 *         OPTIONAL_INT(iodefv2_expectation_severity_t, severity);
 *         OPTIONAL_INT(iodefv2_expectation_action_t, action);
 *         libiodefv2_string_t *ext_restriction;
 *         iodefv2_time_t *end_time;
 *         libiodefv2_string_t *defined_coa;
 *         libiodefv2_string_t *description;
 *         iodefv2_time_t *start_time;
 *         iodefv2_contact_t *contact;
 * } TYPE_ID(iodefv2_expectation_t, 95);
 */

typedef struct iodefv2_expectation iodefv2_expectation_t;


int iodefv2_expectation_new(iodefv2_expectation_t **ret);
int iodefv2_expectation_copy(const iodefv2_expectation_t *src, iodefv2_expectation_t *dst);
int iodefv2_expectation_clone(iodefv2_expectation_t *src, iodefv2_expectation_t **dst);
int iodefv2_expectation_compare(const iodefv2_expectation_t *obj1, const iodefv2_expectation_t *obj2);


iodefv2_expectation_t *iodefv2_expectation_ref(iodefv2_expectation_t *expectation);

#ifndef SWIG

int _iodefv2_expectation_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_expectation_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_expectation_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_expectation_destroy(iodefv2_expectation_t *ptr);




void iodefv2_expectation_unset_restriction(iodefv2_expectation_t *ptr);
iodefv2_expectation_restriction_t *iodefv2_expectation_get_restriction(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_restriction(iodefv2_expectation_t *ptr, iodefv2_expectation_restriction_t restriction);
int iodefv2_expectation_new_restriction(iodefv2_expectation_t *ptr, iodefv2_expectation_restriction_t **ret);



libiodefv2_string_t *iodefv2_expectation_get_ext_action(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_ext_action(iodefv2_expectation_t *ptr, libiodefv2_string_t *ext_action);
int iodefv2_expectation_new_ext_action(iodefv2_expectation_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_expectation_get_ext_severity(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_ext_severity(iodefv2_expectation_t *ptr, libiodefv2_string_t *ext_severity);
int iodefv2_expectation_new_ext_severity(iodefv2_expectation_t *ptr, libiodefv2_string_t **ret);



void iodefv2_expectation_unset_severity(iodefv2_expectation_t *ptr);
iodefv2_expectation_severity_t *iodefv2_expectation_get_severity(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_severity(iodefv2_expectation_t *ptr, iodefv2_expectation_severity_t severity);
int iodefv2_expectation_new_severity(iodefv2_expectation_t *ptr, iodefv2_expectation_severity_t **ret);



void iodefv2_expectation_unset_action(iodefv2_expectation_t *ptr);
iodefv2_expectation_action_t *iodefv2_expectation_get_action(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_action(iodefv2_expectation_t *ptr, iodefv2_expectation_action_t action);
int iodefv2_expectation_new_action(iodefv2_expectation_t *ptr, iodefv2_expectation_action_t **ret);



libiodefv2_string_t *iodefv2_expectation_get_ext_restriction(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_ext_restriction(iodefv2_expectation_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_expectation_new_ext_restriction(iodefv2_expectation_t *ptr, libiodefv2_string_t **ret);



iodefv2_time_t *iodefv2_expectation_get_end_time(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_end_time(iodefv2_expectation_t *ptr, iodefv2_time_t *end_time);
int iodefv2_expectation_new_end_time(iodefv2_expectation_t *ptr, iodefv2_time_t **ret);



libiodefv2_string_t *iodefv2_expectation_get_defined_coa(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_defined_coa(iodefv2_expectation_t *ptr, libiodefv2_string_t *defined_coa);
int iodefv2_expectation_new_defined_coa(iodefv2_expectation_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_expectation_get_description(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_description(iodefv2_expectation_t *ptr, libiodefv2_string_t *description);
int iodefv2_expectation_new_description(iodefv2_expectation_t *ptr, libiodefv2_string_t **ret);



iodefv2_time_t *iodefv2_expectation_get_start_time(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_start_time(iodefv2_expectation_t *ptr, iodefv2_time_t *start_time);
int iodefv2_expectation_new_start_time(iodefv2_expectation_t *ptr, iodefv2_time_t **ret);



iodefv2_contact_t *iodefv2_expectation_get_contact(iodefv2_expectation_t *ptr);

void iodefv2_expectation_set_contact(iodefv2_expectation_t *ptr, iodefv2_contact_t *contact);
int iodefv2_expectation_new_contact(iodefv2_expectation_t *ptr, iodefv2_contact_t **ret);



        
typedef enum {
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_ERROR = -1,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_RESERVED_DELEGATION = 1,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_ASSIGNED_AND_ACTIVE = 2,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_ASSIGNED_AND_INACTIVE = 3,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_ASSIGNED_AND_ON_HOLD = 4,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_REVOKED = 5,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_TRANSFER_PENDING = 6,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_REGISTRY_LOCK = 7,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_REGISTRAR_LOCK = 8,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_OTHER = 9,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_UNKNOWN = 10,
        IODEFV2_DOMAIN_DATA_DOMAIN_STATUS_EXT_VALUE = 11,
} iodefv2_domain_data_domain_status_t;
iodefv2_domain_data_domain_status_t iodefv2_domain_data_domain_status_to_numeric(const char *name);
const char *iodefv2_domain_data_domain_status_to_string(iodefv2_domain_data_domain_status_t val);

        
typedef enum {
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_ERROR = -1,
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_SPOOFED = 1,
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_FRAUDULENT = 2,
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_INNOCENT_HACKED = 3,
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_INNOCENT_HIJACKED = 4,
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_UNKNOWN = 5,
        IODEFV2_DOMAIN_DATA_SYSTEM_STATUS_EXT_VALUE = 6,
} iodefv2_domain_data_system_status_t;
iodefv2_domain_data_system_status_t iodefv2_domain_data_system_status_to_numeric(const char *name);
const char *iodefv2_domain_data_system_status_to_string(iodefv2_domain_data_system_status_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *ext_domain_status;
 *         iodefv2_domain_data_domain_status_t domain_status;
 *         libiodefv2_string_t *ext_system_status;
 *         libiodefv2_string_t *observable_id;
 *         iodefv2_domain_data_system_status_t system_status;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *        REQUIRED(libiodefv2_string_t, *name);
 *        LISTED_OBJECT(nameservers_list, iodefv2_nameservers_t);
 *         iodefv2_time_t *registration_date;
 *         iodefv2_domain_contacts_t *domain_contacts;
 *         iodefv2_time_t *date_domain_was_checked;
 *         iodefv2_time_t *expiration_date;
 * } TYPE_ID(iodefv2_domain_data_t, 98);
 */

typedef struct iodefv2_domain_data iodefv2_domain_data_t;


int iodefv2_domain_data_new(iodefv2_domain_data_t **ret);
int iodefv2_domain_data_copy(const iodefv2_domain_data_t *src, iodefv2_domain_data_t *dst);
int iodefv2_domain_data_clone(iodefv2_domain_data_t *src, iodefv2_domain_data_t **dst);
int iodefv2_domain_data_compare(const iodefv2_domain_data_t *obj1, const iodefv2_domain_data_t *obj2);


iodefv2_domain_data_t *iodefv2_domain_data_ref(iodefv2_domain_data_t *domain_data);

#ifndef SWIG

int _iodefv2_domain_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_domain_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_domain_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_domain_data_destroy(iodefv2_domain_data_t *ptr);




libiodefv2_string_t *iodefv2_domain_data_get_ext_domain_status(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_ext_domain_status(iodefv2_domain_data_t *ptr, libiodefv2_string_t *ext_domain_status);
int iodefv2_domain_data_new_ext_domain_status(iodefv2_domain_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_domain_data_domain_status_t iodefv2_domain_data_get_domain_status(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_domain_status(iodefv2_domain_data_t *ptr, iodefv2_domain_data_domain_status_t domain_status);
int iodefv2_domain_data_new_domain_status(iodefv2_domain_data_t *ptr, iodefv2_domain_data_domain_status_t **ret);



libiodefv2_string_t *iodefv2_domain_data_get_ext_system_status(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_ext_system_status(iodefv2_domain_data_t *ptr, libiodefv2_string_t *ext_system_status);
int iodefv2_domain_data_new_ext_system_status(iodefv2_domain_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_domain_data_get_observable_id(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_observable_id(iodefv2_domain_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_domain_data_new_observable_id(iodefv2_domain_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_domain_data_system_status_t iodefv2_domain_data_get_system_status(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_system_status(iodefv2_domain_data_t *ptr, iodefv2_domain_data_system_status_t system_status);
int iodefv2_domain_data_new_system_status(iodefv2_domain_data_t *ptr, iodefv2_domain_data_system_status_t **ret);


iodefv2_additional_data_t *iodefv2_domain_data_get_next_additional_data(iodefv2_domain_data_t *domain_data, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_domain_data_set_additional_data(iodefv2_domain_data_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_domain_data_new_additional_data(iodefv2_domain_data_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_domain_data_get_name(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_name(iodefv2_domain_data_t *ptr, libiodefv2_string_t *name);
int iodefv2_domain_data_new_name(iodefv2_domain_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_nameservers_t *iodefv2_domain_data_get_next_nameservers(iodefv2_domain_data_t *domain_data, iodefv2_nameservers_t *nameservers_cur);
void iodefv2_domain_data_set_nameservers(iodefv2_domain_data_t *ptr, iodefv2_nameservers_t *object, int pos);
int iodefv2_domain_data_new_nameservers(iodefv2_domain_data_t *ptr, iodefv2_nameservers_t **ret, int pos);



iodefv2_time_t *iodefv2_domain_data_get_registration_date(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_registration_date(iodefv2_domain_data_t *ptr, iodefv2_time_t *registration_date);
int iodefv2_domain_data_new_registration_date(iodefv2_domain_data_t *ptr, iodefv2_time_t **ret);



iodefv2_domain_contacts_t *iodefv2_domain_data_get_domain_contacts(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_domain_contacts(iodefv2_domain_data_t *ptr, iodefv2_domain_contacts_t *domain_contacts);
int iodefv2_domain_data_new_domain_contacts(iodefv2_domain_data_t *ptr, iodefv2_domain_contacts_t **ret);



iodefv2_time_t *iodefv2_domain_data_get_date_domain_was_checked(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_date_domain_was_checked(iodefv2_domain_data_t *ptr, iodefv2_time_t *date_domain_was_checked);
int iodefv2_domain_data_new_date_domain_was_checked(iodefv2_domain_data_t *ptr, iodefv2_time_t **ret);



iodefv2_time_t *iodefv2_domain_data_get_expiration_date(iodefv2_domain_data_t *ptr);

void iodefv2_domain_data_set_expiration_date(iodefv2_domain_data_t *ptr, iodefv2_time_t *expiration_date);
int iodefv2_domain_data_new_expiration_date(iodefv2_domain_data_t *ptr, iodefv2_time_t **ret);



        
typedef enum {
        IODEFV2_HASH_DATA_SCOPE_ERROR = -1,
        IODEFV2_HASH_DATA_SCOPE_FILE_CONTENT = 1,
        IODEFV2_HASH_DATA_SCOPE_FILE_PE_SECTION = 2,
        IODEFV2_HASH_DATA_SCOPE_FILE_PE_IAT = 3,
        IODEFV2_HASH_DATA_SCOPE_FILE_PE_RESOURCE = 4,
        IODEFV2_HASH_DATA_SCOPE_FILE_PDF_OBJECT = 5,
        IODEFV2_HASH_DATA_SCOPE_EMAIL_HASH = 6,
        IODEFV2_HASH_DATA_SCOPE_EMAIL_HEADERS_HASH = 7,
        IODEFV2_HASH_DATA_SCOPE_EMAIL_BODY_HASH = 8,
        IODEFV2_HASH_DATA_SCOPE_EXT_VALUE = 9,
} iodefv2_hash_data_scope_t;
iodefv2_hash_data_scope_t iodefv2_hash_data_scope_to_numeric(const char *name);
const char *iodefv2_hash_data_scope_to_string(iodefv2_hash_data_scope_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_hash_data_scope_t, scope);
 *         libiodefv2_string_t *ext_scope;
 *         libiodefv2_string_t *hash_target_id;
 *         iodefv2_hash_t *hash;
 *         iodefv2_fuzzy_hash_t *fuzzy_hash;
 * } TYPE_ID(iodefv2_hash_data_t, 100);
 */

typedef struct iodefv2_hash_data iodefv2_hash_data_t;


int iodefv2_hash_data_new(iodefv2_hash_data_t **ret);
int iodefv2_hash_data_copy(const iodefv2_hash_data_t *src, iodefv2_hash_data_t *dst);
int iodefv2_hash_data_clone(iodefv2_hash_data_t *src, iodefv2_hash_data_t **dst);
int iodefv2_hash_data_compare(const iodefv2_hash_data_t *obj1, const iodefv2_hash_data_t *obj2);


iodefv2_hash_data_t *iodefv2_hash_data_ref(iodefv2_hash_data_t *hash_data);

#ifndef SWIG

int _iodefv2_hash_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_hash_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_hash_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_hash_data_destroy(iodefv2_hash_data_t *ptr);




void iodefv2_hash_data_unset_scope(iodefv2_hash_data_t *ptr);
iodefv2_hash_data_scope_t *iodefv2_hash_data_get_scope(iodefv2_hash_data_t *ptr);

void iodefv2_hash_data_set_scope(iodefv2_hash_data_t *ptr, iodefv2_hash_data_scope_t scope);
int iodefv2_hash_data_new_scope(iodefv2_hash_data_t *ptr, iodefv2_hash_data_scope_t **ret);



libiodefv2_string_t *iodefv2_hash_data_get_ext_scope(iodefv2_hash_data_t *ptr);

void iodefv2_hash_data_set_ext_scope(iodefv2_hash_data_t *ptr, libiodefv2_string_t *ext_scope);
int iodefv2_hash_data_new_ext_scope(iodefv2_hash_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_hash_data_get_hash_target_id(iodefv2_hash_data_t *ptr);

void iodefv2_hash_data_set_hash_target_id(iodefv2_hash_data_t *ptr, libiodefv2_string_t *hash_target_id);
int iodefv2_hash_data_new_hash_target_id(iodefv2_hash_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_hash_t *iodefv2_hash_data_get_hash(iodefv2_hash_data_t *ptr);

void iodefv2_hash_data_set_hash(iodefv2_hash_data_t *ptr, iodefv2_hash_t *hash);
int iodefv2_hash_data_new_hash(iodefv2_hash_data_t *ptr, iodefv2_hash_t **ret);



iodefv2_fuzzy_hash_t *iodefv2_hash_data_get_fuzzy_hash(iodefv2_hash_data_t *ptr);

void iodefv2_hash_data_set_fuzzy_hash(iodefv2_hash_data_t *ptr, iodefv2_fuzzy_hash_t *fuzzy_hash);
int iodefv2_hash_data_new_fuzzy_hash(iodefv2_hash_data_t *ptr, iodefv2_fuzzy_hash_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_hash_t *hash;
 * } TYPE_ID(iodefv2_bulk_observable_format_t, 101);
 */

typedef struct iodefv2_bulk_observable_format iodefv2_bulk_observable_format_t;


int iodefv2_bulk_observable_format_new(iodefv2_bulk_observable_format_t **ret);
int iodefv2_bulk_observable_format_copy(const iodefv2_bulk_observable_format_t *src, iodefv2_bulk_observable_format_t *dst);
int iodefv2_bulk_observable_format_clone(iodefv2_bulk_observable_format_t *src, iodefv2_bulk_observable_format_t **dst);
int iodefv2_bulk_observable_format_compare(const iodefv2_bulk_observable_format_t *obj1, const iodefv2_bulk_observable_format_t *obj2);


iodefv2_bulk_observable_format_t *iodefv2_bulk_observable_format_ref(iodefv2_bulk_observable_format_t *bulk_observable_format);

#ifndef SWIG

int _iodefv2_bulk_observable_format_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_bulk_observable_format_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_bulk_observable_format_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_bulk_observable_format_destroy(iodefv2_bulk_observable_format_t *ptr);



iodefv2_additional_data_t *iodefv2_bulk_observable_format_get_next_additional_data(iodefv2_bulk_observable_format_t *bulk_observable_format, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_bulk_observable_format_set_additional_data(iodefv2_bulk_observable_format_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_bulk_observable_format_new_additional_data(iodefv2_bulk_observable_format_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_hash_t *iodefv2_bulk_observable_format_get_hash(iodefv2_bulk_observable_format_t *ptr);

void iodefv2_bulk_observable_format_set_hash(iodefv2_bulk_observable_format_t *ptr, iodefv2_hash_t *hash);
int iodefv2_bulk_observable_format_new_hash(iodefv2_bulk_observable_format_t *ptr, iodefv2_hash_t **ret);



        
typedef enum {
        IODEFV2_HISTORY_RESTRICTION_ERROR = -1,
} iodefv2_history_restriction_t;
iodefv2_history_restriction_t iodefv2_history_restriction_to_numeric(const char *name);
const char *iodefv2_history_restriction_to_string(iodefv2_history_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_history_restriction_t, restriction);
 *        LISTED_OBJECT(history_item_list, iodefv2_history_item_t);
 * } TYPE_ID(iodefv2_history_t, 103);
 */

typedef struct iodefv2_history iodefv2_history_t;


int iodefv2_history_new(iodefv2_history_t **ret);
int iodefv2_history_copy(const iodefv2_history_t *src, iodefv2_history_t *dst);
int iodefv2_history_clone(iodefv2_history_t *src, iodefv2_history_t **dst);
int iodefv2_history_compare(const iodefv2_history_t *obj1, const iodefv2_history_t *obj2);


iodefv2_history_t *iodefv2_history_ref(iodefv2_history_t *history);

#ifndef SWIG

int _iodefv2_history_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_history_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_history_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_history_destroy(iodefv2_history_t *ptr);




void iodefv2_history_unset_restriction(iodefv2_history_t *ptr);
iodefv2_history_restriction_t *iodefv2_history_get_restriction(iodefv2_history_t *ptr);

void iodefv2_history_set_restriction(iodefv2_history_t *ptr, iodefv2_history_restriction_t restriction);
int iodefv2_history_new_restriction(iodefv2_history_t *ptr, iodefv2_history_restriction_t **ret);


iodefv2_history_item_t *iodefv2_history_get_next_history_item(iodefv2_history_t *history, iodefv2_history_item_t *history_item_cur);
void iodefv2_history_set_history_item(iodefv2_history_t *ptr, iodefv2_history_item_t *object, int pos);
int iodefv2_history_new_history_item(iodefv2_history_t *ptr, iodefv2_history_item_t **ret, int pos);



        
typedef enum {
        IODEFV2_DISCOVERY_SOURCE_ERROR = -1,
        IODEFV2_DISCOVERY_SOURCE_NIDPS = 1,
        IODEFV2_DISCOVERY_SOURCE_HIPS = 2,
        IODEFV2_DISCOVERY_SOURCE_SIEM = 3,
        IODEFV2_DISCOVERY_SOURCE_AV = 4,
        IODEFV2_DISCOVERY_SOURCE_THIRD_PARTY_MONITORING = 5,
        IODEFV2_DISCOVERY_SOURCE_INCIDENT = 6,
        IODEFV2_DISCOVERY_SOURCE_OS_LOG = 7,
        IODEFV2_DISCOVERY_SOURCE_APPLICATION_LOG = 8,
        IODEFV2_DISCOVERY_SOURCE_DEVICE_LOG = 9,
        IODEFV2_DISCOVERY_SOURCE_NETWORK_FLOW = 10,
        IODEFV2_DISCOVERY_SOURCE_PASSIVE_DNS = 11,
        IODEFV2_DISCOVERY_SOURCE_INVESTIGATION = 12,
        IODEFV2_DISCOVERY_SOURCE_AUDIT = 13,
        IODEFV2_DISCOVERY_SOURCE_INTERNAL_NOTIFICATION = 14,
        IODEFV2_DISCOVERY_SOURCE_EXTERNAL_NOTIFICATION = 15,
        IODEFV2_DISCOVERY_SOURCE_LEO = 16,
        IODEFV2_DISCOVERY_SOURCE_PARTNER = 17,
        IODEFV2_DISCOVERY_SOURCE_ACTOR = 18,
        IODEFV2_DISCOVERY_SOURCE_UNKNOWN = 19,
        IODEFV2_DISCOVERY_SOURCE_EXT_VALUE = 20,
} iodefv2_discovery_source_t;
iodefv2_discovery_source_t iodefv2_discovery_source_to_numeric(const char *name);
const char *iodefv2_discovery_source_to_string(iodefv2_discovery_source_t val);

        
typedef enum {
        IODEFV2_DISCOVERY_RESTRICTION_ERROR = -1,
        IODEFV2_DISCOVERY_RESTRICTION_PUBLIC = 1,
        IODEFV2_DISCOVERY_RESTRICTION_PARTNER = 2,
        IODEFV2_DISCOVERY_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_DISCOVERY_RESTRICTION_PRIVATE = 4,
        IODEFV2_DISCOVERY_RESTRICTION_DEFAULT = 5,
        IODEFV2_DISCOVERY_RESTRICTION_WHITE = 6,
        IODEFV2_DISCOVERY_RESTRICTION_GREEN = 7,
        IODEFV2_DISCOVERY_RESTRICTION_AMBER = 8,
        IODEFV2_DISCOVERY_RESTRICTION_RED = 9,
} iodefv2_discovery_restriction_t;
iodefv2_discovery_restriction_t iodefv2_discovery_restriction_to_numeric(const char *name);
const char *iodefv2_discovery_restriction_to_string(iodefv2_discovery_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_discovery_source_t, source);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *ext_source;
 *         libiodefv2_string_t *observable_id;
 *         OPTIONAL_INT(iodefv2_discovery_restriction_t, restriction);
 *        LISTED_OBJECT(detection_pattern_list, iodefv2_detection_pattern_t);
 *        LISTED_OBJECT(contact_list, iodefv2_contact_t);
 *         libiodefv2_string_t *description;
 * } TYPE_ID(iodefv2_discovery_t, 106);
 */

typedef struct iodefv2_discovery iodefv2_discovery_t;


int iodefv2_discovery_new(iodefv2_discovery_t **ret);
int iodefv2_discovery_copy(const iodefv2_discovery_t *src, iodefv2_discovery_t *dst);
int iodefv2_discovery_clone(iodefv2_discovery_t *src, iodefv2_discovery_t **dst);
int iodefv2_discovery_compare(const iodefv2_discovery_t *obj1, const iodefv2_discovery_t *obj2);


iodefv2_discovery_t *iodefv2_discovery_ref(iodefv2_discovery_t *discovery);

#ifndef SWIG

int _iodefv2_discovery_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_discovery_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_discovery_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_discovery_destroy(iodefv2_discovery_t *ptr);




void iodefv2_discovery_unset_source(iodefv2_discovery_t *ptr);
iodefv2_discovery_source_t *iodefv2_discovery_get_source(iodefv2_discovery_t *ptr);

void iodefv2_discovery_set_source(iodefv2_discovery_t *ptr, iodefv2_discovery_source_t source);
int iodefv2_discovery_new_source(iodefv2_discovery_t *ptr, iodefv2_discovery_source_t **ret);



libiodefv2_string_t *iodefv2_discovery_get_ext_restriction(iodefv2_discovery_t *ptr);

void iodefv2_discovery_set_ext_restriction(iodefv2_discovery_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_discovery_new_ext_restriction(iodefv2_discovery_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_discovery_get_ext_source(iodefv2_discovery_t *ptr);

void iodefv2_discovery_set_ext_source(iodefv2_discovery_t *ptr, libiodefv2_string_t *ext_source);
int iodefv2_discovery_new_ext_source(iodefv2_discovery_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_discovery_get_observable_id(iodefv2_discovery_t *ptr);

void iodefv2_discovery_set_observable_id(iodefv2_discovery_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_discovery_new_observable_id(iodefv2_discovery_t *ptr, libiodefv2_string_t **ret);



void iodefv2_discovery_unset_restriction(iodefv2_discovery_t *ptr);
iodefv2_discovery_restriction_t *iodefv2_discovery_get_restriction(iodefv2_discovery_t *ptr);

void iodefv2_discovery_set_restriction(iodefv2_discovery_t *ptr, iodefv2_discovery_restriction_t restriction);
int iodefv2_discovery_new_restriction(iodefv2_discovery_t *ptr, iodefv2_discovery_restriction_t **ret);


iodefv2_detection_pattern_t *iodefv2_discovery_get_next_detection_pattern(iodefv2_discovery_t *discovery, iodefv2_detection_pattern_t *detection_pattern_cur);
void iodefv2_discovery_set_detection_pattern(iodefv2_discovery_t *ptr, iodefv2_detection_pattern_t *object, int pos);
int iodefv2_discovery_new_detection_pattern(iodefv2_discovery_t *ptr, iodefv2_detection_pattern_t **ret, int pos);


iodefv2_contact_t *iodefv2_discovery_get_next_contact(iodefv2_discovery_t *discovery, iodefv2_contact_t *contact_cur);
void iodefv2_discovery_set_contact(iodefv2_discovery_t *ptr, iodefv2_contact_t *object, int pos);
int iodefv2_discovery_new_contact(iodefv2_discovery_t *ptr, iodefv2_contact_t **ret, int pos);



libiodefv2_string_t *iodefv2_discovery_get_description(iodefv2_discovery_t *ptr);

void iodefv2_discovery_set_description(iodefv2_discovery_t *ptr, libiodefv2_string_t *description);
int iodefv2_discovery_new_description(iodefv2_discovery_t *ptr, libiodefv2_string_t **ret);



        
typedef enum {
        IODEFV2_BULK_OBSERVABLE_TYPE_ERROR = -1,
        IODEFV2_BULK_OBSERVABLE_TYPE_ASN = 1,
        IODEFV2_BULK_OBSERVABLE_TYPE_ATM = 2,
        IODEFV2_BULK_OBSERVABLE_TYPE_E_MAIL = 3,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV4_ADDR = 4,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV4_NET = 5,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV4_NET_MASK = 6,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV6_ADDR = 7,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV6_NET = 8,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV6_NET_MASK = 9,
        IODEFV2_BULK_OBSERVABLE_TYPE_MAC = 10,
        IODEFV2_BULK_OBSERVABLE_TYPE_SITE_URI = 11,
        IODEFV2_BULK_OBSERVABLE_TYPE_DOMAIN_NAME = 12,
        IODEFV2_BULK_OBSERVABLE_TYPE_DOMAIN_TO_IPV4 = 13,
        IODEFV2_BULK_OBSERVABLE_TYPE_DOMAIN_TO_IPV6 = 14,
        IODEFV2_BULK_OBSERVABLE_TYPE_DOMAIN_TO_IPV4_TIMESTAMP = 15,
        IODEFV2_BULK_OBSERVABLE_TYPE_DOMAIN_TO_IPV6_TIMESTAMP = 16,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV4_PORT = 17,
        IODEFV2_BULK_OBSERVABLE_TYPE_IPV6_PORT = 18,
        IODEFV2_BULK_OBSERVABLE_TYPE_WINDOWS_REG_KEY = 19,
        IODEFV2_BULK_OBSERVABLE_TYPE_FILE_HASH = 20,
        IODEFV2_BULK_OBSERVABLE_TYPE_EMAIL_X_MAILER = 21,
        IODEFV2_BULK_OBSERVABLE_TYPE_EMAIL_SUBJECT = 22,
        IODEFV2_BULK_OBSERVABLE_TYPE_HTTP_USER_AGENT = 23,
        IODEFV2_BULK_OBSERVABLE_TYPE_HTTP_REQUEST_URI = 24,
        IODEFV2_BULK_OBSERVABLE_TYPE_AMBER = 25,
        IODEFV2_BULK_OBSERVABLE_TYPE_FILE_PATH = 26,
        IODEFV2_BULK_OBSERVABLE_TYPE_USER_NAME = 27,
        IODEFV2_BULK_OBSERVABLE_TYPE_EXT_VALUE = 28,
} iodefv2_bulk_observable_type_t;
iodefv2_bulk_observable_type_t iodefv2_bulk_observable_type_to_numeric(const char *name);
const char *iodefv2_bulk_observable_type_to_string(iodefv2_bulk_observable_type_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_bulk_observable_type_t, type);
 *         libiodefv2_string_t *ext_type;
 *         libiodefv2_string_t *bulk_observable_list;
 *         iodefv2_bulk_observable_format_t *bulk_observable_format;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 * } TYPE_ID(iodefv2_bulk_observable_t, 108);
 */

typedef struct iodefv2_bulk_observable iodefv2_bulk_observable_t;


int iodefv2_bulk_observable_new(iodefv2_bulk_observable_t **ret);
int iodefv2_bulk_observable_copy(const iodefv2_bulk_observable_t *src, iodefv2_bulk_observable_t *dst);
int iodefv2_bulk_observable_clone(iodefv2_bulk_observable_t *src, iodefv2_bulk_observable_t **dst);
int iodefv2_bulk_observable_compare(const iodefv2_bulk_observable_t *obj1, const iodefv2_bulk_observable_t *obj2);


iodefv2_bulk_observable_t *iodefv2_bulk_observable_ref(iodefv2_bulk_observable_t *bulk_observable);

#ifndef SWIG

int _iodefv2_bulk_observable_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_bulk_observable_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_bulk_observable_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_bulk_observable_destroy(iodefv2_bulk_observable_t *ptr);




void iodefv2_bulk_observable_unset_type(iodefv2_bulk_observable_t *ptr);
iodefv2_bulk_observable_type_t *iodefv2_bulk_observable_get_type(iodefv2_bulk_observable_t *ptr);

void iodefv2_bulk_observable_set_type(iodefv2_bulk_observable_t *ptr, iodefv2_bulk_observable_type_t type);
int iodefv2_bulk_observable_new_type(iodefv2_bulk_observable_t *ptr, iodefv2_bulk_observable_type_t **ret);



libiodefv2_string_t *iodefv2_bulk_observable_get_ext_type(iodefv2_bulk_observable_t *ptr);

void iodefv2_bulk_observable_set_ext_type(iodefv2_bulk_observable_t *ptr, libiodefv2_string_t *ext_type);
int iodefv2_bulk_observable_new_ext_type(iodefv2_bulk_observable_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_bulk_observable_get_bulk_observable_list(iodefv2_bulk_observable_t *ptr);

void iodefv2_bulk_observable_set_bulk_observable_list(iodefv2_bulk_observable_t *ptr, libiodefv2_string_t *bulk_observable_list);
int iodefv2_bulk_observable_new_bulk_observable_list(iodefv2_bulk_observable_t *ptr, libiodefv2_string_t **ret);



iodefv2_bulk_observable_format_t *iodefv2_bulk_observable_get_bulk_observable_format(iodefv2_bulk_observable_t *ptr);

void iodefv2_bulk_observable_set_bulk_observable_format(iodefv2_bulk_observable_t *ptr, iodefv2_bulk_observable_format_t *bulk_observable_format);
int iodefv2_bulk_observable_new_bulk_observable_format(iodefv2_bulk_observable_t *ptr, iodefv2_bulk_observable_format_t **ret);


iodefv2_additional_data_t *iodefv2_bulk_observable_get_next_additional_data(iodefv2_bulk_observable_t *bulk_observable, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_bulk_observable_set_additional_data(iodefv2_bulk_observable_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_bulk_observable_new_additional_data(iodefv2_bulk_observable_t *ptr, iodefv2_additional_data_t **ret, int pos);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *email_headers;
 *        LISTED_OBJECT(signature_data_list, iodefv2_signature_data_t);
 *         libiodefv2_string_t *email_subject;
 *         libiodefv2_string_t *email_x_mailer;
 *        LISTED_OBJECT(hash_data_list, iodefv2_hash_data_t);
 *         libiodefv2_string_t *email_from;
 *         iodefv2_application_header_t *application_header;
 *         libiodefv2_string_t *email_body;
 *         libiodefv2_string_t *email_message;
 *         libiodefv2_string_t *email_to;
 * } TYPE_ID(iodefv2_email_data_t, 109);
 */

typedef struct iodefv2_email_data iodefv2_email_data_t;


int iodefv2_email_data_new(iodefv2_email_data_t **ret);
int iodefv2_email_data_copy(const iodefv2_email_data_t *src, iodefv2_email_data_t *dst);
int iodefv2_email_data_clone(iodefv2_email_data_t *src, iodefv2_email_data_t **dst);
int iodefv2_email_data_compare(const iodefv2_email_data_t *obj1, const iodefv2_email_data_t *obj2);


iodefv2_email_data_t *iodefv2_email_data_ref(iodefv2_email_data_t *email_data);

#ifndef SWIG

int _iodefv2_email_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_email_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_email_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_email_data_destroy(iodefv2_email_data_t *ptr);




libiodefv2_string_t *iodefv2_email_data_get_observable_id(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_observable_id(iodefv2_email_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_email_data_new_observable_id(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_email_data_get_next_additional_data(iodefv2_email_data_t *email_data, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_email_data_set_additional_data(iodefv2_email_data_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_email_data_new_additional_data(iodefv2_email_data_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_email_data_get_email_headers(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_headers(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_headers);
int iodefv2_email_data_new_email_headers(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_signature_data_t *iodefv2_email_data_get_next_signature_data(iodefv2_email_data_t *email_data, iodefv2_signature_data_t *signature_data_cur);
void iodefv2_email_data_set_signature_data(iodefv2_email_data_t *ptr, iodefv2_signature_data_t *object, int pos);
int iodefv2_email_data_new_signature_data(iodefv2_email_data_t *ptr, iodefv2_signature_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_email_data_get_email_subject(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_subject(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_subject);
int iodefv2_email_data_new_email_subject(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_email_data_get_email_x_mailer(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_x_mailer(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_x_mailer);
int iodefv2_email_data_new_email_x_mailer(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_hash_data_t *iodefv2_email_data_get_next_hash_data(iodefv2_email_data_t *email_data, iodefv2_hash_data_t *hash_data_cur);
void iodefv2_email_data_set_hash_data(iodefv2_email_data_t *ptr, iodefv2_hash_data_t *object, int pos);
int iodefv2_email_data_new_hash_data(iodefv2_email_data_t *ptr, iodefv2_hash_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_email_data_get_email_from(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_from(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_from);
int iodefv2_email_data_new_email_from(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_application_header_t *iodefv2_email_data_get_application_header(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_application_header(iodefv2_email_data_t *ptr, iodefv2_application_header_t *application_header);
int iodefv2_email_data_new_application_header(iodefv2_email_data_t *ptr, iodefv2_application_header_t **ret);



libiodefv2_string_t *iodefv2_email_data_get_email_body(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_body(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_body);
int iodefv2_email_data_new_email_body(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_email_data_get_email_message(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_message(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_message);
int iodefv2_email_data_new_email_message(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_email_data_get_email_to(iodefv2_email_data_t *ptr);

void iodefv2_email_data_set_email_to(iodefv2_email_data_t *ptr, libiodefv2_string_t *email_to);
int iodefv2_email_data_new_email_to(iodefv2_email_data_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *observable_id;
 *         iodefv2_hash_data_t *hash_data;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_signature_data_t *signature_data;
 *         libiodefv2_string_t *url;
 *         iodefv2_software_t *software;
 *         libiodefv2_string_t *file_name;
 * } TYPE_ID(iodefv2_file_t, 110);
 */

typedef struct iodefv2_file iodefv2_file_t;


int iodefv2_file_new(iodefv2_file_t **ret);
int iodefv2_file_copy(const iodefv2_file_t *src, iodefv2_file_t *dst);
int iodefv2_file_clone(iodefv2_file_t *src, iodefv2_file_t **dst);
int iodefv2_file_compare(const iodefv2_file_t *obj1, const iodefv2_file_t *obj2);


iodefv2_file_t *iodefv2_file_ref(iodefv2_file_t *file);

#ifndef SWIG

int _iodefv2_file_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_file_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_file_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_file_destroy(iodefv2_file_t *ptr);




libiodefv2_string_t *iodefv2_file_get_observable_id(iodefv2_file_t *ptr);

void iodefv2_file_set_observable_id(iodefv2_file_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_file_new_observable_id(iodefv2_file_t *ptr, libiodefv2_string_t **ret);



iodefv2_hash_data_t *iodefv2_file_get_hash_data(iodefv2_file_t *ptr);

void iodefv2_file_set_hash_data(iodefv2_file_t *ptr, iodefv2_hash_data_t *hash_data);
int iodefv2_file_new_hash_data(iodefv2_file_t *ptr, iodefv2_hash_data_t **ret);


iodefv2_additional_data_t *iodefv2_file_get_next_additional_data(iodefv2_file_t *file, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_file_set_additional_data(iodefv2_file_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_file_new_additional_data(iodefv2_file_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_signature_data_t *iodefv2_file_get_signature_data(iodefv2_file_t *ptr);

void iodefv2_file_set_signature_data(iodefv2_file_t *ptr, iodefv2_signature_data_t *signature_data);
int iodefv2_file_new_signature_data(iodefv2_file_t *ptr, iodefv2_signature_data_t **ret);



libiodefv2_string_t *iodefv2_file_get_url(iodefv2_file_t *ptr);

void iodefv2_file_set_url(iodefv2_file_t *ptr, libiodefv2_string_t *url);
int iodefv2_file_new_url(iodefv2_file_t *ptr, libiodefv2_string_t **ret);



iodefv2_software_t *iodefv2_file_get_software(iodefv2_file_t *ptr);

void iodefv2_file_set_software(iodefv2_file_t *ptr, iodefv2_software_t *software);
int iodefv2_file_new_software(iodefv2_file_t *ptr, iodefv2_software_t **ret);



libiodefv2_string_t *iodefv2_file_get_file_name(iodefv2_file_t *ptr);

void iodefv2_file_set_file_name(iodefv2_file_t *ptr, libiodefv2_string_t *file_name);
int iodefv2_file_new_file_name(iodefv2_file_t *ptr, libiodefv2_string_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         libiodefv2_string_t *postal_address;
 *        LISTED_OBJECT(counter_list, iodefv2_counter_t);
 *         libiodefv2_string_t *location;
 *        LISTED_OBJECT(domain_data_list, iodefv2_domain_data_t);
 *        LISTED_OBJECT(address_list, iodefv2_address_t);
 * } TYPE_ID(iodefv2_node_t, 111);
 */

typedef struct iodefv2_node iodefv2_node_t;


int iodefv2_node_new(iodefv2_node_t **ret);
int iodefv2_node_copy(const iodefv2_node_t *src, iodefv2_node_t *dst);
int iodefv2_node_clone(iodefv2_node_t *src, iodefv2_node_t **dst);
int iodefv2_node_compare(const iodefv2_node_t *obj1, const iodefv2_node_t *obj2);


iodefv2_node_t *iodefv2_node_ref(iodefv2_node_t *node);

#ifndef SWIG

int _iodefv2_node_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_node_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_node_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_node_destroy(iodefv2_node_t *ptr);




libiodefv2_string_t *iodefv2_node_get_postal_address(iodefv2_node_t *ptr);

void iodefv2_node_set_postal_address(iodefv2_node_t *ptr, libiodefv2_string_t *postal_address);
int iodefv2_node_new_postal_address(iodefv2_node_t *ptr, libiodefv2_string_t **ret);


iodefv2_counter_t *iodefv2_node_get_next_counter(iodefv2_node_t *node, iodefv2_counter_t *counter_cur);
void iodefv2_node_set_counter(iodefv2_node_t *ptr, iodefv2_counter_t *object, int pos);
int iodefv2_node_new_counter(iodefv2_node_t *ptr, iodefv2_counter_t **ret, int pos);



libiodefv2_string_t *iodefv2_node_get_location(iodefv2_node_t *ptr);

void iodefv2_node_set_location(iodefv2_node_t *ptr, libiodefv2_string_t *location);
int iodefv2_node_new_location(iodefv2_node_t *ptr, libiodefv2_string_t **ret);


iodefv2_domain_data_t *iodefv2_node_get_next_domain_data(iodefv2_node_t *node, iodefv2_domain_data_t *domain_data_cur);
void iodefv2_node_set_domain_data(iodefv2_node_t *ptr, iodefv2_domain_data_t *object, int pos);
int iodefv2_node_new_domain_data(iodefv2_node_t *ptr, iodefv2_domain_data_t **ret, int pos);


iodefv2_address_t *iodefv2_node_get_next_address(iodefv2_node_t *node, iodefv2_address_t *address_cur);
void iodefv2_node_set_address(iodefv2_node_t *ptr, iodefv2_address_t *object, int pos);
int iodefv2_node_new_address(iodefv2_node_t *ptr, iodefv2_address_t **ret, int pos);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         uint32_t ip_protocol;
 *         libiodefv2_string_t *observable_id;
 *         OPTIONAL_INT(uint32_t, proto_code);
 *         libiodefv2_string_t *portlist;
 *         OPTIONAL_INT(uint32_t, proto_field);
 *         iodefv2_service_name_t *service_name;
 *         iodefv2_application_header_t *application_header;
 *         iodefv2_email_data_t *email_data;
 *         OPTIONAL_INT(uint32_t, proto_type);
 *         OPTIONAL_INT(uint32_t, port);
 *        LISTED_OBJECT(software_list, iodefv2_software_t);
 * } TYPE_ID(iodefv2_service_t, 112);
 */

typedef struct iodefv2_service iodefv2_service_t;


int iodefv2_service_new(iodefv2_service_t **ret);
int iodefv2_service_copy(const iodefv2_service_t *src, iodefv2_service_t *dst);
int iodefv2_service_clone(iodefv2_service_t *src, iodefv2_service_t **dst);
int iodefv2_service_compare(const iodefv2_service_t *obj1, const iodefv2_service_t *obj2);


iodefv2_service_t *iodefv2_service_ref(iodefv2_service_t *service);

#ifndef SWIG

int _iodefv2_service_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_service_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_service_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_service_destroy(iodefv2_service_t *ptr);




uint32_t iodefv2_service_get_ip_protocol(iodefv2_service_t *ptr);

void iodefv2_service_set_ip_protocol(iodefv2_service_t *ptr, uint32_t ip_protocol);
int iodefv2_service_new_ip_protocol(iodefv2_service_t *ptr, uint32_t **ret);



libiodefv2_string_t *iodefv2_service_get_observable_id(iodefv2_service_t *ptr);

void iodefv2_service_set_observable_id(iodefv2_service_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_service_new_observable_id(iodefv2_service_t *ptr, libiodefv2_string_t **ret);



void iodefv2_service_unset_proto_code(iodefv2_service_t *ptr);
uint32_t *iodefv2_service_get_proto_code(iodefv2_service_t *ptr);

void iodefv2_service_set_proto_code(iodefv2_service_t *ptr, uint32_t proto_code);
int iodefv2_service_new_proto_code(iodefv2_service_t *ptr, uint32_t **ret);



libiodefv2_string_t *iodefv2_service_get_portlist(iodefv2_service_t *ptr);

void iodefv2_service_set_portlist(iodefv2_service_t *ptr, libiodefv2_string_t *portlist);
int iodefv2_service_new_portlist(iodefv2_service_t *ptr, libiodefv2_string_t **ret);



void iodefv2_service_unset_proto_field(iodefv2_service_t *ptr);
uint32_t *iodefv2_service_get_proto_field(iodefv2_service_t *ptr);

void iodefv2_service_set_proto_field(iodefv2_service_t *ptr, uint32_t proto_field);
int iodefv2_service_new_proto_field(iodefv2_service_t *ptr, uint32_t **ret);



iodefv2_service_name_t *iodefv2_service_get_service_name(iodefv2_service_t *ptr);

void iodefv2_service_set_service_name(iodefv2_service_t *ptr, iodefv2_service_name_t *service_name);
int iodefv2_service_new_service_name(iodefv2_service_t *ptr, iodefv2_service_name_t **ret);



iodefv2_application_header_t *iodefv2_service_get_application_header(iodefv2_service_t *ptr);

void iodefv2_service_set_application_header(iodefv2_service_t *ptr, iodefv2_application_header_t *application_header);
int iodefv2_service_new_application_header(iodefv2_service_t *ptr, iodefv2_application_header_t **ret);



iodefv2_email_data_t *iodefv2_service_get_email_data(iodefv2_service_t *ptr);

void iodefv2_service_set_email_data(iodefv2_service_t *ptr, iodefv2_email_data_t *email_data);
int iodefv2_service_new_email_data(iodefv2_service_t *ptr, iodefv2_email_data_t **ret);



void iodefv2_service_unset_proto_type(iodefv2_service_t *ptr);
uint32_t *iodefv2_service_get_proto_type(iodefv2_service_t *ptr);

void iodefv2_service_set_proto_type(iodefv2_service_t *ptr, uint32_t proto_type);
int iodefv2_service_new_proto_type(iodefv2_service_t *ptr, uint32_t **ret);



void iodefv2_service_unset_port(iodefv2_service_t *ptr);
uint32_t *iodefv2_service_get_port(iodefv2_service_t *ptr);

void iodefv2_service_set_port(iodefv2_service_t *ptr, uint32_t port);
int iodefv2_service_new_port(iodefv2_service_t *ptr, uint32_t **ret);


iodefv2_software_t *iodefv2_service_get_next_software(iodefv2_service_t *service, iodefv2_software_t *software_cur);
void iodefv2_service_set_software(iodefv2_service_t *ptr, iodefv2_software_t *object, int pos);
int iodefv2_service_new_software(iodefv2_service_t *ptr, iodefv2_software_t **ret, int pos);



        
typedef enum {
        IODEFV2_FILE_DATA_RESTRICTION_ERROR = -1,
        IODEFV2_FILE_DATA_RESTRICTION_PUBLIC = 1,
        IODEFV2_FILE_DATA_RESTRICTION_PARTNER = 2,
        IODEFV2_FILE_DATA_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_FILE_DATA_RESTRICTION_PRIVATE = 4,
        IODEFV2_FILE_DATA_RESTRICTION_DEFAULT = 5,
        IODEFV2_FILE_DATA_RESTRICTION_WHITE = 6,
        IODEFV2_FILE_DATA_RESTRICTION_GREEN = 7,
        IODEFV2_FILE_DATA_RESTRICTION_AMBER = 8,
        IODEFV2_FILE_DATA_RESTRICTION_RED = 9,
} iodefv2_file_data_restriction_t;
iodefv2_file_data_restriction_t iodefv2_file_data_restriction_to_numeric(const char *name);
const char *iodefv2_file_data_restriction_to_string(iodefv2_file_data_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_file_data_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(file_list, iodefv2_file_t);
 * } TYPE_ID(iodefv2_file_data_t, 114);
 */

typedef struct iodefv2_file_data iodefv2_file_data_t;


int iodefv2_file_data_new(iodefv2_file_data_t **ret);
int iodefv2_file_data_copy(const iodefv2_file_data_t *src, iodefv2_file_data_t *dst);
int iodefv2_file_data_clone(iodefv2_file_data_t *src, iodefv2_file_data_t **dst);
int iodefv2_file_data_compare(const iodefv2_file_data_t *obj1, const iodefv2_file_data_t *obj2);


iodefv2_file_data_t *iodefv2_file_data_ref(iodefv2_file_data_t *file_data);

#ifndef SWIG

int _iodefv2_file_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_file_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_file_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_file_data_destroy(iodefv2_file_data_t *ptr);




void iodefv2_file_data_unset_restriction(iodefv2_file_data_t *ptr);
iodefv2_file_data_restriction_t *iodefv2_file_data_get_restriction(iodefv2_file_data_t *ptr);

void iodefv2_file_data_set_restriction(iodefv2_file_data_t *ptr, iodefv2_file_data_restriction_t restriction);
int iodefv2_file_data_new_restriction(iodefv2_file_data_t *ptr, iodefv2_file_data_restriction_t **ret);



libiodefv2_string_t *iodefv2_file_data_get_ext_restriction(iodefv2_file_data_t *ptr);

void iodefv2_file_data_set_ext_restriction(iodefv2_file_data_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_file_data_new_ext_restriction(iodefv2_file_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_file_data_get_observable_id(iodefv2_file_data_t *ptr);

void iodefv2_file_data_set_observable_id(iodefv2_file_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_file_data_new_observable_id(iodefv2_file_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_file_t *iodefv2_file_data_get_next_file(iodefv2_file_data_t *file_data, iodefv2_file_t *file_cur);
void iodefv2_file_data_set_file(iodefv2_file_data_t *ptr, iodefv2_file_t *object, int pos);
int iodefv2_file_data_new_file(iodefv2_file_data_t *ptr, iodefv2_file_t **ret, int pos);



        
typedef enum {
        IODEFV2_SYSTEM_CATEGORY_ERROR = -1,
        IODEFV2_SYSTEM_CATEGORY_SOURCE = 1,
        IODEFV2_SYSTEM_CATEGORY_TARGET = 2,
        IODEFV2_SYSTEM_CATEGORY_INTERMEDIATE = 3,
        IODEFV2_SYSTEM_CATEGORY_SENSOR = 4,
        IODEFV2_SYSTEM_CATEGORY_INFRASTRUCTURE = 5,
        IODEFV2_SYSTEM_CATEGORY_EXT_VALUE = 6,
} iodefv2_system_category_t;
iodefv2_system_category_t iodefv2_system_category_to_numeric(const char *name);
const char *iodefv2_system_category_to_string(iodefv2_system_category_t val);

        
typedef enum {
        IODEFV2_SYSTEM_RESTRICTION_ERROR = -1,
        IODEFV2_SYSTEM_RESTRICTION_PUBLIC = 1,
        IODEFV2_SYSTEM_RESTRICTION_PARTNER = 2,
        IODEFV2_SYSTEM_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_SYSTEM_RESTRICTION_PRIVATE = 4,
        IODEFV2_SYSTEM_RESTRICTION_DEFAULT = 5,
        IODEFV2_SYSTEM_RESTRICTION_WHITE = 6,
        IODEFV2_SYSTEM_RESTRICTION_GREEN = 7,
        IODEFV2_SYSTEM_RESTRICTION_AMBER = 8,
        IODEFV2_SYSTEM_RESTRICTION_RED = 9,
} iodefv2_system_restriction_t;
iodefv2_system_restriction_t iodefv2_system_restriction_to_numeric(const char *name);
const char *iodefv2_system_restriction_to_string(iodefv2_system_restriction_t val);

        
typedef enum {
        IODEFV2_SYSTEM_SPOOFED_ERROR = -1,
        IODEFV2_SYSTEM_SPOOFED_UNKNOWN = 1,
        IODEFV2_SYSTEM_SPOOFED_YES = 2,
        IODEFV2_SYSTEM_SPOOFED_NO = 3,
} iodefv2_system_spoofed_t;
iodefv2_system_spoofed_t iodefv2_system_spoofed_to_numeric(const char *name);
const char *iodefv2_system_spoofed_to_string(iodefv2_system_spoofed_t val);

        
typedef enum {
        IODEFV2_SYSTEM_VIRTUAL_ERROR = -1,
        IODEFV2_SYSTEM_VIRTUAL_YES = 1,
        IODEFV2_SYSTEM_VIRTUAL_NO = 2,
        IODEFV2_SYSTEM_VIRTUAL_UNKNOWN = 3,
} iodefv2_system_virtual_t;
iodefv2_system_virtual_t iodefv2_system_virtual_to_numeric(const char *name);
const char *iodefv2_system_virtual_to_string(iodefv2_system_virtual_t val);

        
typedef enum {
        IODEFV2_SYSTEM_OWNERSHIP_ERROR = -1,
        IODEFV2_SYSTEM_OWNERSHIP_ORGANIZATION = 1,
        IODEFV2_SYSTEM_OWNERSHIP_PERSONAL = 2,
        IODEFV2_SYSTEM_OWNERSHIP_PARTNER = 3,
        IODEFV2_SYSTEM_OWNERSHIP_CUSTOMER = 4,
        IODEFV2_SYSTEM_OWNERSHIP_NO_RELATIONSHIP = 5,
        IODEFV2_SYSTEM_OWNERSHIP_UNKNOWN = 6,
        IODEFV2_SYSTEM_OWNERSHIP_EXT_VALUE = 7,
} iodefv2_system_ownership_t;
iodefv2_system_ownership_t iodefv2_system_ownership_to_numeric(const char *name);
const char *iodefv2_system_ownership_to_string(iodefv2_system_ownership_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         iodefv2_system_category_t category;
 *         OPTIONAL_INT(iodefv2_system_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *ext_ownership;
 *         libiodefv2_string_t *ext_category;
 *         OPTIONAL_INT(iodefv2_system_spoofed_t, spoofed);
 *         OPTIONAL_INT(iodefv2_system_virtual_t, virtual);
 *         libiodefv2_string_t *observable_id;
 *         OPTIONAL_INT(iodefv2_system_ownership_t, ownership);
 *         libiodefv2_string_t *interface;
 *         iodefv2_node_t *node;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *description;
 *        LISTED_OBJECT(service_list, iodefv2_service_t);
 *         libiodefv2_string_t *asset_id;
 *        LISTED_OBJECT(counter_list, iodefv2_counter_t);
 *        LISTED_OBJECT(node_role_list, iodefv2_node_role_t);
 *         iodefv2_software_t *software;
 * } TYPE_ID(iodefv2_system_t, 120);
 */

typedef struct iodefv2_system iodefv2_system_t;


int iodefv2_system_new(iodefv2_system_t **ret);
int iodefv2_system_copy(const iodefv2_system_t *src, iodefv2_system_t *dst);
int iodefv2_system_clone(iodefv2_system_t *src, iodefv2_system_t **dst);
int iodefv2_system_compare(const iodefv2_system_t *obj1, const iodefv2_system_t *obj2);


iodefv2_system_t *iodefv2_system_ref(iodefv2_system_t *system);

#ifndef SWIG

int _iodefv2_system_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_system_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_system_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_system_destroy(iodefv2_system_t *ptr);




iodefv2_system_category_t iodefv2_system_get_category(iodefv2_system_t *ptr);

void iodefv2_system_set_category(iodefv2_system_t *ptr, iodefv2_system_category_t category);
int iodefv2_system_new_category(iodefv2_system_t *ptr, iodefv2_system_category_t **ret);



void iodefv2_system_unset_restriction(iodefv2_system_t *ptr);
iodefv2_system_restriction_t *iodefv2_system_get_restriction(iodefv2_system_t *ptr);

void iodefv2_system_set_restriction(iodefv2_system_t *ptr, iodefv2_system_restriction_t restriction);
int iodefv2_system_new_restriction(iodefv2_system_t *ptr, iodefv2_system_restriction_t **ret);



libiodefv2_string_t *iodefv2_system_get_ext_restriction(iodefv2_system_t *ptr);

void iodefv2_system_set_ext_restriction(iodefv2_system_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_system_new_ext_restriction(iodefv2_system_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_system_get_ext_ownership(iodefv2_system_t *ptr);

void iodefv2_system_set_ext_ownership(iodefv2_system_t *ptr, libiodefv2_string_t *ext_ownership);
int iodefv2_system_new_ext_ownership(iodefv2_system_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_system_get_ext_category(iodefv2_system_t *ptr);

void iodefv2_system_set_ext_category(iodefv2_system_t *ptr, libiodefv2_string_t *ext_category);
int iodefv2_system_new_ext_category(iodefv2_system_t *ptr, libiodefv2_string_t **ret);



void iodefv2_system_unset_spoofed(iodefv2_system_t *ptr);
iodefv2_system_spoofed_t *iodefv2_system_get_spoofed(iodefv2_system_t *ptr);

void iodefv2_system_set_spoofed(iodefv2_system_t *ptr, iodefv2_system_spoofed_t spoofed);
int iodefv2_system_new_spoofed(iodefv2_system_t *ptr, iodefv2_system_spoofed_t **ret);



void iodefv2_system_unset_virtual(iodefv2_system_t *ptr);
iodefv2_system_virtual_t *iodefv2_system_get_virtual(iodefv2_system_t *ptr);

void iodefv2_system_set_virtual(iodefv2_system_t *ptr, iodefv2_system_virtual_t virtual_sys);
int iodefv2_system_new_virtual(iodefv2_system_t *ptr, iodefv2_system_virtual_t **ret);



libiodefv2_string_t *iodefv2_system_get_observable_id(iodefv2_system_t *ptr);

void iodefv2_system_set_observable_id(iodefv2_system_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_system_new_observable_id(iodefv2_system_t *ptr, libiodefv2_string_t **ret);



void iodefv2_system_unset_ownership(iodefv2_system_t *ptr);
iodefv2_system_ownership_t *iodefv2_system_get_ownership(iodefv2_system_t *ptr);

void iodefv2_system_set_ownership(iodefv2_system_t *ptr, iodefv2_system_ownership_t ownership);
int iodefv2_system_new_ownership(iodefv2_system_t *ptr, iodefv2_system_ownership_t **ret);



libiodefv2_string_t *iodefv2_system_get_interface(iodefv2_system_t *ptr);

void iodefv2_system_set_interface(iodefv2_system_t *ptr, libiodefv2_string_t *interface);
int iodefv2_system_new_interface(iodefv2_system_t *ptr, libiodefv2_string_t **ret);



iodefv2_node_t *iodefv2_system_get_node(iodefv2_system_t *ptr);

void iodefv2_system_set_node(iodefv2_system_t *ptr, iodefv2_node_t *node);
int iodefv2_system_new_node(iodefv2_system_t *ptr, iodefv2_node_t **ret);


iodefv2_additional_data_t *iodefv2_system_get_next_additional_data(iodefv2_system_t *system, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_system_set_additional_data(iodefv2_system_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_system_new_additional_data(iodefv2_system_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_system_get_description(iodefv2_system_t *ptr);

void iodefv2_system_set_description(iodefv2_system_t *ptr, libiodefv2_string_t *description);
int iodefv2_system_new_description(iodefv2_system_t *ptr, libiodefv2_string_t **ret);


iodefv2_service_t *iodefv2_system_get_next_service(iodefv2_system_t *system, iodefv2_service_t *service_cur);
void iodefv2_system_set_service(iodefv2_system_t *ptr, iodefv2_service_t *object, int pos);
int iodefv2_system_new_service(iodefv2_system_t *ptr, iodefv2_service_t **ret, int pos);



libiodefv2_string_t *iodefv2_system_get_asset_id(iodefv2_system_t *ptr);

void iodefv2_system_set_asset_id(iodefv2_system_t *ptr, libiodefv2_string_t *asset_id);
int iodefv2_system_new_asset_id(iodefv2_system_t *ptr, libiodefv2_string_t **ret);


iodefv2_counter_t *iodefv2_system_get_next_counter(iodefv2_system_t *system, iodefv2_counter_t *counter_cur);
void iodefv2_system_set_counter(iodefv2_system_t *ptr, iodefv2_counter_t *object, int pos);
int iodefv2_system_new_counter(iodefv2_system_t *ptr, iodefv2_counter_t **ret, int pos);


iodefv2_node_role_t *iodefv2_system_get_next_node_role(iodefv2_system_t *system, iodefv2_node_role_t *node_role_cur);
void iodefv2_system_set_node_role(iodefv2_system_t *ptr, iodefv2_node_role_t *object, int pos);
int iodefv2_system_new_node_role(iodefv2_system_t *ptr, iodefv2_node_role_t **ret, int pos);



iodefv2_software_t *iodefv2_system_get_software(iodefv2_system_t *ptr);

void iodefv2_system_set_software(iodefv2_system_t *ptr, iodefv2_software_t *software);
int iodefv2_system_new_software(iodefv2_system_t *ptr, iodefv2_software_t **ret);



        
typedef enum {
        IODEFV2_RECORD_DATA_RESTRICTION_ERROR = -1,
        IODEFV2_RECORD_DATA_RESTRICTION_PUBLIC = 1,
        IODEFV2_RECORD_DATA_RESTRICTION_PARTNER = 2,
        IODEFV2_RECORD_DATA_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_RECORD_DATA_RESTRICTION_PRIVATE = 4,
        IODEFV2_RECORD_DATA_RESTRICTION_DEFAULT = 5,
        IODEFV2_RECORD_DATA_RESTRICTION_WHITE = 6,
        IODEFV2_RECORD_DATA_RESTRICTION_GREEN = 7,
        IODEFV2_RECORD_DATA_RESTRICTION_AMBER = 8,
        IODEFV2_RECORD_DATA_RESTRICTION_RED = 9,
} iodefv2_record_data_restriction_t;
iodefv2_record_data_restriction_t iodefv2_record_data_restriction_to_numeric(const char *name);
const char *iodefv2_record_data_restriction_to_string(iodefv2_record_data_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_record_data_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         libiodefv2_string_t *description;
 *         libiodefv2_string_t *url;
 *        LISTED_OBJECT(certificate_data_list, iodefv2_certificate_data_t);
 *        LISTED_OBJECT(record_pattern_list, iodefv2_record_pattern_t);
 *         iodefv2_time_t *date_time;
 *        LISTED_OBJECT(windows_registry_keys_modified_list, iodefv2_windows_registry_keys_modified_t);
 *        LISTED_OBJECT(file_data_list, iodefv2_file_data_t);
 *         iodefv2_software_t *software;
 * } TYPE_ID(iodefv2_record_data_t, 122);
 */

typedef struct iodefv2_record_data iodefv2_record_data_t;


int iodefv2_record_data_new(iodefv2_record_data_t **ret);
int iodefv2_record_data_copy(const iodefv2_record_data_t *src, iodefv2_record_data_t *dst);
int iodefv2_record_data_clone(iodefv2_record_data_t *src, iodefv2_record_data_t **dst);
int iodefv2_record_data_compare(const iodefv2_record_data_t *obj1, const iodefv2_record_data_t *obj2);


iodefv2_record_data_t *iodefv2_record_data_ref(iodefv2_record_data_t *record_data);

#ifndef SWIG

int _iodefv2_record_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_record_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_record_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_record_data_destroy(iodefv2_record_data_t *ptr);




void iodefv2_record_data_unset_restriction(iodefv2_record_data_t *ptr);
iodefv2_record_data_restriction_t *iodefv2_record_data_get_restriction(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_restriction(iodefv2_record_data_t *ptr, iodefv2_record_data_restriction_t restriction);
int iodefv2_record_data_new_restriction(iodefv2_record_data_t *ptr, iodefv2_record_data_restriction_t **ret);



libiodefv2_string_t *iodefv2_record_data_get_ext_restriction(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_ext_restriction(iodefv2_record_data_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_record_data_new_ext_restriction(iodefv2_record_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_record_data_get_observable_id(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_observable_id(iodefv2_record_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_record_data_new_observable_id(iodefv2_record_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_record_data_get_next_additional_data(iodefv2_record_data_t *record_data, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_record_data_set_additional_data(iodefv2_record_data_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_record_data_new_additional_data(iodefv2_record_data_t *ptr, iodefv2_additional_data_t **ret, int pos);



libiodefv2_string_t *iodefv2_record_data_get_description(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_description(iodefv2_record_data_t *ptr, libiodefv2_string_t *description);
int iodefv2_record_data_new_description(iodefv2_record_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_record_data_get_url(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_url(iodefv2_record_data_t *ptr, libiodefv2_string_t *url);
int iodefv2_record_data_new_url(iodefv2_record_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_certificate_data_t *iodefv2_record_data_get_next_certificate_data(iodefv2_record_data_t *record_data, iodefv2_certificate_data_t *certificate_data_cur);
void iodefv2_record_data_set_certificate_data(iodefv2_record_data_t *ptr, iodefv2_certificate_data_t *object, int pos);
int iodefv2_record_data_new_certificate_data(iodefv2_record_data_t *ptr, iodefv2_certificate_data_t **ret, int pos);


iodefv2_record_pattern_t *iodefv2_record_data_get_next_record_pattern(iodefv2_record_data_t *record_data, iodefv2_record_pattern_t *record_pattern_cur);
void iodefv2_record_data_set_record_pattern(iodefv2_record_data_t *ptr, iodefv2_record_pattern_t *object, int pos);
int iodefv2_record_data_new_record_pattern(iodefv2_record_data_t *ptr, iodefv2_record_pattern_t **ret, int pos);



iodefv2_time_t *iodefv2_record_data_get_date_time(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_date_time(iodefv2_record_data_t *ptr, iodefv2_time_t *date_time);
int iodefv2_record_data_new_date_time(iodefv2_record_data_t *ptr, iodefv2_time_t **ret);


iodefv2_windows_registry_keys_modified_t *iodefv2_record_data_get_next_windows_registry_keys_modified(iodefv2_record_data_t *record_data, iodefv2_windows_registry_keys_modified_t *windows_registry_keys_modified_cur);
void iodefv2_record_data_set_windows_registry_keys_modified(iodefv2_record_data_t *ptr, iodefv2_windows_registry_keys_modified_t *object, int pos);
int iodefv2_record_data_new_windows_registry_keys_modified(iodefv2_record_data_t *ptr, iodefv2_windows_registry_keys_modified_t **ret, int pos);


iodefv2_file_data_t *iodefv2_record_data_get_next_file_data(iodefv2_record_data_t *record_data, iodefv2_file_data_t *file_data_cur);
void iodefv2_record_data_set_file_data(iodefv2_record_data_t *ptr, iodefv2_file_data_t *object, int pos);
int iodefv2_record_data_new_file_data(iodefv2_record_data_t *ptr, iodefv2_file_data_t **ret, int pos);



iodefv2_software_t *iodefv2_record_data_get_software(iodefv2_record_data_t *ptr);

void iodefv2_record_data_set_software(iodefv2_record_data_t *ptr, iodefv2_software_t *software);
int iodefv2_record_data_new_software(iodefv2_record_data_t *ptr, iodefv2_software_t **ret);



        
typedef enum {
        IODEFV2_RECORD_RESTRICTION_ERROR = -1,
        IODEFV2_RECORD_RESTRICTION_PUBLIC = 1,
        IODEFV2_RECORD_RESTRICTION_PARTNER = 2,
        IODEFV2_RECORD_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_RECORD_RESTRICTION_PRIVATE = 4,
        IODEFV2_RECORD_RESTRICTION_DEFAULT = 5,
        IODEFV2_RECORD_RESTRICTION_WHITE = 6,
        IODEFV2_RECORD_RESTRICTION_GREEN = 7,
        IODEFV2_RECORD_RESTRICTION_AMBER = 8,
        IODEFV2_RECORD_RESTRICTION_RED = 9,
} iodefv2_record_restriction_t;
iodefv2_record_restriction_t iodefv2_record_restriction_to_numeric(const char *name);
const char *iodefv2_record_restriction_to_string(iodefv2_record_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_record_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *        LISTED_OBJECT(record_data_list, iodefv2_record_data_t);
 * } TYPE_ID(iodefv2_record_t, 124);
 */

typedef struct iodefv2_record iodefv2_record_t;


int iodefv2_record_new(iodefv2_record_t **ret);
int iodefv2_record_copy(const iodefv2_record_t *src, iodefv2_record_t *dst);
int iodefv2_record_clone(iodefv2_record_t *src, iodefv2_record_t **dst);
int iodefv2_record_compare(const iodefv2_record_t *obj1, const iodefv2_record_t *obj2);


iodefv2_record_t *iodefv2_record_ref(iodefv2_record_t *record);

#ifndef SWIG

int _iodefv2_record_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_record_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_record_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_record_destroy(iodefv2_record_t *ptr);




void iodefv2_record_unset_restriction(iodefv2_record_t *ptr);
iodefv2_record_restriction_t *iodefv2_record_get_restriction(iodefv2_record_t *ptr);

void iodefv2_record_set_restriction(iodefv2_record_t *ptr, iodefv2_record_restriction_t restriction);
int iodefv2_record_new_restriction(iodefv2_record_t *ptr, iodefv2_record_restriction_t **ret);



libiodefv2_string_t *iodefv2_record_get_ext_restriction(iodefv2_record_t *ptr);

void iodefv2_record_set_ext_restriction(iodefv2_record_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_record_new_ext_restriction(iodefv2_record_t *ptr, libiodefv2_string_t **ret);


iodefv2_record_data_t *iodefv2_record_get_next_record_data(iodefv2_record_t *record, iodefv2_record_data_t *record_data_cur);
void iodefv2_record_set_record_data(iodefv2_record_t *ptr, iodefv2_record_data_t *object, int pos);
int iodefv2_record_new_record_data(iodefv2_record_t *ptr, iodefv2_record_data_t **ret, int pos);



        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(system_list, iodefv2_system_t);
 * } TYPE_ID(iodefv2_flow_t, 125);
 */

typedef struct iodefv2_flow iodefv2_flow_t;


int iodefv2_flow_new(iodefv2_flow_t **ret);
int iodefv2_flow_copy(const iodefv2_flow_t *src, iodefv2_flow_t *dst);
int iodefv2_flow_clone(iodefv2_flow_t *src, iodefv2_flow_t **dst);
int iodefv2_flow_compare(const iodefv2_flow_t *obj1, const iodefv2_flow_t *obj2);


iodefv2_flow_t *iodefv2_flow_ref(iodefv2_flow_t *flow);

#ifndef SWIG

int _iodefv2_flow_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_flow_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_flow_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_flow_destroy(iodefv2_flow_t *ptr);



iodefv2_system_t *iodefv2_flow_get_next_system(iodefv2_flow_t *flow, iodefv2_system_t *system_cur);
void iodefv2_flow_set_system(iodefv2_flow_t *ptr, iodefv2_system_t *object, int pos);
int iodefv2_flow_new_system(iodefv2_flow_t *ptr, iodefv2_system_t **ret, int pos);



        
typedef enum {
        IODEFV2_EVENT_DATA_RESTRICTION_ERROR = -1,
        IODEFV2_EVENT_DATA_RESTRICTION_PUBLIC = 1,
        IODEFV2_EVENT_DATA_RESTRICTION_PARTNER = 2,
        IODEFV2_EVENT_DATA_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_EVENT_DATA_RESTRICTION_PRIVATE = 4,
        IODEFV2_EVENT_DATA_RESTRICTION_DEFAULT = 5,
        IODEFV2_EVENT_DATA_RESTRICTION_WHITE = 6,
        IODEFV2_EVENT_DATA_RESTRICTION_GREEN = 7,
        IODEFV2_EVENT_DATA_RESTRICTION_AMBER = 8,
        IODEFV2_EVENT_DATA_RESTRICTION_RED = 9,
} iodefv2_event_data_restriction_t;
iodefv2_event_data_restriction_t iodefv2_event_data_restriction_to_numeric(const char *name);
const char *iodefv2_event_data_restriction_to_string(iodefv2_event_data_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_event_data_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         libiodefv2_string_t *observable_id;
 *         iodefv2_time_t *detect_time;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_time_t *report_time;
 *         libiodefv2_string_t *description;
 *        LISTED_OBJECT(flow_list, iodefv2_flow_t);
 *        LISTED_OBJECT(expectation_list, iodefv2_expectation_t);
 *         iodefv2_record_t *record;
 *        LISTED_OBJECT(contact_list, iodefv2_contact_t);
 *         iodefv2_time_t *start_time;
 *         iodefv2_time_t *end_time;
 *         iodefv2_assessment_t *assessment;
 *        LISTED_OBJECT(method_list, iodefv2_method_t);
 *         iodefv2_time_t *recovery_time;
 *        LISTED_OBJECT(discovery_list, iodefv2_discovery_t);
 * } TYPE_ID(iodefv2_event_data_t, 127);
 */

typedef struct iodefv2_event_data iodefv2_event_data_t;


int iodefv2_event_data_new(iodefv2_event_data_t **ret);
int iodefv2_event_data_copy(const iodefv2_event_data_t *src, iodefv2_event_data_t *dst);
int iodefv2_event_data_clone(iodefv2_event_data_t *src, iodefv2_event_data_t **dst);
int iodefv2_event_data_compare(const iodefv2_event_data_t *obj1, const iodefv2_event_data_t *obj2);


iodefv2_event_data_t *iodefv2_event_data_ref(iodefv2_event_data_t *event_data);

#ifndef SWIG

int _iodefv2_event_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_event_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_event_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_event_data_destroy(iodefv2_event_data_t *ptr);




void iodefv2_event_data_unset_restriction(iodefv2_event_data_t *ptr);
iodefv2_event_data_restriction_t *iodefv2_event_data_get_restriction(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_restriction(iodefv2_event_data_t *ptr, iodefv2_event_data_restriction_t restriction);
int iodefv2_event_data_new_restriction(iodefv2_event_data_t *ptr, iodefv2_event_data_restriction_t **ret);



libiodefv2_string_t *iodefv2_event_data_get_ext_restriction(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_ext_restriction(iodefv2_event_data_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_event_data_new_ext_restriction(iodefv2_event_data_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_event_data_get_observable_id(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_observable_id(iodefv2_event_data_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_event_data_new_observable_id(iodefv2_event_data_t *ptr, libiodefv2_string_t **ret);



iodefv2_time_t *iodefv2_event_data_get_detect_time(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_detect_time(iodefv2_event_data_t *ptr, iodefv2_time_t *detect_time);
int iodefv2_event_data_new_detect_time(iodefv2_event_data_t *ptr, iodefv2_time_t **ret);


iodefv2_additional_data_t *iodefv2_event_data_get_next_additional_data(iodefv2_event_data_t *event_data, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_event_data_set_additional_data(iodefv2_event_data_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_event_data_new_additional_data(iodefv2_event_data_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_time_t *iodefv2_event_data_get_report_time(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_report_time(iodefv2_event_data_t *ptr, iodefv2_time_t *report_time);
int iodefv2_event_data_new_report_time(iodefv2_event_data_t *ptr, iodefv2_time_t **ret);



libiodefv2_string_t *iodefv2_event_data_get_description(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_description(iodefv2_event_data_t *ptr, libiodefv2_string_t *description);
int iodefv2_event_data_new_description(iodefv2_event_data_t *ptr, libiodefv2_string_t **ret);


iodefv2_flow_t *iodefv2_event_data_get_next_flow(iodefv2_event_data_t *event_data, iodefv2_flow_t *flow_cur);
void iodefv2_event_data_set_flow(iodefv2_event_data_t *ptr, iodefv2_flow_t *object, int pos);
int iodefv2_event_data_new_flow(iodefv2_event_data_t *ptr, iodefv2_flow_t **ret, int pos);


iodefv2_expectation_t *iodefv2_event_data_get_next_expectation(iodefv2_event_data_t *event_data, iodefv2_expectation_t *expectation_cur);
void iodefv2_event_data_set_expectation(iodefv2_event_data_t *ptr, iodefv2_expectation_t *object, int pos);
int iodefv2_event_data_new_expectation(iodefv2_event_data_t *ptr, iodefv2_expectation_t **ret, int pos);



iodefv2_record_t *iodefv2_event_data_get_record(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_record(iodefv2_event_data_t *ptr, iodefv2_record_t *record);
int iodefv2_event_data_new_record(iodefv2_event_data_t *ptr, iodefv2_record_t **ret);


iodefv2_contact_t *iodefv2_event_data_get_next_contact(iodefv2_event_data_t *event_data, iodefv2_contact_t *contact_cur);
void iodefv2_event_data_set_contact(iodefv2_event_data_t *ptr, iodefv2_contact_t *object, int pos);
int iodefv2_event_data_new_contact(iodefv2_event_data_t *ptr, iodefv2_contact_t **ret, int pos);



iodefv2_time_t *iodefv2_event_data_get_start_time(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_start_time(iodefv2_event_data_t *ptr, iodefv2_time_t *start_time);
int iodefv2_event_data_new_start_time(iodefv2_event_data_t *ptr, iodefv2_time_t **ret);



iodefv2_time_t *iodefv2_event_data_get_end_time(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_end_time(iodefv2_event_data_t *ptr, iodefv2_time_t *end_time);
int iodefv2_event_data_new_end_time(iodefv2_event_data_t *ptr, iodefv2_time_t **ret);



iodefv2_assessment_t *iodefv2_event_data_get_assessment(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_assessment(iodefv2_event_data_t *ptr, iodefv2_assessment_t *assessment);
int iodefv2_event_data_new_assessment(iodefv2_event_data_t *ptr, iodefv2_assessment_t **ret);


iodefv2_method_t *iodefv2_event_data_get_next_method(iodefv2_event_data_t *event_data, iodefv2_method_t *method_cur);
void iodefv2_event_data_set_method(iodefv2_event_data_t *ptr, iodefv2_method_t *object, int pos);
int iodefv2_event_data_new_method(iodefv2_event_data_t *ptr, iodefv2_method_t **ret, int pos);



iodefv2_time_t *iodefv2_event_data_get_recovery_time(iodefv2_event_data_t *ptr);

void iodefv2_event_data_set_recovery_time(iodefv2_event_data_t *ptr, iodefv2_time_t *recovery_time);
int iodefv2_event_data_new_recovery_time(iodefv2_event_data_t *ptr, iodefv2_time_t **ret);


iodefv2_discovery_t *iodefv2_event_data_get_next_discovery(iodefv2_event_data_t *event_data, iodefv2_discovery_t *discovery_cur);
void iodefv2_event_data_set_discovery(iodefv2_event_data_t *ptr, iodefv2_discovery_t *object, int pos);
int iodefv2_event_data_new_discovery(iodefv2_event_data_t *ptr, iodefv2_discovery_t **ret, int pos);



        
typedef enum {
        IODEFV2_OBSERVABLE_RESTRICTION_ERROR = -1,
        IODEFV2_OBSERVABLE_RESTRICTION_PUBLIC = 1,
        IODEFV2_OBSERVABLE_RESTRICTION_PARTNER = 2,
        IODEFV2_OBSERVABLE_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_OBSERVABLE_RESTRICTION_PRIVATE = 4,
        IODEFV2_OBSERVABLE_RESTRICTION_DEFAULT = 5,
        IODEFV2_OBSERVABLE_RESTRICTION_WHITE = 6,
        IODEFV2_OBSERVABLE_RESTRICTION_GREEN = 7,
        IODEFV2_OBSERVABLE_RESTRICTION_AMBER = 8,
        IODEFV2_OBSERVABLE_RESTRICTION_RED = 9,
} iodefv2_observable_restriction_t;
iodefv2_observable_restriction_t iodefv2_observable_restriction_to_numeric(const char *name);
const char *iodefv2_observable_restriction_to_string(iodefv2_observable_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_observable_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *         iodefv2_detection_pattern_t *detection_pattern;
 *         iodefv2_service_t *service;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_system_t *system;
 *         iodefv2_domain_data_t *domain_data;
 *         iodefv2_email_data_t *email_data;
 *         iodefv2_assessment_t *assessment;
 *         iodefv2_record_data_t *record_data;
 *         iodefv2_reference_t *reference;
 *         iodefv2_history_item_t *history_item;
 *         iodefv2_bulk_observable_t *bulk_observable;
 *         iodefv2_certificate_data_t *certificate_data;
 *         iodefv2_expectation_t *expectation;
 *         iodefv2_windows_registry_keys_modified_t *windows_registry_keys_modified;
 *         iodefv2_address_t *address;
 *         iodefv2_event_data_t *event_data;
 *         iodefv2_file_data_t *file_data;
 *         iodefv2_registry_handle_t *registry_handle;
 * } TYPE_ID(iodefv2_observable_t, 129);
 */

typedef struct iodefv2_observable iodefv2_observable_t;


int iodefv2_observable_new(iodefv2_observable_t **ret);
int iodefv2_observable_copy(const iodefv2_observable_t *src, iodefv2_observable_t *dst);
int iodefv2_observable_clone(iodefv2_observable_t *src, iodefv2_observable_t **dst);
int iodefv2_observable_compare(const iodefv2_observable_t *obj1, const iodefv2_observable_t *obj2);


iodefv2_observable_t *iodefv2_observable_ref(iodefv2_observable_t *observable);

#ifndef SWIG

int _iodefv2_observable_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_observable_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_observable_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_observable_destroy(iodefv2_observable_t *ptr);




void iodefv2_observable_unset_restriction(iodefv2_observable_t *ptr);
iodefv2_observable_restriction_t *iodefv2_observable_get_restriction(iodefv2_observable_t *ptr);

void iodefv2_observable_set_restriction(iodefv2_observable_t *ptr, iodefv2_observable_restriction_t restriction);
int iodefv2_observable_new_restriction(iodefv2_observable_t *ptr, iodefv2_observable_restriction_t **ret);



libiodefv2_string_t *iodefv2_observable_get_ext_restriction(iodefv2_observable_t *ptr);

void iodefv2_observable_set_ext_restriction(iodefv2_observable_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_observable_new_ext_restriction(iodefv2_observable_t *ptr, libiodefv2_string_t **ret);



iodefv2_detection_pattern_t *iodefv2_observable_get_detection_pattern(iodefv2_observable_t *ptr);

void iodefv2_observable_set_detection_pattern(iodefv2_observable_t *ptr, iodefv2_detection_pattern_t *detection_pattern);
int iodefv2_observable_new_detection_pattern(iodefv2_observable_t *ptr, iodefv2_detection_pattern_t **ret);



iodefv2_service_t *iodefv2_observable_get_service(iodefv2_observable_t *ptr);

void iodefv2_observable_set_service(iodefv2_observable_t *ptr, iodefv2_service_t *service);
int iodefv2_observable_new_service(iodefv2_observable_t *ptr, iodefv2_service_t **ret);


iodefv2_additional_data_t *iodefv2_observable_get_next_additional_data(iodefv2_observable_t *observable, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_observable_set_additional_data(iodefv2_observable_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_observable_new_additional_data(iodefv2_observable_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_system_t *iodefv2_observable_get_system(iodefv2_observable_t *ptr);

void iodefv2_observable_set_system(iodefv2_observable_t *ptr, iodefv2_system_t *system);
int iodefv2_observable_new_system(iodefv2_observable_t *ptr, iodefv2_system_t **ret);



iodefv2_domain_data_t *iodefv2_observable_get_domain_data(iodefv2_observable_t *ptr);

void iodefv2_observable_set_domain_data(iodefv2_observable_t *ptr, iodefv2_domain_data_t *domain_data);
int iodefv2_observable_new_domain_data(iodefv2_observable_t *ptr, iodefv2_domain_data_t **ret);



iodefv2_email_data_t *iodefv2_observable_get_email_data(iodefv2_observable_t *ptr);

void iodefv2_observable_set_email_data(iodefv2_observable_t *ptr, iodefv2_email_data_t *email_data);
int iodefv2_observable_new_email_data(iodefv2_observable_t *ptr, iodefv2_email_data_t **ret);



iodefv2_assessment_t *iodefv2_observable_get_assessment(iodefv2_observable_t *ptr);

void iodefv2_observable_set_assessment(iodefv2_observable_t *ptr, iodefv2_assessment_t *assessment);
int iodefv2_observable_new_assessment(iodefv2_observable_t *ptr, iodefv2_assessment_t **ret);



iodefv2_record_data_t *iodefv2_observable_get_record_data(iodefv2_observable_t *ptr);

void iodefv2_observable_set_record_data(iodefv2_observable_t *ptr, iodefv2_record_data_t *record_data);
int iodefv2_observable_new_record_data(iodefv2_observable_t *ptr, iodefv2_record_data_t **ret);



iodefv2_reference_t *iodefv2_observable_get_reference(iodefv2_observable_t *ptr);

void iodefv2_observable_set_reference(iodefv2_observable_t *ptr, iodefv2_reference_t *reference);
int iodefv2_observable_new_reference(iodefv2_observable_t *ptr, iodefv2_reference_t **ret);



iodefv2_history_item_t *iodefv2_observable_get_history_item(iodefv2_observable_t *ptr);

void iodefv2_observable_set_history_item(iodefv2_observable_t *ptr, iodefv2_history_item_t *history_item);
int iodefv2_observable_new_history_item(iodefv2_observable_t *ptr, iodefv2_history_item_t **ret);



iodefv2_bulk_observable_t *iodefv2_observable_get_bulk_observable(iodefv2_observable_t *ptr);

void iodefv2_observable_set_bulk_observable(iodefv2_observable_t *ptr, iodefv2_bulk_observable_t *bulk_observable);
int iodefv2_observable_new_bulk_observable(iodefv2_observable_t *ptr, iodefv2_bulk_observable_t **ret);



iodefv2_certificate_data_t *iodefv2_observable_get_certificate_data(iodefv2_observable_t *ptr);

void iodefv2_observable_set_certificate_data(iodefv2_observable_t *ptr, iodefv2_certificate_data_t *certificate_data);
int iodefv2_observable_new_certificate_data(iodefv2_observable_t *ptr, iodefv2_certificate_data_t **ret);



iodefv2_expectation_t *iodefv2_observable_get_expectation(iodefv2_observable_t *ptr);

void iodefv2_observable_set_expectation(iodefv2_observable_t *ptr, iodefv2_expectation_t *expectation);
int iodefv2_observable_new_expectation(iodefv2_observable_t *ptr, iodefv2_expectation_t **ret);



iodefv2_windows_registry_keys_modified_t *iodefv2_observable_get_windows_registry_keys_modified(iodefv2_observable_t *ptr);

void iodefv2_observable_set_windows_registry_keys_modified(iodefv2_observable_t *ptr, iodefv2_windows_registry_keys_modified_t *windows_registry_keys_modified);
int iodefv2_observable_new_windows_registry_keys_modified(iodefv2_observable_t *ptr, iodefv2_windows_registry_keys_modified_t **ret);



iodefv2_address_t *iodefv2_observable_get_address(iodefv2_observable_t *ptr);

void iodefv2_observable_set_address(iodefv2_observable_t *ptr, iodefv2_address_t *address);
int iodefv2_observable_new_address(iodefv2_observable_t *ptr, iodefv2_address_t **ret);



iodefv2_event_data_t *iodefv2_observable_get_event_data(iodefv2_observable_t *ptr);

void iodefv2_observable_set_event_data(iodefv2_observable_t *ptr, iodefv2_event_data_t *event_data);
int iodefv2_observable_new_event_data(iodefv2_observable_t *ptr, iodefv2_event_data_t **ret);



iodefv2_file_data_t *iodefv2_observable_get_file_data(iodefv2_observable_t *ptr);

void iodefv2_observable_set_file_data(iodefv2_observable_t *ptr, iodefv2_file_data_t *file_data);
int iodefv2_observable_new_file_data(iodefv2_observable_t *ptr, iodefv2_file_data_t **ret);



iodefv2_registry_handle_t *iodefv2_observable_get_registry_handle(iodefv2_observable_t *ptr);

void iodefv2_observable_set_registry_handle(iodefv2_observable_t *ptr, iodefv2_registry_handle_t *registry_handle);
int iodefv2_observable_new_registry_handle(iodefv2_observable_t *ptr, iodefv2_registry_handle_t **ret);



        
typedef enum {
        IODEFV2_INDICATOR_EXPRESSION_OPERATOR_ERROR = -1,
        IODEFV2_INDICATOR_EXPRESSION_OPERATOR_NOT = 1,
        IODEFV2_INDICATOR_EXPRESSION_OPERATOR_AND = 2,
        IODEFV2_INDICATOR_EXPRESSION_OPERATOR_OR = 3,
        IODEFV2_INDICATOR_EXPRESSION_OPERATOR_XOR = 4,
} iodefv2_indicator_expression_operator_t;
iodefv2_indicator_expression_operator_t iodefv2_indicator_expression_operator_to_numeric(const char *name);
const char *iodefv2_indicator_expression_operator_to_string(iodefv2_indicator_expression_operator_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_indicator_expression_operator_t, operator);
 *         libiodefv2_string_t *ext_operator;
 *        LISTED_OBJECT(indicator_reference_list, iodefv2_indicator_reference_t);
 *        LISTED_OBJECT(observable_list, iodefv2_observable_t);
 *         iodefv2_confidence_t *confidence;
 *        LISTED_OBJECT(indicator_expression_list, iodefv2_indicator_expression_t);
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 * } TYPE_ID(iodefv2_indicator_expression_t, 131);
 */

typedef struct iodefv2_indicator_expression iodefv2_indicator_expression_t;


int iodefv2_indicator_expression_new(iodefv2_indicator_expression_t **ret);
int iodefv2_indicator_expression_copy(const iodefv2_indicator_expression_t *src, iodefv2_indicator_expression_t *dst);
int iodefv2_indicator_expression_clone(iodefv2_indicator_expression_t *src, iodefv2_indicator_expression_t **dst);
int iodefv2_indicator_expression_compare(const iodefv2_indicator_expression_t *obj1, const iodefv2_indicator_expression_t *obj2);


iodefv2_indicator_expression_t *iodefv2_indicator_expression_ref(iodefv2_indicator_expression_t *indicator_expression);

#ifndef SWIG

int _iodefv2_indicator_expression_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_indicator_expression_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_indicator_expression_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_indicator_expression_destroy(iodefv2_indicator_expression_t *ptr);




void iodefv2_indicator_expression_unset_operator(iodefv2_indicator_expression_t *ptr);
iodefv2_indicator_expression_operator_t *iodefv2_indicator_expression_get_operator(iodefv2_indicator_expression_t *ptr);

void iodefv2_indicator_expression_set_operator(iodefv2_indicator_expression_t *ptr, iodefv2_indicator_expression_operator_t operator_indic);
int iodefv2_indicator_expression_new_operator(iodefv2_indicator_expression_t *ptr, iodefv2_indicator_expression_operator_t **ret);



libiodefv2_string_t *iodefv2_indicator_expression_get_ext_operator(iodefv2_indicator_expression_t *ptr);

void iodefv2_indicator_expression_set_ext_operator(iodefv2_indicator_expression_t *ptr, libiodefv2_string_t *ext_operator);
int iodefv2_indicator_expression_new_ext_operator(iodefv2_indicator_expression_t *ptr, libiodefv2_string_t **ret);


iodefv2_indicator_reference_t *iodefv2_indicator_expression_get_next_indicator_reference(iodefv2_indicator_expression_t *indicator_expression, iodefv2_indicator_reference_t *indicator_reference_cur);
void iodefv2_indicator_expression_set_indicator_reference(iodefv2_indicator_expression_t *ptr, iodefv2_indicator_reference_t *object, int pos);
int iodefv2_indicator_expression_new_indicator_reference(iodefv2_indicator_expression_t *ptr, iodefv2_indicator_reference_t **ret, int pos);


iodefv2_observable_t *iodefv2_indicator_expression_get_next_observable(iodefv2_indicator_expression_t *indicator_expression, iodefv2_observable_t *observable_cur);
void iodefv2_indicator_expression_set_observable(iodefv2_indicator_expression_t *ptr, iodefv2_observable_t *object, int pos);
int iodefv2_indicator_expression_new_observable(iodefv2_indicator_expression_t *ptr, iodefv2_observable_t **ret, int pos);



iodefv2_confidence_t *iodefv2_indicator_expression_get_confidence(iodefv2_indicator_expression_t *ptr);

void iodefv2_indicator_expression_set_confidence(iodefv2_indicator_expression_t *ptr, iodefv2_confidence_t *confidence);
int iodefv2_indicator_expression_new_confidence(iodefv2_indicator_expression_t *ptr, iodefv2_confidence_t **ret);


iodefv2_indicator_expression_t *iodefv2_indicator_expression_get_next_indicator_expression(iodefv2_indicator_expression_t *indicator_expression, iodefv2_indicator_expression_t *indicator_expression_cur);
void iodefv2_indicator_expression_set_indicator_expression(iodefv2_indicator_expression_t *ptr, iodefv2_indicator_expression_t *object, int pos);
int iodefv2_indicator_expression_new_indicator_expression(iodefv2_indicator_expression_t *ptr, iodefv2_indicator_expression_t **ret, int pos);


iodefv2_additional_data_t *iodefv2_indicator_expression_get_next_additional_data(iodefv2_indicator_expression_t *indicator_expression, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_indicator_expression_set_additional_data(iodefv2_indicator_expression_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_indicator_expression_new_additional_data(iodefv2_indicator_expression_t *ptr, iodefv2_additional_data_t **ret, int pos);



        
typedef enum {
        IODEFV2_INDICATOR_RESTRICTION_ERROR = -1,
        IODEFV2_INDICATOR_RESTRICTION_PUBLIC = 1,
        IODEFV2_INDICATOR_RESTRICTION_PARTNER = 2,
        IODEFV2_INDICATOR_RESTRICTION_NEED_TO_KNOW = 3,
        IODEFV2_INDICATOR_RESTRICTION_PRIVATE = 4,
        IODEFV2_INDICATOR_RESTRICTION_DEFAULT = 5,
        IODEFV2_INDICATOR_RESTRICTION_WHITE = 6,
        IODEFV2_INDICATOR_RESTRICTION_GREEN = 7,
        IODEFV2_INDICATOR_RESTRICTION_AMBER = 8,
        IODEFV2_INDICATOR_RESTRICTION_RED = 9,
} iodefv2_indicator_restriction_t;
iodefv2_indicator_restriction_t iodefv2_indicator_restriction_to_numeric(const char *name);
const char *iodefv2_indicator_restriction_to_string(iodefv2_indicator_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(iodefv2_indicator_restriction_t, restriction);
 *         libiodefv2_string_t *ext_restriction;
 *        LISTED_OBJECT(alternative_indicator_id_list, iodefv2_alternative_indicator_id_t);
 *         iodefv2_confidence_t *confidence;
 *        LISTED_OBJECT(reference_list, iodefv2_reference_t);
 *         iodefv2_observable_t *observable;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_indicator_expression_t *indicator_expression;
 *        LISTED_OBJECT(contact_list, iodefv2_contact_t);
 *        LISTED_OBJECT(node_role_list, iodefv2_node_role_t);
 *         iodefv2_time_t *start_time;
 *        REQUIRED(iodefv2_indicator_id_t, *indicator_id);
 *         iodefv2_indicator_reference_t *indicator_reference;
 *         iodefv2_observable_reference_t *observable_reference;
 *        LISTED_OBJECT(attack_phase_list, iodefv2_attack_phase_t);
 *         iodefv2_time_t *end_time;
 * } TYPE_ID(iodefv2_indicator_t, 133);
 */

typedef struct iodefv2_indicator iodefv2_indicator_t;


int iodefv2_indicator_new(iodefv2_indicator_t **ret);
int iodefv2_indicator_copy(const iodefv2_indicator_t *src, iodefv2_indicator_t *dst);
int iodefv2_indicator_clone(iodefv2_indicator_t *src, iodefv2_indicator_t **dst);
int iodefv2_indicator_compare(const iodefv2_indicator_t *obj1, const iodefv2_indicator_t *obj2);


iodefv2_indicator_t *iodefv2_indicator_ref(iodefv2_indicator_t *indicator);

#ifndef SWIG

int _iodefv2_indicator_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_indicator_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_indicator_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_indicator_destroy(iodefv2_indicator_t *ptr);




void iodefv2_indicator_unset_restriction(iodefv2_indicator_t *ptr);
iodefv2_indicator_restriction_t *iodefv2_indicator_get_restriction(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_restriction(iodefv2_indicator_t *ptr, iodefv2_indicator_restriction_t restriction);
int iodefv2_indicator_new_restriction(iodefv2_indicator_t *ptr, iodefv2_indicator_restriction_t **ret);



libiodefv2_string_t *iodefv2_indicator_get_ext_restriction(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_ext_restriction(iodefv2_indicator_t *ptr, libiodefv2_string_t *ext_restriction);
int iodefv2_indicator_new_ext_restriction(iodefv2_indicator_t *ptr, libiodefv2_string_t **ret);


iodefv2_alternative_indicator_id_t *iodefv2_indicator_get_next_alternative_indicator_id(iodefv2_indicator_t *indicator, iodefv2_alternative_indicator_id_t *alternative_indicator_id_cur);
void iodefv2_indicator_set_alternative_indicator_id(iodefv2_indicator_t *ptr, iodefv2_alternative_indicator_id_t *object, int pos);
int iodefv2_indicator_new_alternative_indicator_id(iodefv2_indicator_t *ptr, iodefv2_alternative_indicator_id_t **ret, int pos);



iodefv2_confidence_t *iodefv2_indicator_get_confidence(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_confidence(iodefv2_indicator_t *ptr, iodefv2_confidence_t *confidence);
int iodefv2_indicator_new_confidence(iodefv2_indicator_t *ptr, iodefv2_confidence_t **ret);


iodefv2_reference_t *iodefv2_indicator_get_next_reference(iodefv2_indicator_t *indicator, iodefv2_reference_t *reference_cur);
void iodefv2_indicator_set_reference(iodefv2_indicator_t *ptr, iodefv2_reference_t *object, int pos);
int iodefv2_indicator_new_reference(iodefv2_indicator_t *ptr, iodefv2_reference_t **ret, int pos);



iodefv2_observable_t *iodefv2_indicator_get_observable(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_observable(iodefv2_indicator_t *ptr, iodefv2_observable_t *observable);
int iodefv2_indicator_new_observable(iodefv2_indicator_t *ptr, iodefv2_observable_t **ret);


iodefv2_additional_data_t *iodefv2_indicator_get_next_additional_data(iodefv2_indicator_t *indicator, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_indicator_set_additional_data(iodefv2_indicator_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_indicator_new_additional_data(iodefv2_indicator_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_indicator_expression_t *iodefv2_indicator_get_indicator_expression(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_indicator_expression(iodefv2_indicator_t *ptr, iodefv2_indicator_expression_t *indicator_expression);
int iodefv2_indicator_new_indicator_expression(iodefv2_indicator_t *ptr, iodefv2_indicator_expression_t **ret);


iodefv2_contact_t *iodefv2_indicator_get_next_contact(iodefv2_indicator_t *indicator, iodefv2_contact_t *contact_cur);
void iodefv2_indicator_set_contact(iodefv2_indicator_t *ptr, iodefv2_contact_t *object, int pos);
int iodefv2_indicator_new_contact(iodefv2_indicator_t *ptr, iodefv2_contact_t **ret, int pos);


iodefv2_node_role_t *iodefv2_indicator_get_next_node_role(iodefv2_indicator_t *indicator, iodefv2_node_role_t *node_role_cur);
void iodefv2_indicator_set_node_role(iodefv2_indicator_t *ptr, iodefv2_node_role_t *object, int pos);
int iodefv2_indicator_new_node_role(iodefv2_indicator_t *ptr, iodefv2_node_role_t **ret, int pos);



iodefv2_time_t *iodefv2_indicator_get_start_time(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_start_time(iodefv2_indicator_t *ptr, iodefv2_time_t *start_time);
int iodefv2_indicator_new_start_time(iodefv2_indicator_t *ptr, iodefv2_time_t **ret);



iodefv2_indicator_id_t *iodefv2_indicator_get_indicator_id(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_indicator_id(iodefv2_indicator_t *ptr, iodefv2_indicator_id_t *indicator_id);
int iodefv2_indicator_new_indicator_id(iodefv2_indicator_t *ptr, iodefv2_indicator_id_t **ret);



iodefv2_indicator_reference_t *iodefv2_indicator_get_indicator_reference(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_indicator_reference(iodefv2_indicator_t *ptr, iodefv2_indicator_reference_t *indicator_reference);
int iodefv2_indicator_new_indicator_reference(iodefv2_indicator_t *ptr, iodefv2_indicator_reference_t **ret);



iodefv2_observable_reference_t *iodefv2_indicator_get_observable_reference(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_observable_reference(iodefv2_indicator_t *ptr, iodefv2_observable_reference_t *observable_reference);
int iodefv2_indicator_new_observable_reference(iodefv2_indicator_t *ptr, iodefv2_observable_reference_t **ret);


iodefv2_attack_phase_t *iodefv2_indicator_get_next_attack_phase(iodefv2_indicator_t *indicator, iodefv2_attack_phase_t *attack_phase_cur);
void iodefv2_indicator_set_attack_phase(iodefv2_indicator_t *ptr, iodefv2_attack_phase_t *object, int pos);
int iodefv2_indicator_new_attack_phase(iodefv2_indicator_t *ptr, iodefv2_attack_phase_t **ret, int pos);



iodefv2_time_t *iodefv2_indicator_get_end_time(iodefv2_indicator_t *ptr);

void iodefv2_indicator_set_end_time(iodefv2_indicator_t *ptr, iodefv2_time_t *end_time);
int iodefv2_indicator_new_end_time(iodefv2_indicator_t *ptr, iodefv2_time_t **ret);



        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(indicator_list, iodefv2_indicator_t);
 * } TYPE_ID(iodefv2_indicator_data_t, 134);
 */

typedef struct iodefv2_indicator_data iodefv2_indicator_data_t;


int iodefv2_indicator_data_new(iodefv2_indicator_data_t **ret);
int iodefv2_indicator_data_copy(const iodefv2_indicator_data_t *src, iodefv2_indicator_data_t *dst);
int iodefv2_indicator_data_clone(iodefv2_indicator_data_t *src, iodefv2_indicator_data_t **dst);
int iodefv2_indicator_data_compare(const iodefv2_indicator_data_t *obj1, const iodefv2_indicator_data_t *obj2);


iodefv2_indicator_data_t *iodefv2_indicator_data_ref(iodefv2_indicator_data_t *indicator_data);

#ifndef SWIG

int _iodefv2_indicator_data_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_indicator_data_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_indicator_data_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_indicator_data_destroy(iodefv2_indicator_data_t *ptr);



iodefv2_indicator_t *iodefv2_indicator_data_get_next_indicator(iodefv2_indicator_data_t *indicator_data, iodefv2_indicator_t *indicator_cur);
void iodefv2_indicator_data_set_indicator(iodefv2_indicator_data_t *ptr, iodefv2_indicator_t *object, int pos);
int iodefv2_indicator_data_new_indicator(iodefv2_indicator_data_t *ptr, iodefv2_indicator_t **ret, int pos);



        
typedef enum {
        IODEFV2_INCIDENT_STATUS_ERROR = -1,
} iodefv2_incident_status_t;
iodefv2_incident_status_t iodefv2_incident_status_to_numeric(const char *name);
const char *iodefv2_incident_status_to_string(iodefv2_incident_status_t val);

        
typedef enum {
        IODEFV2_INCIDENT_LANG_ERROR = -1,
} iodefv2_incident_lang_t;
iodefv2_incident_lang_t iodefv2_incident_lang_to_numeric(const char *name);
const char *iodefv2_incident_lang_to_string(iodefv2_incident_lang_t val);

        
typedef enum {
        IODEFV2_INCIDENT_PURPOSE_ERROR = -1,
        IODEFV2_INCIDENT_PURPOSE_TRACEBACK = 1,
        IODEFV2_INCIDENT_PURPOSE_MITIGATION = 2,
        IODEFV2_INCIDENT_PURPOSE_REPORTING = 3,
        IODEFV2_INCIDENT_PURPOSE_WATCH = 4,
        IODEFV2_INCIDENT_PURPOSE_OTHER = 5,
        IODEFV2_INCIDENT_PURPOSE_EXT_VALUE = 6,
} iodefv2_incident_purpose_t;
iodefv2_incident_purpose_t iodefv2_incident_purpose_to_numeric(const char *name);
const char *iodefv2_incident_purpose_to_string(iodefv2_incident_purpose_t val);

        
typedef enum {
        IODEFV2_INCIDENT_RESTRICTION_ERROR = -1,
        IODEFV2_INCIDENT_RESTRICTION_PUBLIC = 1,
        IODEFV2_INCIDENT_RESTRICTION_NEED_TO_KNOW = 2,
        IODEFV2_INCIDENT_RESTRICTION_PRIVATE = 3,
        IODEFV2_INCIDENT_RESTRICTION_DEFAULT = 4,
} iodefv2_incident_restriction_t;
iodefv2_incident_restriction_t iodefv2_incident_restriction_to_numeric(const char *name);
const char *iodefv2_incident_restriction_to_string(iodefv2_incident_restriction_t val);

        


/*
 * struct {
 *       IODEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         iodefv2_incident_status_t status;
 *         OPTIONAL_INT(iodefv2_incident_lang_t, lang);
 *         libiodefv2_string_t *ext_purpose;
 *         iodefv2_incident_purpose_t purpose;
 *         libiodefv2_string_t *ext_status;
 *         OPTIONAL_INT(iodefv2_incident_restriction_t, restriction);
 *         libiodefv2_string_t *observable_id;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *         iodefv2_history_t *history;
 *         iodefv2_time_t *start_time;
 *         iodefv2_alternative_id_t *alternative_id;
 *        LISTED_OBJECT(contact_list, iodefv2_contact_t);
 *         iodefv2_related_activity_t *related_activity;
 *         iodefv2_time_t *end_time;
 *         iodefv2_time_t *generation_time;
 *        LISTED_OBJECT(assessment_list, iodefv2_assessment_t);
 *        LISTED_OBJECT(method_list, iodefv2_method_t);
 *         iodefv2_time_t *recovery_time;
 *        LISTED_OBJECT(discovery_list, iodefv2_discovery_t);
 *         iodefv2_time_t *detect_time;
 *         iodefv2_time_t *report_time;
 *         libiodefv2_string_t *description;
 *         iodefv2_indicator_data_t *indicator_data;
 *        LISTED_OBJECT(event_data_list, iodefv2_event_data_t);
 *         iodefv2_incident_id_t *incident_id;
 * } TYPE_ID(iodefv2_incident_t, 139);
 */

typedef struct iodefv2_incident iodefv2_incident_t;


int iodefv2_incident_new(iodefv2_incident_t **ret);
int iodefv2_incident_copy(const iodefv2_incident_t *src, iodefv2_incident_t *dst);
int iodefv2_incident_clone(iodefv2_incident_t *src, iodefv2_incident_t **dst);
int iodefv2_incident_compare(const iodefv2_incident_t *obj1, const iodefv2_incident_t *obj2);


iodefv2_incident_t *iodefv2_incident_ref(iodefv2_incident_t *incident);

#ifndef SWIG

int _iodefv2_incident_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_incident_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_incident_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_incident_destroy(iodefv2_incident_t *ptr);




iodefv2_incident_status_t iodefv2_incident_get_status(iodefv2_incident_t *ptr);

void iodefv2_incident_set_status(iodefv2_incident_t *ptr, iodefv2_incident_status_t status);
int iodefv2_incident_new_status(iodefv2_incident_t *ptr, iodefv2_incident_status_t **ret);



void iodefv2_incident_unset_lang(iodefv2_incident_t *ptr);
iodefv2_incident_lang_t *iodefv2_incident_get_lang(iodefv2_incident_t *ptr);

void iodefv2_incident_set_lang(iodefv2_incident_t *ptr, iodefv2_incident_lang_t lang);
int iodefv2_incident_new_lang(iodefv2_incident_t *ptr, iodefv2_incident_lang_t **ret);



libiodefv2_string_t *iodefv2_incident_get_ext_purpose(iodefv2_incident_t *ptr);

void iodefv2_incident_set_ext_purpose(iodefv2_incident_t *ptr, libiodefv2_string_t *ext_purpose);
int iodefv2_incident_new_ext_purpose(iodefv2_incident_t *ptr, libiodefv2_string_t **ret);



iodefv2_incident_purpose_t iodefv2_incident_get_purpose(iodefv2_incident_t *ptr);

void iodefv2_incident_set_purpose(iodefv2_incident_t *ptr, iodefv2_incident_purpose_t purpose);
int iodefv2_incident_new_purpose(iodefv2_incident_t *ptr, iodefv2_incident_purpose_t **ret);



libiodefv2_string_t *iodefv2_incident_get_ext_status(iodefv2_incident_t *ptr);

void iodefv2_incident_set_ext_status(iodefv2_incident_t *ptr, libiodefv2_string_t *ext_status);
int iodefv2_incident_new_ext_status(iodefv2_incident_t *ptr, libiodefv2_string_t **ret);



void iodefv2_incident_unset_restriction(iodefv2_incident_t *ptr);
iodefv2_incident_restriction_t *iodefv2_incident_get_restriction(iodefv2_incident_t *ptr);

void iodefv2_incident_set_restriction(iodefv2_incident_t *ptr, iodefv2_incident_restriction_t restriction);
int iodefv2_incident_new_restriction(iodefv2_incident_t *ptr, iodefv2_incident_restriction_t **ret);



libiodefv2_string_t *iodefv2_incident_get_observable_id(iodefv2_incident_t *ptr);

void iodefv2_incident_set_observable_id(iodefv2_incident_t *ptr, libiodefv2_string_t *observable_id);
int iodefv2_incident_new_observable_id(iodefv2_incident_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_incident_get_next_additional_data(iodefv2_incident_t *incident, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_incident_set_additional_data(iodefv2_incident_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_incident_new_additional_data(iodefv2_incident_t *ptr, iodefv2_additional_data_t **ret, int pos);



iodefv2_history_t *iodefv2_incident_get_history(iodefv2_incident_t *ptr);

void iodefv2_incident_set_history(iodefv2_incident_t *ptr, iodefv2_history_t *history);
int iodefv2_incident_new_history(iodefv2_incident_t *ptr, iodefv2_history_t **ret);



iodefv2_time_t *iodefv2_incident_get_start_time(iodefv2_incident_t *ptr);

void iodefv2_incident_set_start_time(iodefv2_incident_t *ptr, iodefv2_time_t *start_time);
int iodefv2_incident_new_start_time(iodefv2_incident_t *ptr, iodefv2_time_t **ret);



iodefv2_alternative_id_t *iodefv2_incident_get_alternative_id(iodefv2_incident_t *ptr);

void iodefv2_incident_set_alternative_id(iodefv2_incident_t *ptr, iodefv2_alternative_id_t *alternative_id);
int iodefv2_incident_new_alternative_id(iodefv2_incident_t *ptr, iodefv2_alternative_id_t **ret);


iodefv2_contact_t *iodefv2_incident_get_next_contact(iodefv2_incident_t *incident, iodefv2_contact_t *contact_cur);
void iodefv2_incident_set_contact(iodefv2_incident_t *ptr, iodefv2_contact_t *object, int pos);
int iodefv2_incident_new_contact(iodefv2_incident_t *ptr, iodefv2_contact_t **ret, int pos);



iodefv2_related_activity_t *iodefv2_incident_get_related_activity(iodefv2_incident_t *ptr);

void iodefv2_incident_set_related_activity(iodefv2_incident_t *ptr, iodefv2_related_activity_t *related_activity);
int iodefv2_incident_new_related_activity(iodefv2_incident_t *ptr, iodefv2_related_activity_t **ret);



iodefv2_time_t *iodefv2_incident_get_end_time(iodefv2_incident_t *ptr);

void iodefv2_incident_set_end_time(iodefv2_incident_t *ptr, iodefv2_time_t *end_time);
int iodefv2_incident_new_end_time(iodefv2_incident_t *ptr, iodefv2_time_t **ret);



iodefv2_time_t *iodefv2_incident_get_generation_time(iodefv2_incident_t *ptr);

void iodefv2_incident_set_generation_time(iodefv2_incident_t *ptr, iodefv2_time_t *generation_time);
int iodefv2_incident_new_generation_time(iodefv2_incident_t *ptr, iodefv2_time_t **ret);


iodefv2_assessment_t *iodefv2_incident_get_next_assessment(iodefv2_incident_t *incident, iodefv2_assessment_t *assessment_cur);
void iodefv2_incident_set_assessment(iodefv2_incident_t *ptr, iodefv2_assessment_t *object, int pos);
int iodefv2_incident_new_assessment(iodefv2_incident_t *ptr, iodefv2_assessment_t **ret, int pos);


iodefv2_method_t *iodefv2_incident_get_next_method(iodefv2_incident_t *incident, iodefv2_method_t *method_cur);
void iodefv2_incident_set_method(iodefv2_incident_t *ptr, iodefv2_method_t *object, int pos);
int iodefv2_incident_new_method(iodefv2_incident_t *ptr, iodefv2_method_t **ret, int pos);



iodefv2_time_t *iodefv2_incident_get_recovery_time(iodefv2_incident_t *ptr);

void iodefv2_incident_set_recovery_time(iodefv2_incident_t *ptr, iodefv2_time_t *recovery_time);
int iodefv2_incident_new_recovery_time(iodefv2_incident_t *ptr, iodefv2_time_t **ret);


iodefv2_discovery_t *iodefv2_incident_get_next_discovery(iodefv2_incident_t *incident, iodefv2_discovery_t *discovery_cur);
void iodefv2_incident_set_discovery(iodefv2_incident_t *ptr, iodefv2_discovery_t *object, int pos);
int iodefv2_incident_new_discovery(iodefv2_incident_t *ptr, iodefv2_discovery_t **ret, int pos);



iodefv2_time_t *iodefv2_incident_get_detect_time(iodefv2_incident_t *ptr);

void iodefv2_incident_set_detect_time(iodefv2_incident_t *ptr, iodefv2_time_t *detect_time);
int iodefv2_incident_new_detect_time(iodefv2_incident_t *ptr, iodefv2_time_t **ret);



iodefv2_time_t *iodefv2_incident_get_report_time(iodefv2_incident_t *ptr);

void iodefv2_incident_set_report_time(iodefv2_incident_t *ptr, iodefv2_time_t *report_time);
int iodefv2_incident_new_report_time(iodefv2_incident_t *ptr, iodefv2_time_t **ret);



libiodefv2_string_t *iodefv2_incident_get_description(iodefv2_incident_t *ptr);

void iodefv2_incident_set_description(iodefv2_incident_t *ptr, libiodefv2_string_t *description);
int iodefv2_incident_new_description(iodefv2_incident_t *ptr, libiodefv2_string_t **ret);



iodefv2_indicator_data_t *iodefv2_incident_get_indicator_data(iodefv2_incident_t *ptr);

void iodefv2_incident_set_indicator_data(iodefv2_incident_t *ptr, iodefv2_indicator_data_t *indicator_data);
int iodefv2_incident_new_indicator_data(iodefv2_incident_t *ptr, iodefv2_indicator_data_t **ret);


iodefv2_event_data_t *iodefv2_incident_get_next_event_data(iodefv2_incident_t *incident, iodefv2_event_data_t *event_data_cur);
void iodefv2_incident_set_event_data(iodefv2_incident_t *ptr, iodefv2_event_data_t *object, int pos);
int iodefv2_incident_new_event_data(iodefv2_incident_t *ptr, iodefv2_event_data_t **ret, int pos);



iodefv2_incident_id_t *iodefv2_incident_get_incident_id(iodefv2_incident_t *ptr);

void iodefv2_incident_set_incident_id(iodefv2_incident_t *ptr, iodefv2_incident_id_t *incident_id);
int iodefv2_incident_new_incident_id(iodefv2_incident_t *ptr, iodefv2_incident_id_t **ret);



        
typedef enum {
        IODEFV2_DOCUMENT_LANG_ERROR = -1,
} iodefv2_document_lang_t;
iodefv2_document_lang_t iodefv2_document_lang_to_numeric(const char *name);
const char *iodefv2_document_lang_to_string(iodefv2_document_lang_t val);

        


/*
 * struct {
 *       IODEFV2_OBJECT;
 *       REFCOUNT;
 *         iodefv2_document_lang_t lang;
 *         libiodefv2_string_t *formatid;
 *        REQUIRED(libiodefv2_string_t, *version);
 *         libiodefv2_string_t *private_enum_name;
 *         libiodefv2_string_t *private_enum_id;
 *        LISTED_OBJECT(additional_data_list, iodefv2_additional_data_t);
 *        LISTED_OBJECT(incident_list, iodefv2_incident_t);
 * } TYPE_ID(iodefv2_document_t, 141);
 */

typedef struct iodefv2_document iodefv2_document_t;


int iodefv2_document_new(iodefv2_document_t **ret);
int iodefv2_document_copy(const iodefv2_document_t *src, iodefv2_document_t *dst);
int iodefv2_document_clone(iodefv2_document_t *src, iodefv2_document_t **dst);
int iodefv2_document_compare(const iodefv2_document_t *obj1, const iodefv2_document_t *obj2);


iodefv2_document_t *iodefv2_document_ref(iodefv2_document_t *document);

#ifndef SWIG

int _iodefv2_document_get_child(void *p, iodefv2_class_child_id_t child, void **childptr);


int _iodefv2_document_new_child(void *p, iodefv2_class_child_id_t child, int n, void **ret);


int _iodefv2_document_destroy_child(void *p, iodefv2_class_child_id_t child, int n);

#endif

void iodefv2_document_destroy(iodefv2_document_t *ptr);




iodefv2_document_lang_t iodefv2_document_get_lang(iodefv2_document_t *ptr);

void iodefv2_document_set_lang(iodefv2_document_t *ptr, iodefv2_document_lang_t lang);
int iodefv2_document_new_lang(iodefv2_document_t *ptr, iodefv2_document_lang_t **ret);



libiodefv2_string_t *iodefv2_document_get_formatid(iodefv2_document_t *ptr);

void iodefv2_document_set_formatid(iodefv2_document_t *ptr, libiodefv2_string_t *formatid);
int iodefv2_document_new_formatid(iodefv2_document_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_document_get_version(iodefv2_document_t *ptr);

void iodefv2_document_set_version(iodefv2_document_t *ptr, libiodefv2_string_t *version);
int iodefv2_document_new_version(iodefv2_document_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_document_get_private_enum_name(iodefv2_document_t *ptr);

void iodefv2_document_set_private_enum_name(iodefv2_document_t *ptr, libiodefv2_string_t *private_enum_name);
int iodefv2_document_new_private_enum_name(iodefv2_document_t *ptr, libiodefv2_string_t **ret);



libiodefv2_string_t *iodefv2_document_get_private_enum_id(iodefv2_document_t *ptr);

void iodefv2_document_set_private_enum_id(iodefv2_document_t *ptr, libiodefv2_string_t *private_enum_id);
int iodefv2_document_new_private_enum_id(iodefv2_document_t *ptr, libiodefv2_string_t **ret);


iodefv2_additional_data_t *iodefv2_document_get_next_additional_data(iodefv2_document_t *document, iodefv2_additional_data_t *additional_data_cur);
void iodefv2_document_set_additional_data(iodefv2_document_t *ptr, iodefv2_additional_data_t *object, int pos);
int iodefv2_document_new_additional_data(iodefv2_document_t *ptr, iodefv2_additional_data_t **ret, int pos);


iodefv2_incident_t *iodefv2_document_get_next_incident(iodefv2_document_t *document, iodefv2_incident_t *incident_cur);
void iodefv2_document_set_incident(iodefv2_document_t *ptr, iodefv2_incident_t *object, int pos);
int iodefv2_document_new_incident(iodefv2_document_t *ptr, iodefv2_incident_t **ret, int pos);






int _iodefv2_additional_data_type_is_set(iodefv2_additional_data_t *ad);

#ifdef __cplusplus
  }
#endif

#define IODEFV2_CLASS_ID_TELEPHONE_TYPE 2
#define IODEFV2_CLASS_ID_TELEPHONE 3
#define IODEFV2_CLASS_ID_CERTIFICATE 4
#define IODEFV2_CLASS_ID_KEY_REGISTRYACTION 5
#define IODEFV2_CLASS_ID_KEY 6
#define IODEFV2_CLASS_ID_OBSERVABLE_REFERENCE 7
#define IODEFV2_CLASS_ID_REGISTRY_HANDLE_REGISTRY 11
#define IODEFV2_CLASS_ID_REGISTRY_HANDLE 12
#define IODEFV2_CLASS_ID_TIME_IMPACT_DURATION 13
#define IODEFV2_CLASS_ID_TIME_IMPACT_METRIC 14
#define IODEFV2_CLASS_ID_TIME_IMPACT_SEVERITY 15
#define IODEFV2_CLASS_ID_TIME_IMPACT 16
#define IODEFV2_CLASS_ID_RECORD_PATTERN_OFFSETUNIT 17
#define IODEFV2_CLASS_ID_RECORD_PATTERN_TYPE 18
#define IODEFV2_CLASS_ID_RECORD_PATTERN 19
#define IODEFV2_CLASS_ID_REFERENCE 20
#define IODEFV2_CLASS_ID_POSTAL_ADDRESS_TYPE 21
#define IODEFV2_CLASS_ID_POSTAL_ADDRESS 22
#define IODEFV2_CLASS_ID_NODE_ROLE_CATEGORY 23
#define IODEFV2_CLASS_ID_NODE_ROLE 24
#define IODEFV2_CLASS_ID_INCIDENT_ID_RESTRICTION 25
#define IODEFV2_CLASS_ID_INCIDENT_ID 26
#define IODEFV2_CLASS_ID_ALTERNATIVE_INDICATOR_ID_RESTRICTION 27
#define IODEFV2_CLASS_ID_ALTERNATIVE_INDICATOR_ID 28
#define IODEFV2_CLASS_ID_CONFIDENCE_RATING 29
#define IODEFV2_CLASS_ID_CONFIDENCE 30
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT_COMPLETION 31
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT_TYPE 32
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT_SEVERITY 33
#define IODEFV2_CLASS_ID_SYSTEM_IMPACT 34
#define IODEFV2_CLASS_ID_SOFTWARE_REFERENCE_DTYPE 35
#define IODEFV2_CLASS_ID_SOFTWARE_REFERENCE 36
#define IODEFV2_CLASS_ID_BUSINESS_IMPACT_TYPE 37
#define IODEFV2_CLASS_ID_BUSINESS_IMPACT_SEVERITY 38
#define IODEFV2_CLASS_ID_BUSINESS_IMPACT 39
#define IODEFV2_CLASS_ID_INDICATOR_REFERENCE 40
#define IODEFV2_CLASS_ID_EMAIL_TYPE 41
#define IODEFV2_CLASS_ID_EMAIL 42
#define IODEFV2_CLASS_ID_INTENDED_IMPACT_TYPE 43
#define IODEFV2_CLASS_ID_INTENDED_IMPACT_SEVERITY 44
#define IODEFV2_CLASS_ID_INTENDED_IMPACT 45
#define IODEFV2_CLASS_ID_ADDITIONAL_DATA_RESTRICTION 46
#define IODEFV2_CLASS_ID_ADDITIONAL_DATA_TYPE 47
#define IODEFV2_CLASS_ID_ADDITIONAL_DATA 48
#define IODEFV2_CLASS_ID_COUNTER_UNIT 49
#define IODEFV2_CLASS_ID_COUNTER_DURATION 50
#define IODEFV2_CLASS_ID_COUNTER_TYPE 51
#define IODEFV2_CLASS_ID_COUNTER 52
#define IODEFV2_CLASS_ID_MONETARY_IMPACT_SEVERITY 53
#define IODEFV2_CLASS_ID_MONETARY_IMPACT 54
#define IODEFV2_CLASS_ID_SERVICE_NAME 55
#define IODEFV2_CLASS_ID_INDICATOR_ID 56
#define IODEFV2_CLASS_ID_SIGNATURE_DATA 57
#define IODEFV2_CLASS_ID_ADDRESS_CATEGORY 58
#define IODEFV2_CLASS_ID_ADDRESS 59
#define IODEFV2_CLASS_ID_APPLICATION_HEADER 60
#define IODEFV2_CLASS_ID_CERTIFICATE_DATA_RESTRICTION 61
#define IODEFV2_CLASS_ID_CERTIFICATE_DATA 62
#define IODEFV2_CLASS_ID_THREAT_ACTOR_RESTRICTION 63
#define IODEFV2_CLASS_ID_THREAT_ACTOR 64
#define IODEFV2_CLASS_ID_METHOD_RESTRICTION 65
#define IODEFV2_CLASS_ID_METHOD 66
#define IODEFV2_CLASS_ID_ALTERNATIVE_ID_RESTRICTION 67
#define IODEFV2_CLASS_ID_ALTERNATIVE_ID 68
#define IODEFV2_CLASS_ID_SOFTWARE 69
#define IODEFV2_CLASS_ID_NAMESERVERS 70
#define IODEFV2_CLASS_ID_WINDOWS_REGISTRY_KEYS_MODIFIED 71
#define IODEFV2_CLASS_ID_CAMPAIGN_RESTRICTION 72
#define IODEFV2_CLASS_ID_CAMPAIGN 73
#define IODEFV2_CLASS_ID_ASSESSMENT_RESTRICTION 74
#define IODEFV2_CLASS_ID_ASSESSMENT_OCCURRENCE 75
#define IODEFV2_CLASS_ID_ASSESSMENT 76
#define IODEFV2_CLASS_ID_ATTACK_PHASE 77
#define IODEFV2_CLASS_ID_CONTACT_RESTRICTION 78
#define IODEFV2_CLASS_ID_CONTACT_ROLE 79
#define IODEFV2_CLASS_ID_CONTACT_TYPE 80
#define IODEFV2_CLASS_ID_CONTACT 81
#define IODEFV2_CLASS_ID_RELATED_ACTIVITY_RESTRICTION 82
#define IODEFV2_CLASS_ID_RELATED_ACTIVITY 83
#define IODEFV2_CLASS_ID_DOMAIN_CONTACTS 84
#define IODEFV2_CLASS_ID_HISTORY_ITEM_ACTION 85
#define IODEFV2_CLASS_ID_HISTORY_ITEM_RESTRICTION 86
#define IODEFV2_CLASS_ID_HISTORY_ITEM 87
#define IODEFV2_CLASS_ID_FUZZY_HASH 88
#define IODEFV2_CLASS_ID_HASH 89
#define IODEFV2_CLASS_ID_DETECTION_PATTERN_RESTRICTION 90
#define IODEFV2_CLASS_ID_DETECTION_PATTERN 91
#define IODEFV2_CLASS_ID_EXPECTATION_RESTRICTION 92
#define IODEFV2_CLASS_ID_EXPECTATION_SEVERITY 93
#define IODEFV2_CLASS_ID_EXPECTATION_ACTION 94
#define IODEFV2_CLASS_ID_EXPECTATION 95
#define IODEFV2_CLASS_ID_DOMAIN_DATA_DOMAIN_STATUS 96
#define IODEFV2_CLASS_ID_DOMAIN_DATA_SYSTEM_STATUS 97
#define IODEFV2_CLASS_ID_DOMAIN_DATA 98
#define IODEFV2_CLASS_ID_HASH_DATA_SCOPE 99
#define IODEFV2_CLASS_ID_HASH_DATA 100
#define IODEFV2_CLASS_ID_BULK_OBSERVABLE_FORMAT 101
#define IODEFV2_CLASS_ID_HISTORY_RESTRICTION 102
#define IODEFV2_CLASS_ID_HISTORY 103
#define IODEFV2_CLASS_ID_DISCOVERY_SOURCE 104
#define IODEFV2_CLASS_ID_DISCOVERY_RESTRICTION 105
#define IODEFV2_CLASS_ID_DISCOVERY 106
#define IODEFV2_CLASS_ID_BULK_OBSERVABLE_TYPE 107
#define IODEFV2_CLASS_ID_BULK_OBSERVABLE 108
#define IODEFV2_CLASS_ID_EMAIL_DATA 109
#define IODEFV2_CLASS_ID_FILE 110
#define IODEFV2_CLASS_ID_NODE 111
#define IODEFV2_CLASS_ID_SERVICE 112
#define IODEFV2_CLASS_ID_FILE_DATA_RESTRICTION 113
#define IODEFV2_CLASS_ID_FILE_DATA 114
#define IODEFV2_CLASS_ID_SYSTEM_CATEGORY 115
#define IODEFV2_CLASS_ID_SYSTEM_RESTRICTION 116
#define IODEFV2_CLASS_ID_SYSTEM_SPOOFED 117
#define IODEFV2_CLASS_ID_SYSTEM_VIRTUAL 118
#define IODEFV2_CLASS_ID_SYSTEM_OWNERSHIP 119
#define IODEFV2_CLASS_ID_SYSTEM 120
#define IODEFV2_CLASS_ID_RECORD_DATA_RESTRICTION 121
#define IODEFV2_CLASS_ID_RECORD_DATA 122
#define IODEFV2_CLASS_ID_RECORD_RESTRICTION 123
#define IODEFV2_CLASS_ID_RECORD 124
#define IODEFV2_CLASS_ID_FLOW 125
#define IODEFV2_CLASS_ID_EVENT_DATA_RESTRICTION 126
#define IODEFV2_CLASS_ID_EVENT_DATA 127
#define IODEFV2_CLASS_ID_OBSERVABLE_RESTRICTION 128
#define IODEFV2_CLASS_ID_OBSERVABLE 129
#define IODEFV2_CLASS_ID_INDICATOR_EXPRESSION_OPERATOR 130
#define IODEFV2_CLASS_ID_INDICATOR_EXPRESSION 131
#define IODEFV2_CLASS_ID_INDICATOR_RESTRICTION 132
#define IODEFV2_CLASS_ID_INDICATOR 133
#define IODEFV2_CLASS_ID_INDICATOR_DATA 134
#define IODEFV2_CLASS_ID_INCIDENT_STATUS 135
#define IODEFV2_CLASS_ID_INCIDENT_LANG 136
#define IODEFV2_CLASS_ID_INCIDENT_PURPOSE 137
#define IODEFV2_CLASS_ID_INCIDENT_RESTRICTION 138
#define IODEFV2_CLASS_ID_INCIDENT 139
#define IODEFV2_CLASS_ID_DOCUMENT_LANG 140
#define IODEFV2_CLASS_ID_DOCUMENT 141
#endif /*_LIBIODEFV2_IODEFV2_TREE_WRAP */


