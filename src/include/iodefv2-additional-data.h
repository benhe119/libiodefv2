
/*****
*
* Copyright (C) 2004-2016 CS-SI. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@prelude-ids.com>
*
* This file is part of the Libiodefv2 library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*
*****/

/*
 * This file was automatically generated by our generator, version 1
 *
 * Do not make changes to this file unless you know what you are doing.
 * modify the template interface file instead.
 * IODEFV2 version : RFC5070-bis-26
 * Template file: generate-additional-data.h.mako
 *
 */


#ifndef _LIBIODEFV2_IODEFV2_ADDITIONAL_DATA_H
#define _LIBIODEFV2_IODEFV2_ADDITIONAL_DATA_H

#ifdef __cplusplus
 extern "C" {
#endif

/*
 * basic type
 */
int iodefv2_additional_data_new_real(iodefv2_additional_data_t **ret, float data);
int iodefv2_additional_data_new_byte(iodefv2_additional_data_t **ret, uint8_t byte);
int iodefv2_additional_data_new_integer(iodefv2_additional_data_t **ret, uint32_t data);
int iodefv2_additional_data_new_boolean(iodefv2_additional_data_t **ret, libiodefv2_bool_t data);
int iodefv2_additional_data_new_character(iodefv2_additional_data_t **ret, char data);

void iodefv2_additional_data_set_real(iodefv2_additional_data_t *ptr, float data);
void iodefv2_additional_data_set_byte(iodefv2_additional_data_t *ptr, uint8_t byte);
void iodefv2_additional_data_set_integer(iodefv2_additional_data_t *ptr, uint32_t data);
void iodefv2_additional_data_set_boolean(iodefv2_additional_data_t *ptr, libiodefv2_bool_t data);
void iodefv2_additional_data_set_character(iodefv2_additional_data_t *ptr, char data);


#define _IODEFV2_ADDITIONAL_DATA_DECL(name)\
int iodefv2_additional_data_new_## name## _ref_fast(iodefv2_additional_data_t **ad, const char *data, size_t len);\
int iodefv2_additional_data_new_## name## _ref(iodefv2_additional_data_t **ad, const char *data);\
int iodefv2_additional_data_set_## name## _ref_fast(iodefv2_additional_data_t *ad, const char *data, size_t len);\
int iodefv2_additional_data_set_## name## _ref(iodefv2_additional_data_t *ad, const char *data);\
int iodefv2_additional_data_new_## name## _dup_fast(iodefv2_additional_data_t **ad, const char *data, size_t len);\
int iodefv2_additional_data_new_## name## _dup(iodefv2_additional_data_t **ad, const char *data);\
int iodefv2_additional_data_set_## name## _dup_fast(iodefv2_additional_data_t *ad, const char *data, size_t len);\
int iodefv2_additional_data_set_## name## _dup(iodefv2_additional_data_t *ad, const char *data);\
int iodefv2_additional_data_new_## name## _nodup_fast(iodefv2_additional_data_t **ad, char *data, size_t len);\
int iodefv2_additional_data_new_## name## _nodup(iodefv2_additional_data_t **ad, char *data);\
int iodefv2_additional_data_set_## name## _nodup_fast(iodefv2_additional_data_t *ad, char *data, size_t len);\
int iodefv2_additional_data_set_## name## _nodup(iodefv2_additional_data_t *ad, char *data);
_IODEFV2_ADDITIONAL_DATA_DECL(portlist)
_IODEFV2_ADDITIONAL_DATA_DECL(string)
_IODEFV2_ADDITIONAL_DATA_DECL(path)
_IODEFV2_ADDITIONAL_DATA_DECL(url)
_IODEFV2_ADDITIONAL_DATA_DECL(csv)
_IODEFV2_ADDITIONAL_DATA_DECL(xml)
_IODEFV2_ADDITIONAL_DATA_DECL(ntpstamp)
_IODEFV2_ADDITIONAL_DATA_DECL(ext_value)
_IODEFV2_ADDITIONAL_DATA_DECL(date_time)
int iodefv2_additional_data_new_byte_string_ref(iodefv2_additional_data_t **ad, const unsigned char *data, size_t len);
int iodefv2_additional_data_set_byte_string_ref(iodefv2_additional_data_t *ad, const unsigned char *data, size_t len);
int iodefv2_additional_data_new_byte_string_dup(iodefv2_additional_data_t **ad, const unsigned char *data, size_t len);
int iodefv2_additional_data_set_byte_string_dup(iodefv2_additional_data_t *ad, const unsigned char *data, size_t len);
int iodefv2_additional_data_new_byte_string_nodup(iodefv2_additional_data_t **ad, unsigned char *data, size_t len);
int iodefv2_additional_data_set_byte_string_nodup(iodefv2_additional_data_t *ad, unsigned char *data, size_t len);
/*
 * copy / clone / destroy
 */
int iodefv2_additional_data_copy_ref(iodefv2_additional_data_t *src, iodefv2_additional_data_t *dst);
int iodefv2_additional_data_copy_dup(iodefv2_additional_data_t *src, iodefv2_additional_data_t *dst);

/*
 * Accessors
 */

float iodefv2_additional_data_get_real(iodefv2_additional_data_t *data);
uint32_t iodefv2_additional_data_get_integer(iodefv2_additional_data_t *data);
libiodefv2_bool_t iodefv2_additional_data_get_boolean(iodefv2_additional_data_t *data);
char iodefv2_additional_data_get_character(iodefv2_additional_data_t *data);
uint8_t iodefv2_additional_data_get_byte(iodefv2_additional_data_t *data);

size_t iodefv2_additional_data_get_len(iodefv2_additional_data_t *data);

libiodefv2_bool_t iodefv2_additional_data_is_empty(iodefv2_additional_data_t *data);

int iodefv2_additional_data_data_to_string(iodefv2_additional_data_t *ad, libiodefv2_string_t *out);

#ifdef __cplusplus
 }
#endif

#endif /* _LIBIODEFV2_IODEFV2_DATA_H */
